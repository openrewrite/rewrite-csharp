//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a let clause in a C# LINQ query expression that introduces
    /// a new range variable based on a computation.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple let clause
    ///     from n in numbers
    ///     let square = n * n
    ///     select square
    ///     // Multiple let clauses
    ///     from s in strings
    ///     let length = s.Length
    ///     let upperCase = s.ToUpper()
    ///     select new { s, length, upperCase }
    ///     // Let with complex expressions
    ///     from p in people
    ///     let fullName = p.FirstName + " " + p.LastName
    ///     let age = DateTime.Now.Year - p.BirthYear
    ///     select new { fullName, age }
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class LetClause(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<J.Identifier> identifier,
    Expression expression
    ) : Cs, Cs.QueryClause, J<LetClause>, MutableTree<LetClause>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitLetClause(this, p);
        }

        public Guid Id { get;  set; } = id;

        public LetClause WithId(Guid newId)
        {
            return newId == Id ? this : new LetClause(newId, Prefix, Markers, _identifier, Expression);
        }
        public Space Prefix { get;  set; } = prefix;

        public LetClause WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new LetClause(Id, newPrefix, Markers, _identifier, Expression);
        }
        public Markers Markers { get;  set; } = markers;

        public LetClause WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new LetClause(Id, Prefix, newMarkers, _identifier, Expression);
        }
        private JRightPadded<J.Identifier> _identifier = identifier;
        public J.Identifier Identifier => _identifier.Element;

        public LetClause WithIdentifier(J.Identifier newIdentifier)
        {
            return Padding.WithIdentifier(_identifier.WithElement(newIdentifier));
        }
        public Expression Expression { get;  set; } = expression;

        public LetClause WithExpression(Expression newExpression)
        {
            return ReferenceEquals(newExpression, Expression) ? this : new LetClause(Id, Prefix, Markers, _identifier, newExpression);
        }
        public sealed record PaddingHelper(Cs.LetClause T)
        {
            public JRightPadded<J.Identifier> Identifier { get => T._identifier;  set => T._identifier = value; }

            public Cs.LetClause WithIdentifier(JRightPadded<J.Identifier> newIdentifier)
            {
                return Identifier == newIdentifier ? T : new Cs.LetClause(T.Id, T.Prefix, T.Markers, newIdentifier, T.Expression);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is LetClause && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}