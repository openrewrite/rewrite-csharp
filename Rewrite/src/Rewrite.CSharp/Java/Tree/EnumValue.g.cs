//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    /// <summary>
    /// Represents a constant in an enum declaration.
    /// <br/>Example:
    /// <code>{@code
    /// enum Color {
    ///     RED,
    ///     GREEN
    /// }
    /// }</code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class EnumValue(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> annotations,
    Identifier name,
    NewClass? initializer
    ) : J, J<EnumValue>, MutableTree<EnumValue>
    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitEnumValue(this, p);
        }

        public Guid Id { get;  set; } = id;

        public EnumValue WithId(Guid newId)
        {
            return newId == Id ? this : new EnumValue(newId, Prefix, Markers, Annotations, Name, Initializer);
        }
        public Space Prefix { get;  set; } = prefix;

        public EnumValue WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new EnumValue(Id, newPrefix, Markers, Annotations, Name, Initializer);
        }
        public Markers Markers { get;  set; } = markers;

        public EnumValue WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new EnumValue(Id, Prefix, newMarkers, Annotations, Name, Initializer);
        }
        public IList<J.Annotation> Annotations { get;  set; } = annotations;

        public EnumValue WithAnnotations(IList<J.Annotation> newAnnotations)
        {
            return newAnnotations == Annotations ? this : new EnumValue(Id, Prefix, Markers, newAnnotations, Name, Initializer);
        }
        public J.Identifier Name { get;  set; } = name;

        public EnumValue WithName(J.Identifier newName)
        {
            return ReferenceEquals(newName, Name) ? this : new EnumValue(Id, Prefix, Markers, Annotations, newName, Initializer);
        }
        public J.NewClass? Initializer { get;  set; } = initializer;

        public EnumValue WithInitializer(J.NewClass? newInitializer)
        {
            return ReferenceEquals(newInitializer, Initializer) ? this : new EnumValue(Id, Prefix, Markers, Annotations, Name, newInitializer);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is EnumValue && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}