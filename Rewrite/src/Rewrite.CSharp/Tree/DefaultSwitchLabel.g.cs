//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a default case label in a switch statement.
    /// <br/>
    /// For example:
    /// <code>
    /// switch(value) {
    ///     case 1:
    ///         break;
    ///     default:      // default label
    ///         Console.WriteLine("default");
    ///         break;
    /// }
    /// // Also used in switch expressions
    /// var result = value switch {
    ///     1 =&gt; "one",
    ///     default =&gt; "other"
    /// };
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class DefaultSwitchLabel(
    Guid id,
    Space prefix,
    Markers markers,
    Space colonToken
    ) : Cs, Cs.SwitchLabel, Expression, Expression<DefaultSwitchLabel>, J<DefaultSwitchLabel>, MutableTree<DefaultSwitchLabel>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitDefaultSwitchLabel(this, p);
        }

        public Guid Id { get;  set; } = id;

        public DefaultSwitchLabel WithId(Guid newId)
        {
            return newId == Id ? this : new DefaultSwitchLabel(newId, Prefix, Markers, ColonToken);
        }
        public Space Prefix { get;  set; } = prefix;

        public DefaultSwitchLabel WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new DefaultSwitchLabel(Id, newPrefix, Markers, ColonToken);
        }
        public Markers Markers { get;  set; } = markers;

        public DefaultSwitchLabel WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new DefaultSwitchLabel(Id, Prefix, newMarkers, ColonToken);
        }
        public Space ColonToken { get;  set; } = colonToken;

        public DefaultSwitchLabel WithColonToken(Space newColonToken)
        {
            return newColonToken == ColonToken ? this : new DefaultSwitchLabel(Id, Prefix, Markers, newColonToken);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is DefaultSwitchLabel && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}