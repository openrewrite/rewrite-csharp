//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    /// <summary>
    /// A block of statements, enclosed in curly braces.
    /// <br/>
    /// To create an empty block, use <see cref=".createEmptyBlock()"/>.
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Block(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<bool> @static,
    IList<JRightPadded<Statement>> statements,
    Space end
    ) : J,Statement    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitBlock(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Block WithId(Guid newId)
        {
            return newId == Id ? this : new Block(newId, Prefix, Markers, _static, _statements, End);
        }
        public Space Prefix { get;  set; } = prefix;

        public Block WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Block(Id, newPrefix, Markers, _static, _statements, End);
        }
        public Markers Markers { get;  set; } = markers;

        public Block WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Block(Id, Prefix, newMarkers, _static, _statements, End);
        }
        private JRightPadded<bool> _static = @static;
        public bool Static => _static.Element;

        public Block WithStatic(bool newStatic)
        {
            return Padding.WithStatic(_static.WithElement(newStatic));
        }
        private IList<JRightPadded<Statement>> _statements = statements;
        public IList<Statement> Statements => _statements.Elements();

        public Block WithStatements(IList<Statement> newStatements)
        {
            return Padding.WithStatements(_statements.WithElements(newStatements));
        }
        public Space End { get;  set; } = end;

        public Block WithEnd(Space newEnd)
        {
            return newEnd == End ? this : new Block(Id, Prefix, Markers, _static, _statements, newEnd);
        }
        public sealed record PaddingHelper(J.Block T)
        {
            public JRightPadded<bool> Static { get => T._static;  set => T._static = value; }

            public J.Block WithStatic(JRightPadded<bool> newStatic)
            {
                return Static == newStatic ? T : new J.Block(T.Id, T.Prefix, T.Markers, newStatic, T._statements, T.End);
            }

            public IList<JRightPadded<Statement>> Statements { get => T._statements;  set => T._statements = value; }

            public J.Block WithStatements(IList<JRightPadded<Statement>> newStatements)
            {
                return Statements == newStatements ? T : new J.Block(T.Id, T.Prefix, T.Markers, T._static, newStatements, T.End);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Block && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}