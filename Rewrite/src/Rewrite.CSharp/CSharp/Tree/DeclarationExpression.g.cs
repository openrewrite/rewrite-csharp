//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// A declaration expression node represents a local variable declaration in an expression context.
    /// This is used in two primary scenarios in C#:
    /// <list type="bullet">
    ///     <item>Out variable declarations: <c>Method(out int x)</c></item>
    ///     <item>Deconstruction declarations: <c>int (x, y) = GetPoint()</c></item>
    /// </list>
    /// Example 1: Out variable declaration:
    /// <code>
    /// if(int.TryParse(s, out int result)) {
    ///     // use result
    /// }
    /// </code>
    /// Example 2: Deconstruction declaration:
    /// <code>
    /// int (x, y) = point;
    /// ^^^^^^^^^^
    /// (int count, var (name, age)) = GetPersonDetails();
    ///             ^^^^^^^^^^^^^^^ DeclarationExpression
    ///                 ^^^^^^^^^^^ ParenthesizedVariableDesignation
    ///  ^^^^^^^^^ DeclarationExpression
    ///      ^^^^^ SingleVariableDesignation
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class DeclarationExpression(
    Guid id,
    Space prefix,
    Markers markers,
    TypeTree? typeExpression,
    VariableDesignation variables
    ) : Cs, Expression, TypedTree, Expression<DeclarationExpression>, TypedTree<DeclarationExpression>, J<DeclarationExpression>, MutableTree<DeclarationExpression>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitDeclarationExpression(this, p);
        }

        public Guid Id { get;  set; } = id;

        public DeclarationExpression WithId(Guid newId)
        {
            return newId == Id ? this : new DeclarationExpression(newId, Prefix, Markers, TypeExpression, Variables);
        }
        public Space Prefix { get;  set; } = prefix;

        public DeclarationExpression WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new DeclarationExpression(Id, newPrefix, Markers, TypeExpression, Variables);
        }
        public Markers Markers { get;  set; } = markers;

        public DeclarationExpression WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new DeclarationExpression(Id, Prefix, newMarkers, TypeExpression, Variables);
        }
        public TypeTree? TypeExpression { get;  set; } = typeExpression;

        public DeclarationExpression WithTypeExpression(TypeTree? newTypeExpression)
        {
            return ReferenceEquals(newTypeExpression, TypeExpression) ? this : new DeclarationExpression(Id, Prefix, Markers, newTypeExpression, Variables);
        }
        public Cs.VariableDesignation Variables { get;  set; } = variables;

        public DeclarationExpression WithVariables(Cs.VariableDesignation newVariables)
        {
            return ReferenceEquals(newVariables, Variables) ? this : new DeclarationExpression(Id, Prefix, Markers, TypeExpression, newVariables);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is DeclarationExpression && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}