//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# indexer declaration which allows objects to be indexed like arrays.
    /// <code>
    /// // Simple indexer
    /// public int this[int index] { get { } set { } }
    /// // Indexer with multiple parameters
    /// public string this[int x, int y] { get; set; }
    /// // Readonly indexer
    /// public MyType this[string key] { get; }
    /// // Interface indexer
    /// string this[int index] { get; set; }
    /// // Protected indexer with expression body
    /// protected internal int this[int i] =&gt; array[i];
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class IndexerDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<J.Modifier> modifiers,
    TypeTree typeExpression,
    JRightPadded<TypeTree>? explicitInterfaceSpecifier,
    Expression indexer,
    JContainer<Expression> parameters,
    JLeftPadded<Expression>? expressionBody,
    J.Block? accessors
    ) : Cs,Statement,TypedTree    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitIndexerDeclaration(this, p);
        }

        public Guid Id { get;  set; } = id;

        public IndexerDeclaration WithId(Guid newId)
        {
            return newId == Id ? this : new IndexerDeclaration(newId, Prefix, Markers, Modifiers, TypeExpression, _explicitInterfaceSpecifier, Indexer, _parameters, _expressionBody, Accessors);
        }
        public Space Prefix { get;  set; } = prefix;

        public IndexerDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new IndexerDeclaration(Id, newPrefix, Markers, Modifiers, TypeExpression, _explicitInterfaceSpecifier, Indexer, _parameters, _expressionBody, Accessors);
        }
        public Markers Markers { get;  set; } = markers;

        public IndexerDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new IndexerDeclaration(Id, Prefix, newMarkers, Modifiers, TypeExpression, _explicitInterfaceSpecifier, Indexer, _parameters, _expressionBody, Accessors);
        }
        public IList<J.Modifier> Modifiers { get;  set; } = modifiers;

        public IndexerDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == Modifiers ? this : new IndexerDeclaration(Id, Prefix, Markers, newModifiers, TypeExpression, _explicitInterfaceSpecifier, Indexer, _parameters, _expressionBody, Accessors);
        }
        public TypeTree TypeExpression { get;  set; } = typeExpression;

        public IndexerDeclaration WithTypeExpression(TypeTree newTypeExpression)
        {
            return ReferenceEquals(newTypeExpression, TypeExpression) ? this : new IndexerDeclaration(Id, Prefix, Markers, Modifiers, newTypeExpression, _explicitInterfaceSpecifier, Indexer, _parameters, _expressionBody, Accessors);
        }
        private JRightPadded<TypeTree>? _explicitInterfaceSpecifier = explicitInterfaceSpecifier;
        public TypeTree? ExplicitInterfaceSpecifier => _explicitInterfaceSpecifier?.Element;

        public IndexerDeclaration WithExplicitInterfaceSpecifier(TypeTree? newExplicitInterfaceSpecifier)
        {
            return Padding.WithExplicitInterfaceSpecifier(JRightPadded<TypeTree>.WithElement(_explicitInterfaceSpecifier, newExplicitInterfaceSpecifier));
        }
        public Expression Indexer { get;  set; } = indexer;

        public IndexerDeclaration WithIndexer(Expression newIndexer)
        {
            return ReferenceEquals(newIndexer, Indexer) ? this : new IndexerDeclaration(Id, Prefix, Markers, Modifiers, TypeExpression, _explicitInterfaceSpecifier, newIndexer, _parameters, _expressionBody, Accessors);
        }
        private JContainer<Expression> _parameters = parameters;
        public IList<Expression> Parameters => _parameters.GetElements();

        public IndexerDeclaration WithParameters(IList<Expression> newParameters)
        {
            return Padding.WithParameters(JContainer<Expression>.WithElements(_parameters, newParameters));
        }
        private JLeftPadded<Expression>? _expressionBody = expressionBody;
        public Expression? ExpressionBody => _expressionBody?.Element;

        public IndexerDeclaration WithExpressionBody(Expression? newExpressionBody)
        {
            return Padding.WithExpressionBody(JLeftPadded<Expression>.WithElement(_expressionBody, newExpressionBody));
        }
        public J.Block? Accessors { get;  set; } = accessors;

        public IndexerDeclaration WithAccessors(J.Block? newAccessors)
        {
            return ReferenceEquals(newAccessors, Accessors) ? this : new IndexerDeclaration(Id, Prefix, Markers, Modifiers, TypeExpression, _explicitInterfaceSpecifier, Indexer, _parameters, _expressionBody, newAccessors);
        }
        public sealed record PaddingHelper(Cs.IndexerDeclaration T)
        {
            public JRightPadded<TypeTree>? ExplicitInterfaceSpecifier { get => T._explicitInterfaceSpecifier;  set => T._explicitInterfaceSpecifier = value; }

            public Cs.IndexerDeclaration WithExplicitInterfaceSpecifier(JRightPadded<TypeTree>? newExplicitInterfaceSpecifier)
            {
                return ExplicitInterfaceSpecifier == newExplicitInterfaceSpecifier ? T : new Cs.IndexerDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, T.TypeExpression, newExplicitInterfaceSpecifier, T.Indexer, T._parameters, T._expressionBody, T.Accessors);
            }

            public JContainer<Expression> Parameters { get => T._parameters;  set => T._parameters = value; }

            public Cs.IndexerDeclaration WithParameters(JContainer<Expression> newParameters)
            {
                return Parameters == newParameters ? T : new Cs.IndexerDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, T.TypeExpression, T._explicitInterfaceSpecifier, T.Indexer, newParameters, T._expressionBody, T.Accessors);
            }

            public JLeftPadded<Expression>? ExpressionBody { get => T._expressionBody;  set => T._expressionBody = value; }

            public Cs.IndexerDeclaration WithExpressionBody(JLeftPadded<Expression>? newExpressionBody)
            {
                return ExpressionBody == newExpressionBody ? T : new Cs.IndexerDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, T.TypeExpression, T._explicitInterfaceSpecifier, T.Indexer, T._parameters, newExpressionBody, T.Accessors);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is IndexerDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}