//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ArrayAccess(
    Guid id,
    Space prefix,
    Markers markers,
    Expression indexed,
    ArrayDimension dimension,
    JavaType? type
    ) : J, Expression, TypedTree
    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitArrayAccess(this, p);
        }

        public Guid Id { get;  set; } = id;

        public ArrayAccess WithId(Guid newId)
        {
            return newId == Id ? this : new ArrayAccess(newId, Prefix, Markers, Indexed, Dimension, Type);
        }
        public Space Prefix { get;  set; } = prefix;

        public ArrayAccess WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new ArrayAccess(Id, newPrefix, Markers, Indexed, Dimension, Type);
        }
        public Markers Markers { get;  set; } = markers;

        public ArrayAccess WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new ArrayAccess(Id, Prefix, newMarkers, Indexed, Dimension, Type);
        }
        public Expression Indexed { get;  set; } = indexed;

        public ArrayAccess WithIndexed(Expression newIndexed)
        {
            return ReferenceEquals(newIndexed, Indexed) ? this : new ArrayAccess(Id, Prefix, Markers, newIndexed, Dimension, Type);
        }
        public J.ArrayDimension Dimension { get;  set; } = dimension;

        public ArrayAccess WithDimension(J.ArrayDimension newDimension)
        {
            return ReferenceEquals(newDimension, Dimension) ? this : new ArrayAccess(Id, Prefix, Markers, Indexed, newDimension, Type);
        }
        public JavaType? Type { get;  set; } = type;

        public ArrayAccess WithType(JavaType? newType)
        {
            return newType == Type ? this : new ArrayAccess(Id, Prefix, Markers, Indexed, Dimension, newType);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ArrayAccess && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}