//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    public partial class AttributeList(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<J.Identifier>? target,
    IList<JRightPadded<J.Annotation>> attributes
    ) : Cs, MutableTree<AttributeList>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitAttributeList(this, p);
        }

        public Guid Id => id;

        public AttributeList WithId(Guid newId)
        {
            return newId == id ? this : new AttributeList(newId, prefix, markers, _target, _attributes);
        }
        public Space Prefix => prefix;

        public AttributeList WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new AttributeList(id, newPrefix, markers, _target, _attributes);
        }
        public Markers Markers => markers;

        public AttributeList WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new AttributeList(id, prefix, newMarkers, _target, _attributes);
        }
        private readonly JRightPadded<J.Identifier>? _target = target;
        public J.Identifier? Target => _target?.Element;

        public AttributeList WithTarget(J.Identifier? newTarget)
        {
            return Padding.WithTarget(JRightPadded<J.Identifier>.WithElement(_target, newTarget));
        }
        private readonly IList<JRightPadded<J.Annotation>> _attributes = attributes;
        public IList<J.Annotation> Attributes => _attributes.Elements();

        public AttributeList WithAttributes(IList<J.Annotation> newAttributes)
        {
            return Padding.WithAttributes(_attributes.WithElements(newAttributes));
        }
        public sealed record PaddingHelper(Cs.AttributeList T)
        {
            public JRightPadded<J.Identifier>? Target => T._target;

            public Cs.AttributeList WithTarget(JRightPadded<J.Identifier>? newTarget)
            {
                return T._target == newTarget ? T : new Cs.AttributeList(T.Id, T.Prefix, T.Markers, newTarget, T._attributes);
            }

            public IList<JRightPadded<J.Annotation>> Attributes => T._attributes;

            public Cs.AttributeList WithAttributes(IList<JRightPadded<J.Annotation>> newAttributes)
            {
                return T._attributes == newAttributes ? T : new Cs.AttributeList(T.Id, T.Prefix, T.Markers, T._target, newAttributes);
            }

        }

        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is AttributeList && other.Id == Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}