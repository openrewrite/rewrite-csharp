//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    public partial class AnnotatedStatement(
    Guid id,
    Space prefix,
    Markers markers,
    IList<AttributeList> attributeLists,
    Statement statement
    ) : Cs, Statement, MutableTree<AnnotatedStatement>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitAnnotatedStatement(this, p);
        }

        public Guid Id => id;

        public AnnotatedStatement WithId(Guid newId)
        {
            return newId == id ? this : new AnnotatedStatement(newId, prefix, markers, attributeLists, statement);
        }
        public Space Prefix => prefix;

        public AnnotatedStatement WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new AnnotatedStatement(id, newPrefix, markers, attributeLists, statement);
        }
        public Markers Markers => markers;

        public AnnotatedStatement WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new AnnotatedStatement(id, prefix, newMarkers, attributeLists, statement);
        }
        public IList<Cs.AttributeList> AttributeLists => attributeLists;

        public AnnotatedStatement WithAttributeLists(IList<Cs.AttributeList> newAttributeLists)
        {
            return newAttributeLists == attributeLists ? this : new AnnotatedStatement(id, prefix, markers, newAttributeLists, statement);
        }
        public Statement Statement => statement;

        public AnnotatedStatement WithStatement(Statement newStatement)
        {
            return ReferenceEquals(newStatement, statement) ? this : new AnnotatedStatement(id, prefix, markers, attributeLists, newStatement);
        }
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is AnnotatedStatement && other.Id == Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}