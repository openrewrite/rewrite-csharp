//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public sealed partial class ParenthesizedTypeTree(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> annotations,
    J.Parentheses<TypeTree> parenthesizedType
    ) : J, TypeTree, Expression, MutableTree<ParenthesizedTypeTree>
    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitParenthesizedTypeTree(this, p);
        }

        public JavaType? Type => Extensions.GetJavaType(this);

        public ParenthesizedTypeTree WithType(JavaType newType)
        {
            return Extensions.WithJavaType(this, newType);
        }
        public Guid Id => id;

        public ParenthesizedTypeTree WithId(Guid newId)
        {
            return newId == id ? this : new ParenthesizedTypeTree(newId, prefix, markers, annotations, parenthesizedType);
        }
        public Space Prefix => prefix;

        public ParenthesizedTypeTree WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new ParenthesizedTypeTree(id, newPrefix, markers, annotations, parenthesizedType);
        }
        public Markers Markers => markers;

        public ParenthesizedTypeTree WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new ParenthesizedTypeTree(id, prefix, newMarkers, annotations, parenthesizedType);
        }
        public IList<J.Annotation> Annotations => annotations;

        public ParenthesizedTypeTree WithAnnotations(IList<J.Annotation> newAnnotations)
        {
            return newAnnotations == annotations ? this : new ParenthesizedTypeTree(id, prefix, markers, newAnnotations, parenthesizedType);
        }
        public J.Parentheses<TypeTree> ParenthesizedType => parenthesizedType;

        public ParenthesizedTypeTree WithParenthesizedType(J.Parentheses<TypeTree> newParenthesizedType)
        {
            return ReferenceEquals(newParenthesizedType, parenthesizedType) ? this : new ParenthesizedTypeTree(id, prefix, markers, annotations, newParenthesizedType);
        }
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ParenthesizedTypeTree && other.Id == Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}