//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a pattern-based case label in a switch statement, optionally including a when clause.
    /// <br/>
    /// For example:
    /// <code>
    /// switch(obj) {
    ///     case int n when n &gt; 0:
    ///     case string s when s.Length &gt; 0:
    ///     case [] when IsValid():
    ///     case Person { Age: &gt; 18 }:
    ///     case not null:
    ///     case &gt; 100:
    /// }
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class CasePatternSwitchLabel(
    Guid id,
    Space prefix,
    Markers markers,
    Pattern pattern,
    JLeftPadded<Expression>? whenClause,
    Space colonToken
    ) : Cs,Cs.SwitchLabel    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitCasePatternSwitchLabel(this, p);
        }

        public Guid Id { get;  set; } = id;

        public CasePatternSwitchLabel WithId(Guid newId)
        {
            return newId == Id ? this : new CasePatternSwitchLabel(newId, Prefix, Markers, Pattern, _whenClause, ColonToken);
        }
        public Space Prefix { get;  set; } = prefix;

        public CasePatternSwitchLabel WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new CasePatternSwitchLabel(Id, newPrefix, Markers, Pattern, _whenClause, ColonToken);
        }
        public Markers Markers { get;  set; } = markers;

        public CasePatternSwitchLabel WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new CasePatternSwitchLabel(Id, Prefix, newMarkers, Pattern, _whenClause, ColonToken);
        }
        public Cs.Pattern Pattern { get;  set; } = pattern;

        public CasePatternSwitchLabel WithPattern(Cs.Pattern newPattern)
        {
            return ReferenceEquals(newPattern, Pattern) ? this : new CasePatternSwitchLabel(Id, Prefix, Markers, newPattern, _whenClause, ColonToken);
        }
        private JLeftPadded<Expression>? _whenClause = whenClause;
        public Expression? WhenClause => _whenClause?.Element;

        public CasePatternSwitchLabel WithWhenClause(Expression? newWhenClause)
        {
            return Padding.WithWhenClause(JLeftPadded<Expression>.WithElement(_whenClause, newWhenClause));
        }
        public Space ColonToken { get;  set; } = colonToken;

        public CasePatternSwitchLabel WithColonToken(Space newColonToken)
        {
            return newColonToken == ColonToken ? this : new CasePatternSwitchLabel(Id, Prefix, Markers, Pattern, _whenClause, newColonToken);
        }
        public sealed record PaddingHelper(Cs.CasePatternSwitchLabel T)
        {
            public JLeftPadded<Expression>? WhenClause { get => T._whenClause;  set => T._whenClause = value; }

            public Cs.CasePatternSwitchLabel WithWhenClause(JLeftPadded<Expression>? newWhenClause)
            {
                return WhenClause == newWhenClause ? T : new Cs.CasePatternSwitchLabel(T.Id, T.Prefix, T.Markers, T.Pattern, newWhenClause, T.ColonToken);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is CasePatternSwitchLabel && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}