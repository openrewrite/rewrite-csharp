//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# unsafe statement block which allows direct memory manipulation and pointer operations.
    /// Code within an unsafe block can perform operations like pointer arithmetic, fixed-size buffers,
    /// and direct memory access.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Basic unsafe block
    ///     unsafe {
    ///         int* ptr = &value;
    ///     }
    ///     // Unsafe with pointer operations
    ///     unsafe {
    ///         int* p1 = &x;
    ///         int* p2 = p1 + 1;
    ///         *p2 = 100;
    ///     }
    ///     // Unsafe with fixed buffers
    ///     unsafe {
    ///         fixed (byte* ptr = bytes) {
    ///             // Direct memory access
    ///         }
    ///     }
    ///     // Unsafe with sizeof operations
    ///     unsafe {
    ///         int size = sizeof(CustomStruct);
    ///         byte* buffer = stackalloc byte[size];
    ///     }
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class UnsafeStatement(
    Guid id,
    Space prefix,
    Markers markers,
    J.Block block
    ) : Cs, Statement, MutableTree<UnsafeStatement>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitUnsafeStatement(this, p);
        }

        public Guid Id => id;

        public UnsafeStatement WithId(Guid newId)
        {
            return newId == id ? this : new UnsafeStatement(newId, prefix, markers, block);
        }
        public Space Prefix => prefix;

        public UnsafeStatement WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new UnsafeStatement(id, newPrefix, markers, block);
        }
        public Markers Markers => markers;

        public UnsafeStatement WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new UnsafeStatement(id, prefix, newMarkers, block);
        }
        public J.Block Block => block;

        public UnsafeStatement WithBlock(J.Block newBlock)
        {
            return ReferenceEquals(newBlock, block) ? this : new UnsafeStatement(id, prefix, markers, newBlock);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is UnsafeStatement && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}