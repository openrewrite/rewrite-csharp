//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents the body of a LINQ query expression, consisting of the query clauses and a final select or group clause.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Body of query includes everything after initial 'from':
    ///     from c in customers
    ///     where c.Age &gt; 18       // Clauses part
    ///     orderby c.LastName     // Clauses part
    ///     select c.Name          // SelectOrGroup part
    ///     into oldCustomers      // Continuation part
    ///     where oldCustomers...
    ///     // Another example with join:
    ///     from o in orders
    ///     join c in customers    // Clauses part
    ///         on o.CustomerId equals c.Id
    ///     where o.Total &gt; 1000   // Clauses part
    ///     select new { o, c }    // SelectOrGroup part
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class QueryBody(
    Guid id,
    Space prefix,
    Markers markers,
    IList<QueryClause> clauses,
    SelectOrGroupClause? selectOrGroup,
    QueryContinuation? continuation
    ) : Cs    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitQueryBody(this, p);
        }

        public Guid Id { get;  set; } = id;

        public QueryBody WithId(Guid newId)
        {
            return newId == Id ? this : new QueryBody(newId, Prefix, Markers, Clauses, SelectOrGroup, Continuation);
        }
        public Space Prefix { get;  set; } = prefix;

        public QueryBody WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new QueryBody(Id, newPrefix, Markers, Clauses, SelectOrGroup, Continuation);
        }
        public Markers Markers { get;  set; } = markers;

        public QueryBody WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new QueryBody(Id, Prefix, newMarkers, Clauses, SelectOrGroup, Continuation);
        }
        public IList<Cs.QueryClause> Clauses { get;  set; } = clauses;

        public QueryBody WithClauses(IList<Cs.QueryClause> newClauses)
        {
            return newClauses == Clauses ? this : new QueryBody(Id, Prefix, Markers, newClauses, SelectOrGroup, Continuation);
        }
        public Cs.SelectOrGroupClause? SelectOrGroup { get;  set; } = selectOrGroup;

        public QueryBody WithSelectOrGroup(Cs.SelectOrGroupClause? newSelectOrGroup)
        {
            return ReferenceEquals(newSelectOrGroup, SelectOrGroup) ? this : new QueryBody(Id, Prefix, Markers, Clauses, newSelectOrGroup, Continuation);
        }
        public Cs.QueryContinuation? Continuation { get;  set; } = continuation;

        public QueryBody WithContinuation(Cs.QueryContinuation? newContinuation)
        {
            return ReferenceEquals(newContinuation, Continuation) ? this : new QueryBody(Id, Prefix, Markers, Clauses, SelectOrGroup, newContinuation);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is QueryBody && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}