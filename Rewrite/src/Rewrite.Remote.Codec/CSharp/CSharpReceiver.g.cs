//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using Rewrite.Remote;
using Rewrite.RewriteCSharp;
using Rewrite.RewriteJava;
using Rewrite.RewriteJava.Tree;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.Remote.Codec.CSharp;

using Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "RedundantSuppressNullableWarningExpression")]
public record CSharpReceiver : Receiver
{
    public ReceiverContext Fork(ReceiverContext ctx)
    {
        return ctx.Fork(new Visitor(), new Factory());
    }

    public object Receive<T>(T? before, ReceiverContext ctx) where T : Core.Tree
    {
        var forked = Fork(ctx);
        return forked.Visitor!.Visit(before, forked)!;
    }

    private class Visitor : CSharpVisitor<ReceiverContext>
    {
        public override J? Visit(Tree? tree, ReceiverContext ctx)
        {
            Cursor = new Cursor(Cursor, tree!);

            tree = ctx.ReceiveNode((J?)tree, ctx.ReceiveTree);

            Cursor = Cursor.Parent!;
            return (J?)tree;
        }

        public override J VisitCompilationUnit(Cs.CompilationUnit compilationUnit, ReceiverContext ctx)
        {
            compilationUnit = compilationUnit.WithId(ctx.ReceiveValue(compilationUnit.Id)!);
            compilationUnit = compilationUnit.WithPrefix(ctx.ReceiveNode(compilationUnit.Prefix, ReceiveSpace)!);
            compilationUnit = compilationUnit.WithMarkers(ctx.ReceiveNode(compilationUnit.Markers, ctx.ReceiveMarkers)!);
            compilationUnit = compilationUnit.WithSourcePath(ctx.ReceiveValue(compilationUnit.SourcePath)!);
            compilationUnit = compilationUnit.WithFileAttributes(ctx.ReceiveValue(compilationUnit.FileAttributes));
            compilationUnit = compilationUnit.WithCharsetName(ctx.ReceiveValue(compilationUnit.CharsetName));
            compilationUnit = compilationUnit.WithCharsetBomMarked(ctx.ReceiveValue(compilationUnit.CharsetBomMarked));
            compilationUnit = compilationUnit.WithChecksum(ctx.ReceiveValue(compilationUnit.Checksum));
            compilationUnit = compilationUnit.Padding.WithExterns(ctx.ReceiveNodes(compilationUnit.Padding.Externs, ReceiveRightPadded)!);
            compilationUnit = compilationUnit.Padding.WithUsings(ctx.ReceiveNodes(compilationUnit.Padding.Usings, ReceiveRightPadded)!);
            compilationUnit = compilationUnit.WithAttributeLists(ctx.ReceiveNodes(compilationUnit.AttributeLists, ctx.ReceiveTree)!);
            compilationUnit = compilationUnit.Padding.WithMembers(ctx.ReceiveNodes(compilationUnit.Padding.Members, ReceiveRightPadded)!);
            compilationUnit = compilationUnit.WithEof(ctx.ReceiveNode(compilationUnit.Eof, ReceiveSpace)!);
            return compilationUnit;
        }

        public override J VisitRefExpression(Cs.RefExpression refExpression, ReceiverContext ctx)
        {
            refExpression = refExpression.WithId(ctx.ReceiveValue(refExpression.Id)!);
            refExpression = refExpression.WithPrefix(ctx.ReceiveNode(refExpression.Prefix, ReceiveSpace)!);
            refExpression = refExpression.WithMarkers(ctx.ReceiveNode(refExpression.Markers, ctx.ReceiveMarkers)!);
            refExpression = refExpression.WithExpression(ctx.ReceiveNode(refExpression.Expression, ctx.ReceiveTree)!);
            return refExpression;
        }

        public override J VisitPointerType(Cs.PointerType pointerType, ReceiverContext ctx)
        {
            pointerType = pointerType.WithId(ctx.ReceiveValue(pointerType.Id)!);
            pointerType = pointerType.WithPrefix(ctx.ReceiveNode(pointerType.Prefix, ReceiveSpace)!);
            pointerType = pointerType.WithMarkers(ctx.ReceiveNode(pointerType.Markers, ctx.ReceiveMarkers)!);
            pointerType = pointerType.Padding.WithElementType(ctx.ReceiveNode(pointerType.Padding.ElementType, ReceiveRightPadded)!);
            return pointerType;
        }

        public override J VisitRefType(Cs.RefType refType, ReceiverContext ctx)
        {
            refType = refType.WithId(ctx.ReceiveValue(refType.Id)!);
            refType = refType.WithPrefix(ctx.ReceiveNode(refType.Prefix, ReceiveSpace)!);
            refType = refType.WithMarkers(ctx.ReceiveNode(refType.Markers, ctx.ReceiveMarkers)!);
            refType = refType.WithReadonlyKeyword(ctx.ReceiveNode(refType.ReadonlyKeyword, ctx.ReceiveTree));
            refType = refType.WithTypeIdentifier(ctx.ReceiveNode(refType.TypeIdentifier, ctx.ReceiveTree)!);
            refType = refType.WithType(ctx.ReceiveValue(refType.Type));
            return refType;
        }

        public override J VisitForEachVariableLoop(Cs.ForEachVariableLoop forEachVariableLoop, ReceiverContext ctx)
        {
            forEachVariableLoop = forEachVariableLoop.WithId(ctx.ReceiveValue(forEachVariableLoop.Id)!);
            forEachVariableLoop = forEachVariableLoop.WithPrefix(ctx.ReceiveNode(forEachVariableLoop.Prefix, ReceiveSpace)!);
            forEachVariableLoop = forEachVariableLoop.WithMarkers(ctx.ReceiveNode(forEachVariableLoop.Markers, ctx.ReceiveMarkers)!);
            forEachVariableLoop = forEachVariableLoop.WithControlElement(ctx.ReceiveNode(forEachVariableLoop.ControlElement, ctx.ReceiveTree)!);
            forEachVariableLoop = forEachVariableLoop.Padding.WithBody(ctx.ReceiveNode(forEachVariableLoop.Padding.Body, ReceiveRightPadded)!);
            return forEachVariableLoop;
        }

        public override J VisitForEachVariableLoopControl(Cs.ForEachVariableLoop.Control control, ReceiverContext ctx)
        {
            control = control.WithId(ctx.ReceiveValue(control.Id)!);
            control = control.WithPrefix(ctx.ReceiveNode(control.Prefix, ReceiveSpace)!);
            control = control.WithMarkers(ctx.ReceiveNode(control.Markers, ctx.ReceiveMarkers)!);
            control = control.Padding.WithVariable(ctx.ReceiveNode(control.Padding.Variable, ReceiveRightPadded)!);
            control = control.Padding.WithIterable(ctx.ReceiveNode(control.Padding.Iterable, ReceiveRightPadded)!);
            return control;
        }

        public override J VisitArgument(Cs.Argument argument, ReceiverContext ctx)
        {
            argument = argument.WithId(ctx.ReceiveValue(argument.Id)!);
            argument = argument.WithPrefix(ctx.ReceiveNode(argument.Prefix, ReceiveSpace)!);
            argument = argument.WithMarkers(ctx.ReceiveNode(argument.Markers, ctx.ReceiveMarkers)!);
            argument = argument.Padding.WithNameColumn(ctx.ReceiveNode(argument.Padding.NameColumn, ReceiveRightPadded));
            argument = argument.WithRefKindKeyword(ctx.ReceiveNode(argument.RefKindKeyword, ctx.ReceiveTree));
            argument = argument.WithExpression(ctx.ReceiveNode(argument.Expression, ctx.ReceiveTree)!);
            return argument;
        }

        public override J VisitAnnotatedStatement(Cs.AnnotatedStatement annotatedStatement, ReceiverContext ctx)
        {
            annotatedStatement = annotatedStatement.WithId(ctx.ReceiveValue(annotatedStatement.Id)!);
            annotatedStatement = annotatedStatement.WithPrefix(ctx.ReceiveNode(annotatedStatement.Prefix, ReceiveSpace)!);
            annotatedStatement = annotatedStatement.WithMarkers(ctx.ReceiveNode(annotatedStatement.Markers, ctx.ReceiveMarkers)!);
            annotatedStatement = annotatedStatement.WithAttributeLists(ctx.ReceiveNodes(annotatedStatement.AttributeLists, ctx.ReceiveTree)!);
            annotatedStatement = annotatedStatement.WithStatement(ctx.ReceiveNode(annotatedStatement.Statement, ctx.ReceiveTree)!);
            return annotatedStatement;
        }

        public override J VisitArrayRankSpecifier(Cs.ArrayRankSpecifier arrayRankSpecifier, ReceiverContext ctx)
        {
            arrayRankSpecifier = arrayRankSpecifier.WithId(ctx.ReceiveValue(arrayRankSpecifier.Id)!);
            arrayRankSpecifier = arrayRankSpecifier.WithPrefix(ctx.ReceiveNode(arrayRankSpecifier.Prefix, ReceiveSpace)!);
            arrayRankSpecifier = arrayRankSpecifier.WithMarkers(ctx.ReceiveNode(arrayRankSpecifier.Markers, ctx.ReceiveMarkers)!);
            arrayRankSpecifier = arrayRankSpecifier.Padding.WithSizes(ctx.ReceiveNode(arrayRankSpecifier.Padding.Sizes, ReceiveContainer)!);
            return arrayRankSpecifier;
        }

        public override J VisitAssignmentOperation(Cs.AssignmentOperation assignmentOperation, ReceiverContext ctx)
        {
            assignmentOperation = assignmentOperation.WithId(ctx.ReceiveValue(assignmentOperation.Id)!);
            assignmentOperation = assignmentOperation.WithPrefix(ctx.ReceiveNode(assignmentOperation.Prefix, ReceiveSpace)!);
            assignmentOperation = assignmentOperation.WithMarkers(ctx.ReceiveNode(assignmentOperation.Markers, ctx.ReceiveMarkers)!);
            assignmentOperation = assignmentOperation.WithVariable(ctx.ReceiveNode(assignmentOperation.Variable, ctx.ReceiveTree)!);
            assignmentOperation = assignmentOperation.Padding.WithOperator(ctx.ReceiveNode(assignmentOperation.Padding.Operator, ReceiveLeftPadded)!);
            assignmentOperation = assignmentOperation.WithAssignment(ctx.ReceiveNode(assignmentOperation.Assignment, ctx.ReceiveTree)!);
            assignmentOperation = assignmentOperation.WithType(ctx.ReceiveValue(assignmentOperation.Type));
            return assignmentOperation;
        }

        public override J VisitAttributeList(Cs.AttributeList attributeList, ReceiverContext ctx)
        {
            attributeList = attributeList.WithId(ctx.ReceiveValue(attributeList.Id)!);
            attributeList = attributeList.WithPrefix(ctx.ReceiveNode(attributeList.Prefix, ReceiveSpace)!);
            attributeList = attributeList.WithMarkers(ctx.ReceiveNode(attributeList.Markers, ctx.ReceiveMarkers)!);
            attributeList = attributeList.Padding.WithTarget(ctx.ReceiveNode(attributeList.Padding.Target, ReceiveRightPadded));
            attributeList = attributeList.Padding.WithAttributes(ctx.ReceiveNodes(attributeList.Padding.Attributes, ReceiveRightPadded)!);
            return attributeList;
        }

        public override J VisitAwaitExpression(Cs.AwaitExpression awaitExpression, ReceiverContext ctx)
        {
            awaitExpression = awaitExpression.WithId(ctx.ReceiveValue(awaitExpression.Id)!);
            awaitExpression = awaitExpression.WithPrefix(ctx.ReceiveNode(awaitExpression.Prefix, ReceiveSpace)!);
            awaitExpression = awaitExpression.WithMarkers(ctx.ReceiveNode(awaitExpression.Markers, ctx.ReceiveMarkers)!);
            awaitExpression = awaitExpression.WithExpression(ctx.ReceiveNode(awaitExpression.Expression, ctx.ReceiveTree)!);
            awaitExpression = awaitExpression.WithType(ctx.ReceiveValue(awaitExpression.Type));
            return awaitExpression;
        }

        public override J VisitStackAllocExpression(Cs.StackAllocExpression stackAllocExpression, ReceiverContext ctx)
        {
            stackAllocExpression = stackAllocExpression.WithId(ctx.ReceiveValue(stackAllocExpression.Id)!);
            stackAllocExpression = stackAllocExpression.WithPrefix(ctx.ReceiveNode(stackAllocExpression.Prefix, ReceiveSpace)!);
            stackAllocExpression = stackAllocExpression.WithMarkers(ctx.ReceiveNode(stackAllocExpression.Markers, ctx.ReceiveMarkers)!);
            stackAllocExpression = stackAllocExpression.WithExpression(ctx.ReceiveNode(stackAllocExpression.Expression, ctx.ReceiveTree)!);
            return stackAllocExpression;
        }

        public override J VisitGotoStatement(Cs.GotoStatement gotoStatement, ReceiverContext ctx)
        {
            gotoStatement = gotoStatement.WithId(ctx.ReceiveValue(gotoStatement.Id)!);
            gotoStatement = gotoStatement.WithPrefix(ctx.ReceiveNode(gotoStatement.Prefix, ReceiveSpace)!);
            gotoStatement = gotoStatement.WithMarkers(ctx.ReceiveNode(gotoStatement.Markers, ctx.ReceiveMarkers)!);
            gotoStatement = gotoStatement.WithCaseOrDefaultKeyword(ctx.ReceiveNode(gotoStatement.CaseOrDefaultKeyword, ctx.ReceiveTree));
            gotoStatement = gotoStatement.WithTarget(ctx.ReceiveNode(gotoStatement.Target, ctx.ReceiveTree));
            return gotoStatement;
        }

        public override J VisitEventDeclaration(Cs.EventDeclaration eventDeclaration, ReceiverContext ctx)
        {
            eventDeclaration = eventDeclaration.WithId(ctx.ReceiveValue(eventDeclaration.Id)!);
            eventDeclaration = eventDeclaration.WithPrefix(ctx.ReceiveNode(eventDeclaration.Prefix, ReceiveSpace)!);
            eventDeclaration = eventDeclaration.WithMarkers(ctx.ReceiveNode(eventDeclaration.Markers, ctx.ReceiveMarkers)!);
            eventDeclaration = eventDeclaration.WithAttributeLists(ctx.ReceiveNodes(eventDeclaration.AttributeLists, ctx.ReceiveTree)!);
            eventDeclaration = eventDeclaration.WithModifiers(ctx.ReceiveNodes(eventDeclaration.Modifiers, ctx.ReceiveTree)!);
            eventDeclaration = eventDeclaration.Padding.WithTypeExpression(ctx.ReceiveNode(eventDeclaration.Padding.TypeExpression, ReceiveLeftPadded)!);
            eventDeclaration = eventDeclaration.Padding.WithInterfaceSpecifier(ctx.ReceiveNode(eventDeclaration.Padding.InterfaceSpecifier, ReceiveRightPadded));
            eventDeclaration = eventDeclaration.WithName(ctx.ReceiveNode(eventDeclaration.Name, ctx.ReceiveTree)!);
            eventDeclaration = eventDeclaration.Padding.WithAccessors(ctx.ReceiveNode(eventDeclaration.Padding.Accessors, ReceiveContainer));
            return eventDeclaration;
        }

        public override J VisitBinary(Cs.Binary binary, ReceiverContext ctx)
        {
            binary = binary.WithId(ctx.ReceiveValue(binary.Id)!);
            binary = binary.WithPrefix(ctx.ReceiveNode(binary.Prefix, ReceiveSpace)!);
            binary = binary.WithMarkers(ctx.ReceiveNode(binary.Markers, ctx.ReceiveMarkers)!);
            binary = binary.WithLeft(ctx.ReceiveNode(binary.Left, ctx.ReceiveTree)!);
            binary = binary.Padding.WithOperator(ctx.ReceiveNode(binary.Padding.Operator, ReceiveLeftPadded)!);
            binary = binary.WithRight(ctx.ReceiveNode(binary.Right, ctx.ReceiveTree)!);
            binary = binary.WithType(ctx.ReceiveValue(binary.Type));
            return binary;
        }

        public override J VisitBlockScopeNamespaceDeclaration(Cs.BlockScopeNamespaceDeclaration blockScopeNamespaceDeclaration, ReceiverContext ctx)
        {
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.WithId(ctx.ReceiveValue(blockScopeNamespaceDeclaration.Id)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.WithPrefix(ctx.ReceiveNode(blockScopeNamespaceDeclaration.Prefix, ReceiveSpace)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.WithMarkers(ctx.ReceiveNode(blockScopeNamespaceDeclaration.Markers, ctx.ReceiveMarkers)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.Padding.WithName(ctx.ReceiveNode(blockScopeNamespaceDeclaration.Padding.Name, ReceiveRightPadded)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.Padding.WithExterns(ctx.ReceiveNodes(blockScopeNamespaceDeclaration.Padding.Externs, ReceiveRightPadded)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.Padding.WithUsings(ctx.ReceiveNodes(blockScopeNamespaceDeclaration.Padding.Usings, ReceiveRightPadded)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.Padding.WithMembers(ctx.ReceiveNodes(blockScopeNamespaceDeclaration.Padding.Members, ReceiveRightPadded)!);
            blockScopeNamespaceDeclaration = blockScopeNamespaceDeclaration.WithEnd(ctx.ReceiveNode(blockScopeNamespaceDeclaration.End, ReceiveSpace)!);
            return blockScopeNamespaceDeclaration;
        }

        public override J VisitCollectionExpression(Cs.CollectionExpression collectionExpression, ReceiverContext ctx)
        {
            collectionExpression = collectionExpression.WithId(ctx.ReceiveValue(collectionExpression.Id)!);
            collectionExpression = collectionExpression.WithPrefix(ctx.ReceiveNode(collectionExpression.Prefix, ReceiveSpace)!);
            collectionExpression = collectionExpression.WithMarkers(ctx.ReceiveNode(collectionExpression.Markers, ctx.ReceiveMarkers)!);
            collectionExpression = collectionExpression.Padding.WithElements(ctx.ReceiveNodes(collectionExpression.Padding.Elements, ReceiveRightPadded)!);
            collectionExpression = collectionExpression.WithType(ctx.ReceiveValue(collectionExpression.Type)!);
            return collectionExpression;
        }

        public override J VisitExpressionStatement(Cs.ExpressionStatement expressionStatement, ReceiverContext ctx)
        {
            expressionStatement = expressionStatement.WithId(ctx.ReceiveValue(expressionStatement.Id)!);
            expressionStatement = expressionStatement.WithPrefix(ctx.ReceiveNode(expressionStatement.Prefix, ReceiveSpace)!);
            expressionStatement = expressionStatement.WithMarkers(ctx.ReceiveNode(expressionStatement.Markers, ctx.ReceiveMarkers)!);
            expressionStatement = expressionStatement.Padding.WithExpression(ctx.ReceiveNode(expressionStatement.Padding.Expression, ReceiveRightPadded)!);
            return expressionStatement;
        }

        public override J VisitExternAlias(Cs.ExternAlias externAlias, ReceiverContext ctx)
        {
            externAlias = externAlias.WithId(ctx.ReceiveValue(externAlias.Id)!);
            externAlias = externAlias.WithPrefix(ctx.ReceiveNode(externAlias.Prefix, ReceiveSpace)!);
            externAlias = externAlias.WithMarkers(ctx.ReceiveNode(externAlias.Markers, ctx.ReceiveMarkers)!);
            externAlias = externAlias.Padding.WithIdentifier(ctx.ReceiveNode(externAlias.Padding.Identifier, ReceiveLeftPadded)!);
            return externAlias;
        }

        public override J VisitFileScopeNamespaceDeclaration(Cs.FileScopeNamespaceDeclaration fileScopeNamespaceDeclaration, ReceiverContext ctx)
        {
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.WithId(ctx.ReceiveValue(fileScopeNamespaceDeclaration.Id)!);
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.WithPrefix(ctx.ReceiveNode(fileScopeNamespaceDeclaration.Prefix, ReceiveSpace)!);
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.WithMarkers(ctx.ReceiveNode(fileScopeNamespaceDeclaration.Markers, ctx.ReceiveMarkers)!);
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.Padding.WithName(ctx.ReceiveNode(fileScopeNamespaceDeclaration.Padding.Name, ReceiveRightPadded)!);
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.Padding.WithExterns(ctx.ReceiveNodes(fileScopeNamespaceDeclaration.Padding.Externs, ReceiveRightPadded)!);
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.Padding.WithUsings(ctx.ReceiveNodes(fileScopeNamespaceDeclaration.Padding.Usings, ReceiveRightPadded)!);
            fileScopeNamespaceDeclaration = fileScopeNamespaceDeclaration.Padding.WithMembers(ctx.ReceiveNodes(fileScopeNamespaceDeclaration.Padding.Members, ReceiveRightPadded)!);
            return fileScopeNamespaceDeclaration;
        }

        public override J VisitInterpolatedString(Cs.InterpolatedString interpolatedString, ReceiverContext ctx)
        {
            interpolatedString = interpolatedString.WithId(ctx.ReceiveValue(interpolatedString.Id)!);
            interpolatedString = interpolatedString.WithPrefix(ctx.ReceiveNode(interpolatedString.Prefix, ReceiveSpace)!);
            interpolatedString = interpolatedString.WithMarkers(ctx.ReceiveNode(interpolatedString.Markers, ctx.ReceiveMarkers)!);
            interpolatedString = interpolatedString.WithStart(ctx.ReceiveValue(interpolatedString.Start)!);
            interpolatedString = interpolatedString.Padding.WithParts(ctx.ReceiveNodes(interpolatedString.Padding.Parts, ReceiveRightPadded)!);
            interpolatedString = interpolatedString.WithEnd(ctx.ReceiveValue(interpolatedString.End)!);
            return interpolatedString;
        }

        public override J VisitInterpolation(Cs.Interpolation interpolation, ReceiverContext ctx)
        {
            interpolation = interpolation.WithId(ctx.ReceiveValue(interpolation.Id)!);
            interpolation = interpolation.WithPrefix(ctx.ReceiveNode(interpolation.Prefix, ReceiveSpace)!);
            interpolation = interpolation.WithMarkers(ctx.ReceiveNode(interpolation.Markers, ctx.ReceiveMarkers)!);
            interpolation = interpolation.Padding.WithExpression(ctx.ReceiveNode(interpolation.Padding.Expression, ReceiveRightPadded)!);
            interpolation = interpolation.Padding.WithAlignment(ctx.ReceiveNode(interpolation.Padding.Alignment, ReceiveRightPadded));
            interpolation = interpolation.Padding.WithFormat(ctx.ReceiveNode(interpolation.Padding.Format, ReceiveRightPadded));
            return interpolation;
        }

        public override J VisitNullSafeExpression(Cs.NullSafeExpression nullSafeExpression, ReceiverContext ctx)
        {
            nullSafeExpression = nullSafeExpression.WithId(ctx.ReceiveValue(nullSafeExpression.Id)!);
            nullSafeExpression = nullSafeExpression.WithPrefix(ctx.ReceiveNode(nullSafeExpression.Prefix, ReceiveSpace)!);
            nullSafeExpression = nullSafeExpression.WithMarkers(ctx.ReceiveNode(nullSafeExpression.Markers, ctx.ReceiveMarkers)!);
            nullSafeExpression = nullSafeExpression.Padding.WithExpression(ctx.ReceiveNode(nullSafeExpression.Padding.Expression, ReceiveRightPadded)!);
            return nullSafeExpression;
        }

        public override J VisitStatementExpression(Cs.StatementExpression statementExpression, ReceiverContext ctx)
        {
            statementExpression = statementExpression.WithId(ctx.ReceiveValue(statementExpression.Id)!);
            statementExpression = statementExpression.WithPrefix(ctx.ReceiveNode(statementExpression.Prefix, ReceiveSpace)!);
            statementExpression = statementExpression.WithMarkers(ctx.ReceiveNode(statementExpression.Markers, ctx.ReceiveMarkers)!);
            statementExpression = statementExpression.WithStatement(ctx.ReceiveNode(statementExpression.Statement, ctx.ReceiveTree)!);
            return statementExpression;
        }

        public override J VisitUsingDirective(Cs.UsingDirective usingDirective, ReceiverContext ctx)
        {
            usingDirective = usingDirective.WithId(ctx.ReceiveValue(usingDirective.Id)!);
            usingDirective = usingDirective.WithPrefix(ctx.ReceiveNode(usingDirective.Prefix, ReceiveSpace)!);
            usingDirective = usingDirective.WithMarkers(ctx.ReceiveNode(usingDirective.Markers, ctx.ReceiveMarkers)!);
            usingDirective = usingDirective.Padding.WithGlobal(ctx.ReceiveNode(usingDirective.Padding.Global, ReceiveRightPadded)!);
            usingDirective = usingDirective.Padding.WithStatic(ctx.ReceiveNode(usingDirective.Padding.Static, ReceiveLeftPadded)!);
            usingDirective = usingDirective.Padding.WithUnsafe(ctx.ReceiveNode(usingDirective.Padding.Unsafe, ReceiveLeftPadded)!);
            usingDirective = usingDirective.Padding.WithAlias(ctx.ReceiveNode(usingDirective.Padding.Alias, ReceiveRightPadded));
            usingDirective = usingDirective.WithNamespaceOrType(ctx.ReceiveNode(usingDirective.NamespaceOrType, ctx.ReceiveTree)!);
            return usingDirective;
        }

        public override J VisitPropertyDeclaration(Cs.PropertyDeclaration propertyDeclaration, ReceiverContext ctx)
        {
            propertyDeclaration = propertyDeclaration.WithId(ctx.ReceiveValue(propertyDeclaration.Id)!);
            propertyDeclaration = propertyDeclaration.WithPrefix(ctx.ReceiveNode(propertyDeclaration.Prefix, ReceiveSpace)!);
            propertyDeclaration = propertyDeclaration.WithMarkers(ctx.ReceiveNode(propertyDeclaration.Markers, ctx.ReceiveMarkers)!);
            propertyDeclaration = propertyDeclaration.WithAttributeLists(ctx.ReceiveNodes(propertyDeclaration.AttributeLists, ctx.ReceiveTree)!);
            propertyDeclaration = propertyDeclaration.WithModifiers(ctx.ReceiveNodes(propertyDeclaration.Modifiers, ctx.ReceiveTree)!);
            propertyDeclaration = propertyDeclaration.WithTypeExpression(ctx.ReceiveNode(propertyDeclaration.TypeExpression, ctx.ReceiveTree)!);
            propertyDeclaration = propertyDeclaration.Padding.WithInterfaceSpecifier(ctx.ReceiveNode(propertyDeclaration.Padding.InterfaceSpecifier, ReceiveRightPadded));
            propertyDeclaration = propertyDeclaration.WithName(ctx.ReceiveNode(propertyDeclaration.Name, ctx.ReceiveTree)!);
            propertyDeclaration = propertyDeclaration.WithAccessors(ctx.ReceiveNode(propertyDeclaration.Accessors, ctx.ReceiveTree));
            propertyDeclaration = propertyDeclaration.WithExpressionBody(ctx.ReceiveNode(propertyDeclaration.ExpressionBody, ctx.ReceiveTree));
            propertyDeclaration = propertyDeclaration.Padding.WithInitializer(ctx.ReceiveNode(propertyDeclaration.Padding.Initializer, ReceiveLeftPadded));
            return propertyDeclaration;
        }

        public override J VisitKeyword(Cs.Keyword keyword, ReceiverContext ctx)
        {
            keyword = keyword.WithId(ctx.ReceiveValue(keyword.Id)!);
            keyword = keyword.WithPrefix(ctx.ReceiveNode(keyword.Prefix, ReceiveSpace)!);
            keyword = keyword.WithMarkers(ctx.ReceiveNode(keyword.Markers, ctx.ReceiveMarkers)!);
            keyword = keyword.WithKind(ctx.ReceiveValue(keyword.Kind)!);
            return keyword;
        }

        public override J VisitLambda(Cs.Lambda lambda, ReceiverContext ctx)
        {
            lambda = lambda.WithId(ctx.ReceiveValue(lambda.Id)!);
            lambda = lambda.WithPrefix(ctx.ReceiveNode(lambda.Prefix, ReceiveSpace)!);
            lambda = lambda.WithMarkers(ctx.ReceiveNode(lambda.Markers, ctx.ReceiveMarkers)!);
            lambda = lambda.WithLambdaExpression(ctx.ReceiveNode(lambda.LambdaExpression, ctx.ReceiveTree)!);
            lambda = lambda.WithModifiers(ctx.ReceiveNodes(lambda.Modifiers, ctx.ReceiveTree)!);
            return lambda;
        }

        public override J VisitClassDeclaration(Cs.ClassDeclaration classDeclaration, ReceiverContext ctx)
        {
            classDeclaration = classDeclaration.WithId(ctx.ReceiveValue(classDeclaration.Id)!);
            classDeclaration = classDeclaration.WithPrefix(ctx.ReceiveNode(classDeclaration.Prefix, ReceiveSpace)!);
            classDeclaration = classDeclaration.WithMarkers(ctx.ReceiveNode(classDeclaration.Markers, ctx.ReceiveMarkers)!);
            classDeclaration = classDeclaration.WithAttributeList(ctx.ReceiveNodes(classDeclaration.AttributeList, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithModifiers(ctx.ReceiveNodes(classDeclaration.Modifiers, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.Padding.WithKind(ctx.ReceiveNode(classDeclaration.Padding.Kind, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithName(ctx.ReceiveNode(classDeclaration.Name, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.Padding.WithTypeParameters(ctx.ReceiveNode(classDeclaration.Padding.TypeParameters, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithPrimaryConstructor(ctx.ReceiveNode(classDeclaration.Padding.PrimaryConstructor, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithExtendings(ctx.ReceiveNode(classDeclaration.Padding.Extendings, ReceiveLeftPadded));
            classDeclaration = classDeclaration.Padding.WithImplementings(ctx.ReceiveNode(classDeclaration.Padding.Implementings, ReceiveContainer));
            classDeclaration = classDeclaration.WithBody(ctx.ReceiveNode(classDeclaration.Body, ctx.ReceiveTree));
            classDeclaration = classDeclaration.Padding.WithTypeParameterConstraintClauses(ctx.ReceiveNode(classDeclaration.Padding.TypeParameterConstraintClauses, ReceiveContainer));
            classDeclaration = classDeclaration.WithType(ctx.ReceiveValue(classDeclaration.Type));
            return classDeclaration;
        }

        public override J VisitMethodDeclaration(Cs.MethodDeclaration methodDeclaration, ReceiverContext ctx)
        {
            methodDeclaration = methodDeclaration.WithId(ctx.ReceiveValue(methodDeclaration.Id)!);
            methodDeclaration = methodDeclaration.WithPrefix(ctx.ReceiveNode(methodDeclaration.Prefix, ReceiveSpace)!);
            methodDeclaration = methodDeclaration.WithMarkers(ctx.ReceiveNode(methodDeclaration.Markers, ctx.ReceiveMarkers)!);
            methodDeclaration = methodDeclaration.WithAttributes(ctx.ReceiveNodes(methodDeclaration.Attributes, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.WithModifiers(ctx.ReceiveNodes(methodDeclaration.Modifiers, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.Padding.WithTypeParameters(ctx.ReceiveNode(methodDeclaration.Padding.TypeParameters, ReceiveContainer));
            methodDeclaration = methodDeclaration.WithReturnTypeExpression(ctx.ReceiveNode(methodDeclaration.ReturnTypeExpression, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.Padding.WithExplicitInterfaceSpecifier(ctx.ReceiveNode(methodDeclaration.Padding.ExplicitInterfaceSpecifier, ReceiveRightPadded));
            methodDeclaration = methodDeclaration.WithName(ctx.ReceiveNode(methodDeclaration.Name, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.Padding.WithParameters(ctx.ReceiveNode(methodDeclaration.Padding.Parameters, ReceiveContainer)!);
            methodDeclaration = methodDeclaration.WithBody(ctx.ReceiveNode(methodDeclaration.Body, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.WithMethodType(ctx.ReceiveValue(methodDeclaration.MethodType));
            methodDeclaration = methodDeclaration.Padding.WithTypeParameterConstraintClauses(ctx.ReceiveNode(methodDeclaration.Padding.TypeParameterConstraintClauses, ReceiveContainer)!);
            return methodDeclaration;
        }

        public override J VisitUsingStatement(Cs.UsingStatement usingStatement, ReceiverContext ctx)
        {
            usingStatement = usingStatement.WithId(ctx.ReceiveValue(usingStatement.Id)!);
            usingStatement = usingStatement.WithPrefix(ctx.ReceiveNode(usingStatement.Prefix, ReceiveSpace)!);
            usingStatement = usingStatement.WithMarkers(ctx.ReceiveNode(usingStatement.Markers, ctx.ReceiveMarkers)!);
            usingStatement = usingStatement.WithAwaitKeyword(ctx.ReceiveNode(usingStatement.AwaitKeyword, ctx.ReceiveTree));
            usingStatement = usingStatement.Padding.WithExpression(ctx.ReceiveNode(usingStatement.Padding.Expression, ReceiveLeftPadded)!);
            usingStatement = usingStatement.WithStatement(ctx.ReceiveNode(usingStatement.Statement, ctx.ReceiveTree)!);
            return usingStatement;
        }

        public override J VisitTypeParameterConstraintClause(Cs.TypeParameterConstraintClause typeParameterConstraintClause, ReceiverContext ctx)
        {
            typeParameterConstraintClause = typeParameterConstraintClause.WithId(ctx.ReceiveValue(typeParameterConstraintClause.Id)!);
            typeParameterConstraintClause = typeParameterConstraintClause.WithPrefix(ctx.ReceiveNode(typeParameterConstraintClause.Prefix, ReceiveSpace)!);
            typeParameterConstraintClause = typeParameterConstraintClause.WithMarkers(ctx.ReceiveNode(typeParameterConstraintClause.Markers, ctx.ReceiveMarkers)!);
            typeParameterConstraintClause = typeParameterConstraintClause.Padding.WithTypeParameter(ctx.ReceiveNode(typeParameterConstraintClause.Padding.TypeParameter, ReceiveRightPadded)!);
            typeParameterConstraintClause = typeParameterConstraintClause.Padding.WithTypeParameterConstraints(ctx.ReceiveNode(typeParameterConstraintClause.Padding.TypeParameterConstraints, ReceiveContainer)!);
            return typeParameterConstraintClause;
        }

        public override J VisitTypeConstraint(Cs.TypeConstraint typeConstraint, ReceiverContext ctx)
        {
            typeConstraint = typeConstraint.WithId(ctx.ReceiveValue(typeConstraint.Id)!);
            typeConstraint = typeConstraint.WithPrefix(ctx.ReceiveNode(typeConstraint.Prefix, ReceiveSpace)!);
            typeConstraint = typeConstraint.WithMarkers(ctx.ReceiveNode(typeConstraint.Markers, ctx.ReceiveMarkers)!);
            typeConstraint = typeConstraint.WithTypeExpression(ctx.ReceiveNode(typeConstraint.TypeExpression, ctx.ReceiveTree)!);
            return typeConstraint;
        }

        public override J VisitAllowsConstraintClause(Cs.AllowsConstraintClause allowsConstraintClause, ReceiverContext ctx)
        {
            allowsConstraintClause = allowsConstraintClause.WithId(ctx.ReceiveValue(allowsConstraintClause.Id)!);
            allowsConstraintClause = allowsConstraintClause.WithPrefix(ctx.ReceiveNode(allowsConstraintClause.Prefix, ReceiveSpace)!);
            allowsConstraintClause = allowsConstraintClause.WithMarkers(ctx.ReceiveNode(allowsConstraintClause.Markers, ctx.ReceiveMarkers)!);
            allowsConstraintClause = allowsConstraintClause.Padding.WithExpressions(ctx.ReceiveNode(allowsConstraintClause.Padding.Expressions, ReceiveContainer)!);
            return allowsConstraintClause;
        }

        public override J VisitRefStructConstraint(Cs.RefStructConstraint refStructConstraint, ReceiverContext ctx)
        {
            refStructConstraint = refStructConstraint.WithId(ctx.ReceiveValue(refStructConstraint.Id)!);
            refStructConstraint = refStructConstraint.WithPrefix(ctx.ReceiveNode(refStructConstraint.Prefix, ReceiveSpace)!);
            refStructConstraint = refStructConstraint.WithMarkers(ctx.ReceiveNode(refStructConstraint.Markers, ctx.ReceiveMarkers)!);
            return refStructConstraint;
        }

        public override J VisitClassOrStructConstraint(Cs.ClassOrStructConstraint classOrStructConstraint, ReceiverContext ctx)
        {
            classOrStructConstraint = classOrStructConstraint.WithId(ctx.ReceiveValue(classOrStructConstraint.Id)!);
            classOrStructConstraint = classOrStructConstraint.WithPrefix(ctx.ReceiveNode(classOrStructConstraint.Prefix, ReceiveSpace)!);
            classOrStructConstraint = classOrStructConstraint.WithMarkers(ctx.ReceiveNode(classOrStructConstraint.Markers, ctx.ReceiveMarkers)!);
            classOrStructConstraint = classOrStructConstraint.WithKind(ctx.ReceiveValue(classOrStructConstraint.Kind)!);
            return classOrStructConstraint;
        }

        public override J VisitConstructorConstraint(Cs.ConstructorConstraint constructorConstraint, ReceiverContext ctx)
        {
            constructorConstraint = constructorConstraint.WithId(ctx.ReceiveValue(constructorConstraint.Id)!);
            constructorConstraint = constructorConstraint.WithPrefix(ctx.ReceiveNode(constructorConstraint.Prefix, ReceiveSpace)!);
            constructorConstraint = constructorConstraint.WithMarkers(ctx.ReceiveNode(constructorConstraint.Markers, ctx.ReceiveMarkers)!);
            return constructorConstraint;
        }

        public override J VisitDefaultConstraint(Cs.DefaultConstraint defaultConstraint, ReceiverContext ctx)
        {
            defaultConstraint = defaultConstraint.WithId(ctx.ReceiveValue(defaultConstraint.Id)!);
            defaultConstraint = defaultConstraint.WithPrefix(ctx.ReceiveNode(defaultConstraint.Prefix, ReceiveSpace)!);
            defaultConstraint = defaultConstraint.WithMarkers(ctx.ReceiveNode(defaultConstraint.Markers, ctx.ReceiveMarkers)!);
            return defaultConstraint;
        }

        public override J VisitDeclarationExpression(Cs.DeclarationExpression declarationExpression, ReceiverContext ctx)
        {
            declarationExpression = declarationExpression.WithId(ctx.ReceiveValue(declarationExpression.Id)!);
            declarationExpression = declarationExpression.WithPrefix(ctx.ReceiveNode(declarationExpression.Prefix, ReceiveSpace)!);
            declarationExpression = declarationExpression.WithMarkers(ctx.ReceiveNode(declarationExpression.Markers, ctx.ReceiveMarkers)!);
            declarationExpression = declarationExpression.WithTypeExpression(ctx.ReceiveNode(declarationExpression.TypeExpression, ctx.ReceiveTree));
            declarationExpression = declarationExpression.WithVariables(ctx.ReceiveNode(declarationExpression.Variables, ctx.ReceiveTree)!);
            return declarationExpression;
        }

        public override J VisitSingleVariableDesignation(Cs.SingleVariableDesignation singleVariableDesignation, ReceiverContext ctx)
        {
            singleVariableDesignation = singleVariableDesignation.WithId(ctx.ReceiveValue(singleVariableDesignation.Id)!);
            singleVariableDesignation = singleVariableDesignation.WithPrefix(ctx.ReceiveNode(singleVariableDesignation.Prefix, ReceiveSpace)!);
            singleVariableDesignation = singleVariableDesignation.WithMarkers(ctx.ReceiveNode(singleVariableDesignation.Markers, ctx.ReceiveMarkers)!);
            singleVariableDesignation = singleVariableDesignation.WithName(ctx.ReceiveNode(singleVariableDesignation.Name, ctx.ReceiveTree)!);
            return singleVariableDesignation;
        }

        public override J VisitParenthesizedVariableDesignation(Cs.ParenthesizedVariableDesignation parenthesizedVariableDesignation, ReceiverContext ctx)
        {
            parenthesizedVariableDesignation = parenthesizedVariableDesignation.WithId(ctx.ReceiveValue(parenthesizedVariableDesignation.Id)!);
            parenthesizedVariableDesignation = parenthesizedVariableDesignation.WithPrefix(ctx.ReceiveNode(parenthesizedVariableDesignation.Prefix, ReceiveSpace)!);
            parenthesizedVariableDesignation = parenthesizedVariableDesignation.WithMarkers(ctx.ReceiveNode(parenthesizedVariableDesignation.Markers, ctx.ReceiveMarkers)!);
            parenthesizedVariableDesignation = parenthesizedVariableDesignation.Padding.WithVariables(ctx.ReceiveNode(parenthesizedVariableDesignation.Padding.Variables, ReceiveContainer)!);
            parenthesizedVariableDesignation = parenthesizedVariableDesignation.WithType(ctx.ReceiveValue(parenthesizedVariableDesignation.Type));
            return parenthesizedVariableDesignation;
        }

        public override J VisitDiscardVariableDesignation(Cs.DiscardVariableDesignation discardVariableDesignation, ReceiverContext ctx)
        {
            discardVariableDesignation = discardVariableDesignation.WithId(ctx.ReceiveValue(discardVariableDesignation.Id)!);
            discardVariableDesignation = discardVariableDesignation.WithPrefix(ctx.ReceiveNode(discardVariableDesignation.Prefix, ReceiveSpace)!);
            discardVariableDesignation = discardVariableDesignation.WithMarkers(ctx.ReceiveNode(discardVariableDesignation.Markers, ctx.ReceiveMarkers)!);
            discardVariableDesignation = discardVariableDesignation.WithDiscard(ctx.ReceiveNode(discardVariableDesignation.Discard, ctx.ReceiveTree)!);
            return discardVariableDesignation;
        }

        public override J VisitTupleExpression(Cs.TupleExpression tupleExpression, ReceiverContext ctx)
        {
            tupleExpression = tupleExpression.WithId(ctx.ReceiveValue(tupleExpression.Id)!);
            tupleExpression = tupleExpression.WithPrefix(ctx.ReceiveNode(tupleExpression.Prefix, ReceiveSpace)!);
            tupleExpression = tupleExpression.WithMarkers(ctx.ReceiveNode(tupleExpression.Markers, ctx.ReceiveMarkers)!);
            tupleExpression = tupleExpression.Padding.WithArguments(ctx.ReceiveNode(tupleExpression.Padding.Arguments, ReceiveContainer)!);
            return tupleExpression;
        }

        public override J VisitConstructor(Cs.Constructor constructor, ReceiverContext ctx)
        {
            constructor = constructor.WithId(ctx.ReceiveValue(constructor.Id)!);
            constructor = constructor.WithPrefix(ctx.ReceiveNode(constructor.Prefix, ReceiveSpace)!);
            constructor = constructor.WithMarkers(ctx.ReceiveNode(constructor.Markers, ctx.ReceiveMarkers)!);
            constructor = constructor.WithInitializer(ctx.ReceiveNode(constructor.Initializer, ctx.ReceiveTree));
            constructor = constructor.WithConstructorCore(ctx.ReceiveNode(constructor.ConstructorCore, ctx.ReceiveTree)!);
            return constructor;
        }

        public override J VisitDestructorDeclaration(Cs.DestructorDeclaration destructorDeclaration, ReceiverContext ctx)
        {
            destructorDeclaration = destructorDeclaration.WithId(ctx.ReceiveValue(destructorDeclaration.Id)!);
            destructorDeclaration = destructorDeclaration.WithPrefix(ctx.ReceiveNode(destructorDeclaration.Prefix, ReceiveSpace)!);
            destructorDeclaration = destructorDeclaration.WithMarkers(ctx.ReceiveNode(destructorDeclaration.Markers, ctx.ReceiveMarkers)!);
            destructorDeclaration = destructorDeclaration.WithMethodCore(ctx.ReceiveNode(destructorDeclaration.MethodCore, ctx.ReceiveTree)!);
            return destructorDeclaration;
        }

        public override J VisitUnary(Cs.Unary unary, ReceiverContext ctx)
        {
            unary = unary.WithId(ctx.ReceiveValue(unary.Id)!);
            unary = unary.WithPrefix(ctx.ReceiveNode(unary.Prefix, ReceiveSpace)!);
            unary = unary.WithMarkers(ctx.ReceiveNode(unary.Markers, ctx.ReceiveMarkers)!);
            unary = unary.Padding.WithOperator(ctx.ReceiveNode(unary.Padding.Operator, ReceiveLeftPadded)!);
            unary = unary.WithExpression(ctx.ReceiveNode(unary.Expression, ctx.ReceiveTree)!);
            unary = unary.WithType(ctx.ReceiveValue(unary.Type));
            return unary;
        }

        public override J VisitConstructorInitializer(Cs.ConstructorInitializer constructorInitializer, ReceiverContext ctx)
        {
            constructorInitializer = constructorInitializer.WithId(ctx.ReceiveValue(constructorInitializer.Id)!);
            constructorInitializer = constructorInitializer.WithPrefix(ctx.ReceiveNode(constructorInitializer.Prefix, ReceiveSpace)!);
            constructorInitializer = constructorInitializer.WithMarkers(ctx.ReceiveNode(constructorInitializer.Markers, ctx.ReceiveMarkers)!);
            constructorInitializer = constructorInitializer.WithKeyword(ctx.ReceiveNode(constructorInitializer.Keyword, ctx.ReceiveTree)!);
            constructorInitializer = constructorInitializer.Padding.WithArguments(ctx.ReceiveNode(constructorInitializer.Padding.Arguments, ReceiveContainer)!);
            return constructorInitializer;
        }

        public override J VisitTupleType(Cs.TupleType tupleType, ReceiverContext ctx)
        {
            tupleType = tupleType.WithId(ctx.ReceiveValue(tupleType.Id)!);
            tupleType = tupleType.WithPrefix(ctx.ReceiveNode(tupleType.Prefix, ReceiveSpace)!);
            tupleType = tupleType.WithMarkers(ctx.ReceiveNode(tupleType.Markers, ctx.ReceiveMarkers)!);
            tupleType = tupleType.Padding.WithElements(ctx.ReceiveNode(tupleType.Padding.Elements, ReceiveContainer)!);
            tupleType = tupleType.WithType(ctx.ReceiveValue(tupleType.Type));
            return tupleType;
        }

        public override J VisitTupleElement(Cs.TupleElement tupleElement, ReceiverContext ctx)
        {
            tupleElement = tupleElement.WithId(ctx.ReceiveValue(tupleElement.Id)!);
            tupleElement = tupleElement.WithPrefix(ctx.ReceiveNode(tupleElement.Prefix, ReceiveSpace)!);
            tupleElement = tupleElement.WithMarkers(ctx.ReceiveNode(tupleElement.Markers, ctx.ReceiveMarkers)!);
            tupleElement = tupleElement.WithType(ctx.ReceiveNode(tupleElement.Type, ctx.ReceiveTree)!);
            tupleElement = tupleElement.WithName(ctx.ReceiveNode(tupleElement.Name, ctx.ReceiveTree));
            return tupleElement;
        }

        public override J VisitNewClass(Cs.NewClass newClass, ReceiverContext ctx)
        {
            newClass = newClass.WithId(ctx.ReceiveValue(newClass.Id)!);
            newClass = newClass.WithPrefix(ctx.ReceiveNode(newClass.Prefix, ReceiveSpace)!);
            newClass = newClass.WithMarkers(ctx.ReceiveNode(newClass.Markers, ctx.ReceiveMarkers)!);
            newClass = newClass.WithNewClassCore(ctx.ReceiveNode(newClass.NewClassCore, ctx.ReceiveTree)!);
            newClass = newClass.WithInitializer(ctx.ReceiveNode(newClass.Initializer, ctx.ReceiveTree));
            return newClass;
        }

        public override J VisitInitializerExpression(Cs.InitializerExpression initializerExpression, ReceiverContext ctx)
        {
            initializerExpression = initializerExpression.WithId(ctx.ReceiveValue(initializerExpression.Id)!);
            initializerExpression = initializerExpression.WithPrefix(ctx.ReceiveNode(initializerExpression.Prefix, ReceiveSpace)!);
            initializerExpression = initializerExpression.WithMarkers(ctx.ReceiveNode(initializerExpression.Markers, ctx.ReceiveMarkers)!);
            initializerExpression = initializerExpression.Padding.WithExpressions(ctx.ReceiveNode(initializerExpression.Padding.Expressions, ReceiveContainer)!);
            return initializerExpression;
        }

        public override J VisitImplicitElementAccess(Cs.ImplicitElementAccess implicitElementAccess, ReceiverContext ctx)
        {
            implicitElementAccess = implicitElementAccess.WithId(ctx.ReceiveValue(implicitElementAccess.Id)!);
            implicitElementAccess = implicitElementAccess.WithPrefix(ctx.ReceiveNode(implicitElementAccess.Prefix, ReceiveSpace)!);
            implicitElementAccess = implicitElementAccess.WithMarkers(ctx.ReceiveNode(implicitElementAccess.Markers, ctx.ReceiveMarkers)!);
            implicitElementAccess = implicitElementAccess.Padding.WithArgumentList(ctx.ReceiveNode(implicitElementAccess.Padding.ArgumentList, ReceiveContainer)!);
            return implicitElementAccess;
        }

        public override J VisitYield(Cs.Yield yield, ReceiverContext ctx)
        {
            yield = yield.WithId(ctx.ReceiveValue(yield.Id)!);
            yield = yield.WithPrefix(ctx.ReceiveNode(yield.Prefix, ReceiveSpace)!);
            yield = yield.WithMarkers(ctx.ReceiveNode(yield.Markers, ctx.ReceiveMarkers)!);
            yield = yield.WithReturnOrBreakKeyword(ctx.ReceiveNode(yield.ReturnOrBreakKeyword, ctx.ReceiveTree)!);
            yield = yield.WithExpression(ctx.ReceiveNode(yield.Expression, ctx.ReceiveTree));
            return yield;
        }

        public override J VisitDefaultExpression(Cs.DefaultExpression defaultExpression, ReceiverContext ctx)
        {
            defaultExpression = defaultExpression.WithId(ctx.ReceiveValue(defaultExpression.Id)!);
            defaultExpression = defaultExpression.WithPrefix(ctx.ReceiveNode(defaultExpression.Prefix, ReceiveSpace)!);
            defaultExpression = defaultExpression.WithMarkers(ctx.ReceiveNode(defaultExpression.Markers, ctx.ReceiveMarkers)!);
            defaultExpression = defaultExpression.Padding.WithTypeOperator(ctx.ReceiveNode(defaultExpression.Padding.TypeOperator, ReceiveContainer));
            return defaultExpression;
        }

        public override J VisitIsPattern(Cs.IsPattern isPattern, ReceiverContext ctx)
        {
            isPattern = isPattern.WithId(ctx.ReceiveValue(isPattern.Id)!);
            isPattern = isPattern.WithPrefix(ctx.ReceiveNode(isPattern.Prefix, ReceiveSpace)!);
            isPattern = isPattern.WithMarkers(ctx.ReceiveNode(isPattern.Markers, ctx.ReceiveMarkers)!);
            isPattern = isPattern.WithExpression(ctx.ReceiveNode(isPattern.Expression, ctx.ReceiveTree)!);
            isPattern = isPattern.Padding.WithPattern(ctx.ReceiveNode(isPattern.Padding.Pattern, ReceiveLeftPadded)!);
            return isPattern;
        }

        public override J VisitUnaryPattern(Cs.UnaryPattern unaryPattern, ReceiverContext ctx)
        {
            unaryPattern = unaryPattern.WithId(ctx.ReceiveValue(unaryPattern.Id)!);
            unaryPattern = unaryPattern.WithPrefix(ctx.ReceiveNode(unaryPattern.Prefix, ReceiveSpace)!);
            unaryPattern = unaryPattern.WithMarkers(ctx.ReceiveNode(unaryPattern.Markers, ctx.ReceiveMarkers)!);
            unaryPattern = unaryPattern.WithOperator(ctx.ReceiveNode(unaryPattern.Operator, ctx.ReceiveTree)!);
            unaryPattern = unaryPattern.WithPattern(ctx.ReceiveNode(unaryPattern.Pattern, ctx.ReceiveTree)!);
            return unaryPattern;
        }

        public override J VisitTypePattern(Cs.TypePattern typePattern, ReceiverContext ctx)
        {
            typePattern = typePattern.WithId(ctx.ReceiveValue(typePattern.Id)!);
            typePattern = typePattern.WithPrefix(ctx.ReceiveNode(typePattern.Prefix, ReceiveSpace)!);
            typePattern = typePattern.WithMarkers(ctx.ReceiveNode(typePattern.Markers, ctx.ReceiveMarkers)!);
            typePattern = typePattern.WithTypeIdentifier(ctx.ReceiveNode(typePattern.TypeIdentifier, ctx.ReceiveTree)!);
            typePattern = typePattern.WithDesignation(ctx.ReceiveNode(typePattern.Designation, ctx.ReceiveTree));
            return typePattern;
        }

        public override J VisitBinaryPattern(Cs.BinaryPattern binaryPattern, ReceiverContext ctx)
        {
            binaryPattern = binaryPattern.WithId(ctx.ReceiveValue(binaryPattern.Id)!);
            binaryPattern = binaryPattern.WithPrefix(ctx.ReceiveNode(binaryPattern.Prefix, ReceiveSpace)!);
            binaryPattern = binaryPattern.WithMarkers(ctx.ReceiveNode(binaryPattern.Markers, ctx.ReceiveMarkers)!);
            binaryPattern = binaryPattern.WithLeft(ctx.ReceiveNode(binaryPattern.Left, ctx.ReceiveTree)!);
            binaryPattern = binaryPattern.Padding.WithOperator(ctx.ReceiveNode(binaryPattern.Padding.Operator, ReceiveLeftPadded)!);
            binaryPattern = binaryPattern.WithRight(ctx.ReceiveNode(binaryPattern.Right, ctx.ReceiveTree)!);
            return binaryPattern;
        }

        public override J VisitConstantPattern(Cs.ConstantPattern constantPattern, ReceiverContext ctx)
        {
            constantPattern = constantPattern.WithId(ctx.ReceiveValue(constantPattern.Id)!);
            constantPattern = constantPattern.WithPrefix(ctx.ReceiveNode(constantPattern.Prefix, ReceiveSpace)!);
            constantPattern = constantPattern.WithMarkers(ctx.ReceiveNode(constantPattern.Markers, ctx.ReceiveMarkers)!);
            constantPattern = constantPattern.WithValue(ctx.ReceiveNode(constantPattern.Value, ctx.ReceiveTree)!);
            return constantPattern;
        }

        public override J VisitDiscardPattern(Cs.DiscardPattern discardPattern, ReceiverContext ctx)
        {
            discardPattern = discardPattern.WithId(ctx.ReceiveValue(discardPattern.Id)!);
            discardPattern = discardPattern.WithPrefix(ctx.ReceiveNode(discardPattern.Prefix, ReceiveSpace)!);
            discardPattern = discardPattern.WithMarkers(ctx.ReceiveNode(discardPattern.Markers, ctx.ReceiveMarkers)!);
            discardPattern = discardPattern.WithType(ctx.ReceiveValue(discardPattern.Type)!);
            return discardPattern;
        }

        public override J VisitListPattern(Cs.ListPattern listPattern, ReceiverContext ctx)
        {
            listPattern = listPattern.WithId(ctx.ReceiveValue(listPattern.Id)!);
            listPattern = listPattern.WithPrefix(ctx.ReceiveNode(listPattern.Prefix, ReceiveSpace)!);
            listPattern = listPattern.WithMarkers(ctx.ReceiveNode(listPattern.Markers, ctx.ReceiveMarkers)!);
            listPattern = listPattern.Padding.WithPatterns(ctx.ReceiveNode(listPattern.Padding.Patterns, ReceiveContainer)!);
            listPattern = listPattern.WithDesignation(ctx.ReceiveNode(listPattern.Designation, ctx.ReceiveTree));
            return listPattern;
        }

        public override J VisitParenthesizedPattern(Cs.ParenthesizedPattern parenthesizedPattern, ReceiverContext ctx)
        {
            parenthesizedPattern = parenthesizedPattern.WithId(ctx.ReceiveValue(parenthesizedPattern.Id)!);
            parenthesizedPattern = parenthesizedPattern.WithPrefix(ctx.ReceiveNode(parenthesizedPattern.Prefix, ReceiveSpace)!);
            parenthesizedPattern = parenthesizedPattern.WithMarkers(ctx.ReceiveNode(parenthesizedPattern.Markers, ctx.ReceiveMarkers)!);
            parenthesizedPattern = parenthesizedPattern.Padding.WithPattern(ctx.ReceiveNode(parenthesizedPattern.Padding.Pattern, ReceiveContainer)!);
            return parenthesizedPattern;
        }

        public override J VisitRecursivePattern(Cs.RecursivePattern recursivePattern, ReceiverContext ctx)
        {
            recursivePattern = recursivePattern.WithId(ctx.ReceiveValue(recursivePattern.Id)!);
            recursivePattern = recursivePattern.WithPrefix(ctx.ReceiveNode(recursivePattern.Prefix, ReceiveSpace)!);
            recursivePattern = recursivePattern.WithMarkers(ctx.ReceiveNode(recursivePattern.Markers, ctx.ReceiveMarkers)!);
            recursivePattern = recursivePattern.WithTypeQualifier(ctx.ReceiveNode(recursivePattern.TypeQualifier, ctx.ReceiveTree));
            recursivePattern = recursivePattern.WithPositionalPattern(ctx.ReceiveNode(recursivePattern.PositionalPattern, ctx.ReceiveTree));
            recursivePattern = recursivePattern.WithPropertyPattern(ctx.ReceiveNode(recursivePattern.PropertyPattern, ctx.ReceiveTree));
            recursivePattern = recursivePattern.WithDesignation(ctx.ReceiveNode(recursivePattern.Designation, ctx.ReceiveTree));
            return recursivePattern;
        }

        public override J VisitVarPattern(Cs.VarPattern varPattern, ReceiverContext ctx)
        {
            varPattern = varPattern.WithId(ctx.ReceiveValue(varPattern.Id)!);
            varPattern = varPattern.WithPrefix(ctx.ReceiveNode(varPattern.Prefix, ReceiveSpace)!);
            varPattern = varPattern.WithMarkers(ctx.ReceiveNode(varPattern.Markers, ctx.ReceiveMarkers)!);
            varPattern = varPattern.WithDesignation(ctx.ReceiveNode(varPattern.Designation, ctx.ReceiveTree)!);
            return varPattern;
        }

        public override J VisitPositionalPatternClause(Cs.PositionalPatternClause positionalPatternClause, ReceiverContext ctx)
        {
            positionalPatternClause = positionalPatternClause.WithId(ctx.ReceiveValue(positionalPatternClause.Id)!);
            positionalPatternClause = positionalPatternClause.WithPrefix(ctx.ReceiveNode(positionalPatternClause.Prefix, ReceiveSpace)!);
            positionalPatternClause = positionalPatternClause.WithMarkers(ctx.ReceiveNode(positionalPatternClause.Markers, ctx.ReceiveMarkers)!);
            positionalPatternClause = positionalPatternClause.Padding.WithSubpatterns(ctx.ReceiveNode(positionalPatternClause.Padding.Subpatterns, ReceiveContainer)!);
            return positionalPatternClause;
        }

        public override J VisitRelationalPattern(Cs.RelationalPattern relationalPattern, ReceiverContext ctx)
        {
            relationalPattern = relationalPattern.WithId(ctx.ReceiveValue(relationalPattern.Id)!);
            relationalPattern = relationalPattern.WithPrefix(ctx.ReceiveNode(relationalPattern.Prefix, ReceiveSpace)!);
            relationalPattern = relationalPattern.WithMarkers(ctx.ReceiveNode(relationalPattern.Markers, ctx.ReceiveMarkers)!);
            relationalPattern = relationalPattern.Padding.WithOperator(ctx.ReceiveNode(relationalPattern.Padding.Operator, ReceiveLeftPadded)!);
            relationalPattern = relationalPattern.WithValue(ctx.ReceiveNode(relationalPattern.Value, ctx.ReceiveTree)!);
            return relationalPattern;
        }

        public override J VisitSlicePattern(Cs.SlicePattern slicePattern, ReceiverContext ctx)
        {
            slicePattern = slicePattern.WithId(ctx.ReceiveValue(slicePattern.Id)!);
            slicePattern = slicePattern.WithPrefix(ctx.ReceiveNode(slicePattern.Prefix, ReceiveSpace)!);
            slicePattern = slicePattern.WithMarkers(ctx.ReceiveNode(slicePattern.Markers, ctx.ReceiveMarkers)!);
            return slicePattern;
        }

        public override J VisitPropertyPatternClause(Cs.PropertyPatternClause propertyPatternClause, ReceiverContext ctx)
        {
            propertyPatternClause = propertyPatternClause.WithId(ctx.ReceiveValue(propertyPatternClause.Id)!);
            propertyPatternClause = propertyPatternClause.WithPrefix(ctx.ReceiveNode(propertyPatternClause.Prefix, ReceiveSpace)!);
            propertyPatternClause = propertyPatternClause.WithMarkers(ctx.ReceiveNode(propertyPatternClause.Markers, ctx.ReceiveMarkers)!);
            propertyPatternClause = propertyPatternClause.Padding.WithSubpatterns(ctx.ReceiveNode(propertyPatternClause.Padding.Subpatterns, ReceiveContainer)!);
            return propertyPatternClause;
        }

        public override J VisitSubpattern(Cs.Subpattern subpattern, ReceiverContext ctx)
        {
            subpattern = subpattern.WithId(ctx.ReceiveValue(subpattern.Id)!);
            subpattern = subpattern.WithPrefix(ctx.ReceiveNode(subpattern.Prefix, ReceiveSpace)!);
            subpattern = subpattern.WithMarkers(ctx.ReceiveNode(subpattern.Markers, ctx.ReceiveMarkers)!);
            subpattern = subpattern.WithName(ctx.ReceiveNode(subpattern.Name, ctx.ReceiveTree));
            subpattern = subpattern.Padding.WithPattern(ctx.ReceiveNode(subpattern.Padding.Pattern, ReceiveLeftPadded)!);
            return subpattern;
        }

        public override J VisitSwitchExpression(Cs.SwitchExpression switchExpression, ReceiverContext ctx)
        {
            switchExpression = switchExpression.WithId(ctx.ReceiveValue(switchExpression.Id)!);
            switchExpression = switchExpression.WithPrefix(ctx.ReceiveNode(switchExpression.Prefix, ReceiveSpace)!);
            switchExpression = switchExpression.WithMarkers(ctx.ReceiveNode(switchExpression.Markers, ctx.ReceiveMarkers)!);
            switchExpression = switchExpression.Padding.WithExpression(ctx.ReceiveNode(switchExpression.Padding.Expression, ReceiveRightPadded)!);
            switchExpression = switchExpression.Padding.WithArms(ctx.ReceiveNode(switchExpression.Padding.Arms, ReceiveContainer)!);
            return switchExpression;
        }

        public override J VisitSwitchExpressionArm(Cs.SwitchExpressionArm switchExpressionArm, ReceiverContext ctx)
        {
            switchExpressionArm = switchExpressionArm.WithId(ctx.ReceiveValue(switchExpressionArm.Id)!);
            switchExpressionArm = switchExpressionArm.WithPrefix(ctx.ReceiveNode(switchExpressionArm.Prefix, ReceiveSpace)!);
            switchExpressionArm = switchExpressionArm.WithMarkers(ctx.ReceiveNode(switchExpressionArm.Markers, ctx.ReceiveMarkers)!);
            switchExpressionArm = switchExpressionArm.WithPattern(ctx.ReceiveNode(switchExpressionArm.Pattern, ctx.ReceiveTree)!);
            switchExpressionArm = switchExpressionArm.Padding.WithWhenExpression(ctx.ReceiveNode(switchExpressionArm.Padding.WhenExpression, ReceiveLeftPadded));
            switchExpressionArm = switchExpressionArm.Padding.WithExpression(ctx.ReceiveNode(switchExpressionArm.Padding.Expression, ReceiveLeftPadded)!);
            return switchExpressionArm;
        }

        public override J VisitSwitchSection(Cs.SwitchSection switchSection, ReceiverContext ctx)
        {
            switchSection = switchSection.WithId(ctx.ReceiveValue(switchSection.Id)!);
            switchSection = switchSection.WithPrefix(ctx.ReceiveNode(switchSection.Prefix, ReceiveSpace)!);
            switchSection = switchSection.WithMarkers(ctx.ReceiveNode(switchSection.Markers, ctx.ReceiveMarkers)!);
            switchSection = switchSection.WithLabels(ctx.ReceiveNodes(switchSection.Labels, ctx.ReceiveTree)!);
            switchSection = switchSection.Padding.WithStatements(ctx.ReceiveNodes(switchSection.Padding.Statements, ReceiveRightPadded)!);
            return switchSection;
        }

        public override J VisitDefaultSwitchLabel(Cs.DefaultSwitchLabel defaultSwitchLabel, ReceiverContext ctx)
        {
            defaultSwitchLabel = defaultSwitchLabel.WithId(ctx.ReceiveValue(defaultSwitchLabel.Id)!);
            defaultSwitchLabel = defaultSwitchLabel.WithPrefix(ctx.ReceiveNode(defaultSwitchLabel.Prefix, ReceiveSpace)!);
            defaultSwitchLabel = defaultSwitchLabel.WithMarkers(ctx.ReceiveNode(defaultSwitchLabel.Markers, ctx.ReceiveMarkers)!);
            defaultSwitchLabel = defaultSwitchLabel.WithColonToken(ctx.ReceiveNode(defaultSwitchLabel.ColonToken, ReceiveSpace)!);
            return defaultSwitchLabel;
        }

        public override J VisitCasePatternSwitchLabel(Cs.CasePatternSwitchLabel casePatternSwitchLabel, ReceiverContext ctx)
        {
            casePatternSwitchLabel = casePatternSwitchLabel.WithId(ctx.ReceiveValue(casePatternSwitchLabel.Id)!);
            casePatternSwitchLabel = casePatternSwitchLabel.WithPrefix(ctx.ReceiveNode(casePatternSwitchLabel.Prefix, ReceiveSpace)!);
            casePatternSwitchLabel = casePatternSwitchLabel.WithMarkers(ctx.ReceiveNode(casePatternSwitchLabel.Markers, ctx.ReceiveMarkers)!);
            casePatternSwitchLabel = casePatternSwitchLabel.WithPattern(ctx.ReceiveNode(casePatternSwitchLabel.Pattern, ctx.ReceiveTree)!);
            casePatternSwitchLabel = casePatternSwitchLabel.Padding.WithWhenClause(ctx.ReceiveNode(casePatternSwitchLabel.Padding.WhenClause, ReceiveLeftPadded));
            casePatternSwitchLabel = casePatternSwitchLabel.WithColonToken(ctx.ReceiveNode(casePatternSwitchLabel.ColonToken, ReceiveSpace)!);
            return casePatternSwitchLabel;
        }

        public override J VisitSwitchStatement(Cs.SwitchStatement switchStatement, ReceiverContext ctx)
        {
            switchStatement = switchStatement.WithId(ctx.ReceiveValue(switchStatement.Id)!);
            switchStatement = switchStatement.WithPrefix(ctx.ReceiveNode(switchStatement.Prefix, ReceiveSpace)!);
            switchStatement = switchStatement.WithMarkers(ctx.ReceiveNode(switchStatement.Markers, ctx.ReceiveMarkers)!);
            switchStatement = switchStatement.Padding.WithExpression(ctx.ReceiveNode(switchStatement.Padding.Expression, ReceiveContainer)!);
            switchStatement = switchStatement.Padding.WithSections(ctx.ReceiveNode(switchStatement.Padding.Sections, ReceiveContainer)!);
            return switchStatement;
        }

        public override J VisitLockStatement(Cs.LockStatement lockStatement, ReceiverContext ctx)
        {
            lockStatement = lockStatement.WithId(ctx.ReceiveValue(lockStatement.Id)!);
            lockStatement = lockStatement.WithPrefix(ctx.ReceiveNode(lockStatement.Prefix, ReceiveSpace)!);
            lockStatement = lockStatement.WithMarkers(ctx.ReceiveNode(lockStatement.Markers, ctx.ReceiveMarkers)!);
            lockStatement = lockStatement.WithExpression(ctx.ReceiveNode(lockStatement.Expression, ReceiveControlParentheses)!);
            lockStatement = lockStatement.Padding.WithStatement(ctx.ReceiveNode(lockStatement.Padding.Statement, ReceiveRightPadded)!);
            return lockStatement;
        }

        public override J VisitFixedStatement(Cs.FixedStatement fixedStatement, ReceiverContext ctx)
        {
            fixedStatement = fixedStatement.WithId(ctx.ReceiveValue(fixedStatement.Id)!);
            fixedStatement = fixedStatement.WithPrefix(ctx.ReceiveNode(fixedStatement.Prefix, ReceiveSpace)!);
            fixedStatement = fixedStatement.WithMarkers(ctx.ReceiveNode(fixedStatement.Markers, ctx.ReceiveMarkers)!);
            fixedStatement = fixedStatement.WithDeclarations(ctx.ReceiveNode(fixedStatement.Declarations, ReceiveControlParentheses)!);
            fixedStatement = fixedStatement.WithBlock(ctx.ReceiveNode(fixedStatement.Block, ctx.ReceiveTree)!);
            return fixedStatement;
        }

        public override J VisitCheckedExpression(Cs.CheckedExpression checkedExpression, ReceiverContext ctx)
        {
            checkedExpression = checkedExpression.WithId(ctx.ReceiveValue(checkedExpression.Id)!);
            checkedExpression = checkedExpression.WithPrefix(ctx.ReceiveNode(checkedExpression.Prefix, ReceiveSpace)!);
            checkedExpression = checkedExpression.WithMarkers(ctx.ReceiveNode(checkedExpression.Markers, ctx.ReceiveMarkers)!);
            checkedExpression = checkedExpression.WithCheckedOrUncheckedKeyword(ctx.ReceiveNode(checkedExpression.CheckedOrUncheckedKeyword, ctx.ReceiveTree)!);
            checkedExpression = checkedExpression.WithExpression(ctx.ReceiveNode(checkedExpression.Expression, ReceiveControlParentheses)!);
            return checkedExpression;
        }

        public override J VisitCheckedStatement(Cs.CheckedStatement checkedStatement, ReceiverContext ctx)
        {
            checkedStatement = checkedStatement.WithId(ctx.ReceiveValue(checkedStatement.Id)!);
            checkedStatement = checkedStatement.WithPrefix(ctx.ReceiveNode(checkedStatement.Prefix, ReceiveSpace)!);
            checkedStatement = checkedStatement.WithMarkers(ctx.ReceiveNode(checkedStatement.Markers, ctx.ReceiveMarkers)!);
            checkedStatement = checkedStatement.WithKeyword(ctx.ReceiveNode(checkedStatement.Keyword, ctx.ReceiveTree)!);
            checkedStatement = checkedStatement.WithBlock(ctx.ReceiveNode(checkedStatement.Block, ctx.ReceiveTree)!);
            return checkedStatement;
        }

        public override J VisitUnsafeStatement(Cs.UnsafeStatement unsafeStatement, ReceiverContext ctx)
        {
            unsafeStatement = unsafeStatement.WithId(ctx.ReceiveValue(unsafeStatement.Id)!);
            unsafeStatement = unsafeStatement.WithPrefix(ctx.ReceiveNode(unsafeStatement.Prefix, ReceiveSpace)!);
            unsafeStatement = unsafeStatement.WithMarkers(ctx.ReceiveNode(unsafeStatement.Markers, ctx.ReceiveMarkers)!);
            unsafeStatement = unsafeStatement.WithBlock(ctx.ReceiveNode(unsafeStatement.Block, ctx.ReceiveTree)!);
            return unsafeStatement;
        }

        public override J VisitRangeExpression(Cs.RangeExpression rangeExpression, ReceiverContext ctx)
        {
            rangeExpression = rangeExpression.WithId(ctx.ReceiveValue(rangeExpression.Id)!);
            rangeExpression = rangeExpression.WithPrefix(ctx.ReceiveNode(rangeExpression.Prefix, ReceiveSpace)!);
            rangeExpression = rangeExpression.WithMarkers(ctx.ReceiveNode(rangeExpression.Markers, ctx.ReceiveMarkers)!);
            rangeExpression = rangeExpression.Padding.WithStart(ctx.ReceiveNode(rangeExpression.Padding.Start, ReceiveRightPadded));
            rangeExpression = rangeExpression.WithEnd(ctx.ReceiveNode(rangeExpression.End, ctx.ReceiveTree));
            return rangeExpression;
        }

        public override J VisitQueryExpression(Cs.QueryExpression queryExpression, ReceiverContext ctx)
        {
            queryExpression = queryExpression.WithId(ctx.ReceiveValue(queryExpression.Id)!);
            queryExpression = queryExpression.WithPrefix(ctx.ReceiveNode(queryExpression.Prefix, ReceiveSpace)!);
            queryExpression = queryExpression.WithMarkers(ctx.ReceiveNode(queryExpression.Markers, ctx.ReceiveMarkers)!);
            queryExpression = queryExpression.WithFromClause(ctx.ReceiveNode(queryExpression.FromClause, ctx.ReceiveTree)!);
            queryExpression = queryExpression.WithBody(ctx.ReceiveNode(queryExpression.Body, ctx.ReceiveTree)!);
            return queryExpression;
        }

        public override J VisitQueryBody(Cs.QueryBody queryBody, ReceiverContext ctx)
        {
            queryBody = queryBody.WithId(ctx.ReceiveValue(queryBody.Id)!);
            queryBody = queryBody.WithPrefix(ctx.ReceiveNode(queryBody.Prefix, ReceiveSpace)!);
            queryBody = queryBody.WithMarkers(ctx.ReceiveNode(queryBody.Markers, ctx.ReceiveMarkers)!);
            queryBody = queryBody.WithClauses(ctx.ReceiveNodes(queryBody.Clauses, ctx.ReceiveTree)!);
            queryBody = queryBody.WithSelectOrGroup(ctx.ReceiveNode(queryBody.SelectOrGroup, ctx.ReceiveTree));
            queryBody = queryBody.WithContinuation(ctx.ReceiveNode(queryBody.Continuation, ctx.ReceiveTree));
            return queryBody;
        }

        public override J VisitFromClause(Cs.FromClause fromClause, ReceiverContext ctx)
        {
            fromClause = fromClause.WithId(ctx.ReceiveValue(fromClause.Id)!);
            fromClause = fromClause.WithPrefix(ctx.ReceiveNode(fromClause.Prefix, ReceiveSpace)!);
            fromClause = fromClause.WithMarkers(ctx.ReceiveNode(fromClause.Markers, ctx.ReceiveMarkers)!);
            fromClause = fromClause.WithTypeIdentifier(ctx.ReceiveNode(fromClause.TypeIdentifier, ctx.ReceiveTree));
            fromClause = fromClause.Padding.WithIdentifier(ctx.ReceiveNode(fromClause.Padding.Identifier, ReceiveRightPadded)!);
            fromClause = fromClause.WithExpression(ctx.ReceiveNode(fromClause.Expression, ctx.ReceiveTree)!);
            return fromClause;
        }

        public override J VisitLetClause(Cs.LetClause letClause, ReceiverContext ctx)
        {
            letClause = letClause.WithId(ctx.ReceiveValue(letClause.Id)!);
            letClause = letClause.WithPrefix(ctx.ReceiveNode(letClause.Prefix, ReceiveSpace)!);
            letClause = letClause.WithMarkers(ctx.ReceiveNode(letClause.Markers, ctx.ReceiveMarkers)!);
            letClause = letClause.Padding.WithIdentifier(ctx.ReceiveNode(letClause.Padding.Identifier, ReceiveRightPadded)!);
            letClause = letClause.WithExpression(ctx.ReceiveNode(letClause.Expression, ctx.ReceiveTree)!);
            return letClause;
        }

        public override J VisitJoinClause(Cs.JoinClause joinClause, ReceiverContext ctx)
        {
            joinClause = joinClause.WithId(ctx.ReceiveValue(joinClause.Id)!);
            joinClause = joinClause.WithPrefix(ctx.ReceiveNode(joinClause.Prefix, ReceiveSpace)!);
            joinClause = joinClause.WithMarkers(ctx.ReceiveNode(joinClause.Markers, ctx.ReceiveMarkers)!);
            joinClause = joinClause.Padding.WithIdentifier(ctx.ReceiveNode(joinClause.Padding.Identifier, ReceiveRightPadded)!);
            joinClause = joinClause.Padding.WithInExpression(ctx.ReceiveNode(joinClause.Padding.InExpression, ReceiveRightPadded)!);
            joinClause = joinClause.Padding.WithLeftExpression(ctx.ReceiveNode(joinClause.Padding.LeftExpression, ReceiveRightPadded)!);
            joinClause = joinClause.WithRightExpression(ctx.ReceiveNode(joinClause.RightExpression, ctx.ReceiveTree)!);
            joinClause = joinClause.Padding.WithInto(ctx.ReceiveNode(joinClause.Padding.Into, ReceiveLeftPadded));
            return joinClause;
        }

        public override J VisitJoinIntoClause(Cs.JoinIntoClause joinIntoClause, ReceiverContext ctx)
        {
            joinIntoClause = joinIntoClause.WithId(ctx.ReceiveValue(joinIntoClause.Id)!);
            joinIntoClause = joinIntoClause.WithPrefix(ctx.ReceiveNode(joinIntoClause.Prefix, ReceiveSpace)!);
            joinIntoClause = joinIntoClause.WithMarkers(ctx.ReceiveNode(joinIntoClause.Markers, ctx.ReceiveMarkers)!);
            joinIntoClause = joinIntoClause.WithIdentifier(ctx.ReceiveNode(joinIntoClause.Identifier, ctx.ReceiveTree)!);
            return joinIntoClause;
        }

        public override J VisitWhereClause(Cs.WhereClause whereClause, ReceiverContext ctx)
        {
            whereClause = whereClause.WithId(ctx.ReceiveValue(whereClause.Id)!);
            whereClause = whereClause.WithPrefix(ctx.ReceiveNode(whereClause.Prefix, ReceiveSpace)!);
            whereClause = whereClause.WithMarkers(ctx.ReceiveNode(whereClause.Markers, ctx.ReceiveMarkers)!);
            whereClause = whereClause.WithCondition(ctx.ReceiveNode(whereClause.Condition, ctx.ReceiveTree)!);
            return whereClause;
        }

        public override J VisitOrderByClause(Cs.OrderByClause orderByClause, ReceiverContext ctx)
        {
            orderByClause = orderByClause.WithId(ctx.ReceiveValue(orderByClause.Id)!);
            orderByClause = orderByClause.WithPrefix(ctx.ReceiveNode(orderByClause.Prefix, ReceiveSpace)!);
            orderByClause = orderByClause.WithMarkers(ctx.ReceiveNode(orderByClause.Markers, ctx.ReceiveMarkers)!);
            orderByClause = orderByClause.Padding.WithOrderings(ctx.ReceiveNodes(orderByClause.Padding.Orderings, ReceiveRightPadded)!);
            return orderByClause;
        }

        public override J VisitQueryContinuation(Cs.QueryContinuation queryContinuation, ReceiverContext ctx)
        {
            queryContinuation = queryContinuation.WithId(ctx.ReceiveValue(queryContinuation.Id)!);
            queryContinuation = queryContinuation.WithPrefix(ctx.ReceiveNode(queryContinuation.Prefix, ReceiveSpace)!);
            queryContinuation = queryContinuation.WithMarkers(ctx.ReceiveNode(queryContinuation.Markers, ctx.ReceiveMarkers)!);
            queryContinuation = queryContinuation.WithIdentifier(ctx.ReceiveNode(queryContinuation.Identifier, ctx.ReceiveTree)!);
            queryContinuation = queryContinuation.WithBody(ctx.ReceiveNode(queryContinuation.Body, ctx.ReceiveTree)!);
            return queryContinuation;
        }

        public override J VisitOrdering(Cs.Ordering ordering, ReceiverContext ctx)
        {
            ordering = ordering.WithId(ctx.ReceiveValue(ordering.Id)!);
            ordering = ordering.WithPrefix(ctx.ReceiveNode(ordering.Prefix, ReceiveSpace)!);
            ordering = ordering.WithMarkers(ctx.ReceiveNode(ordering.Markers, ctx.ReceiveMarkers)!);
            ordering = ordering.Padding.WithExpression(ctx.ReceiveNode(ordering.Padding.Expression, ReceiveRightPadded)!);
            ordering = ordering.WithDirection(ctx.ReceiveValue(ordering.Direction));
            return ordering;
        }

        public override J VisitSelectClause(Cs.SelectClause selectClause, ReceiverContext ctx)
        {
            selectClause = selectClause.WithId(ctx.ReceiveValue(selectClause.Id)!);
            selectClause = selectClause.WithPrefix(ctx.ReceiveNode(selectClause.Prefix, ReceiveSpace)!);
            selectClause = selectClause.WithMarkers(ctx.ReceiveNode(selectClause.Markers, ctx.ReceiveMarkers)!);
            selectClause = selectClause.WithExpression(ctx.ReceiveNode(selectClause.Expression, ctx.ReceiveTree)!);
            return selectClause;
        }

        public override J VisitGroupClause(Cs.GroupClause groupClause, ReceiverContext ctx)
        {
            groupClause = groupClause.WithId(ctx.ReceiveValue(groupClause.Id)!);
            groupClause = groupClause.WithPrefix(ctx.ReceiveNode(groupClause.Prefix, ReceiveSpace)!);
            groupClause = groupClause.WithMarkers(ctx.ReceiveNode(groupClause.Markers, ctx.ReceiveMarkers)!);
            groupClause = groupClause.Padding.WithGroupExpression(ctx.ReceiveNode(groupClause.Padding.GroupExpression, ReceiveRightPadded)!);
            groupClause = groupClause.WithKey(ctx.ReceiveNode(groupClause.Key, ctx.ReceiveTree)!);
            return groupClause;
        }

        public override J VisitIndexerDeclaration(Cs.IndexerDeclaration indexerDeclaration, ReceiverContext ctx)
        {
            indexerDeclaration = indexerDeclaration.WithId(ctx.ReceiveValue(indexerDeclaration.Id)!);
            indexerDeclaration = indexerDeclaration.WithPrefix(ctx.ReceiveNode(indexerDeclaration.Prefix, ReceiveSpace)!);
            indexerDeclaration = indexerDeclaration.WithMarkers(ctx.ReceiveNode(indexerDeclaration.Markers, ctx.ReceiveMarkers)!);
            indexerDeclaration = indexerDeclaration.WithModifiers(ctx.ReceiveNodes(indexerDeclaration.Modifiers, ctx.ReceiveTree)!);
            indexerDeclaration = indexerDeclaration.WithTypeExpression(ctx.ReceiveNode(indexerDeclaration.TypeExpression, ctx.ReceiveTree)!);
            indexerDeclaration = indexerDeclaration.WithIndexer(ctx.ReceiveNode(indexerDeclaration.Indexer, ctx.ReceiveTree)!);
            indexerDeclaration = indexerDeclaration.Padding.WithParameters(ctx.ReceiveNode(indexerDeclaration.Padding.Parameters, ReceiveContainer)!);
            indexerDeclaration = indexerDeclaration.Padding.WithExpressionBody(ctx.ReceiveNode(indexerDeclaration.Padding.ExpressionBody, ReceiveLeftPadded));
            indexerDeclaration = indexerDeclaration.WithAccessors(ctx.ReceiveNode(indexerDeclaration.Accessors, ctx.ReceiveTree));
            return indexerDeclaration;
        }

        public override J VisitDelegateDeclaration(Cs.DelegateDeclaration delegateDeclaration, ReceiverContext ctx)
        {
            delegateDeclaration = delegateDeclaration.WithId(ctx.ReceiveValue(delegateDeclaration.Id)!);
            delegateDeclaration = delegateDeclaration.WithPrefix(ctx.ReceiveNode(delegateDeclaration.Prefix, ReceiveSpace)!);
            delegateDeclaration = delegateDeclaration.WithMarkers(ctx.ReceiveNode(delegateDeclaration.Markers, ctx.ReceiveMarkers)!);
            delegateDeclaration = delegateDeclaration.WithAttributes(ctx.ReceiveNodes(delegateDeclaration.Attributes, ctx.ReceiveTree)!);
            delegateDeclaration = delegateDeclaration.WithModifiers(ctx.ReceiveNodes(delegateDeclaration.Modifiers, ctx.ReceiveTree)!);
            delegateDeclaration = delegateDeclaration.Padding.WithReturnType(ctx.ReceiveNode(delegateDeclaration.Padding.ReturnType, ReceiveLeftPadded)!);
            delegateDeclaration = delegateDeclaration.WithIdentifier(ctx.ReceiveNode(delegateDeclaration.Identifier, ctx.ReceiveTree)!);
            delegateDeclaration = delegateDeclaration.Padding.WithTypeParameters(ctx.ReceiveNode(delegateDeclaration.Padding.TypeParameters, ReceiveContainer));
            delegateDeclaration = delegateDeclaration.Padding.WithParameters(ctx.ReceiveNode(delegateDeclaration.Padding.Parameters, ReceiveContainer)!);
            delegateDeclaration = delegateDeclaration.Padding.WithTypeParameterConstraintClauses(ctx.ReceiveNode(delegateDeclaration.Padding.TypeParameterConstraintClauses, ReceiveContainer));
            return delegateDeclaration;
        }

        public override J VisitConversionOperatorDeclaration(Cs.ConversionOperatorDeclaration conversionOperatorDeclaration, ReceiverContext ctx)
        {
            conversionOperatorDeclaration = conversionOperatorDeclaration.WithId(ctx.ReceiveValue(conversionOperatorDeclaration.Id)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.WithPrefix(ctx.ReceiveNode(conversionOperatorDeclaration.Prefix, ReceiveSpace)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.WithMarkers(ctx.ReceiveNode(conversionOperatorDeclaration.Markers, ctx.ReceiveMarkers)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.WithModifiers(ctx.ReceiveNodes(conversionOperatorDeclaration.Modifiers, ctx.ReceiveTree)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.Padding.WithKind(ctx.ReceiveNode(conversionOperatorDeclaration.Padding.Kind, ReceiveLeftPadded)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.Padding.WithReturnType(ctx.ReceiveNode(conversionOperatorDeclaration.Padding.ReturnType, ReceiveLeftPadded)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.Padding.WithParameters(ctx.ReceiveNode(conversionOperatorDeclaration.Padding.Parameters, ReceiveContainer)!);
            conversionOperatorDeclaration = conversionOperatorDeclaration.Padding.WithExpressionBody(ctx.ReceiveNode(conversionOperatorDeclaration.Padding.ExpressionBody, ReceiveLeftPadded));
            conversionOperatorDeclaration = conversionOperatorDeclaration.WithBody(ctx.ReceiveNode(conversionOperatorDeclaration.Body, ctx.ReceiveTree));
            return conversionOperatorDeclaration;
        }

        public override J VisitTypeParameter(Cs.TypeParameter typeParameter, ReceiverContext ctx)
        {
            typeParameter = typeParameter.WithId(ctx.ReceiveValue(typeParameter.Id)!);
            typeParameter = typeParameter.WithPrefix(ctx.ReceiveNode(typeParameter.Prefix, ReceiveSpace)!);
            typeParameter = typeParameter.WithMarkers(ctx.ReceiveNode(typeParameter.Markers, ctx.ReceiveMarkers)!);
            typeParameter = typeParameter.WithAttributeLists(ctx.ReceiveNodes(typeParameter.AttributeLists, ctx.ReceiveTree)!);
            typeParameter = typeParameter.Padding.WithVariance(ctx.ReceiveNode(typeParameter.Padding.Variance, ReceiveLeftPadded));
            typeParameter = typeParameter.WithName(ctx.ReceiveNode(typeParameter.Name, ctx.ReceiveTree)!);
            return typeParameter;
        }

        public override J VisitEnumDeclaration(Cs.EnumDeclaration enumDeclaration, ReceiverContext ctx)
        {
            enumDeclaration = enumDeclaration.WithId(ctx.ReceiveValue(enumDeclaration.Id)!);
            enumDeclaration = enumDeclaration.WithPrefix(ctx.ReceiveNode(enumDeclaration.Prefix, ReceiveSpace)!);
            enumDeclaration = enumDeclaration.WithMarkers(ctx.ReceiveNode(enumDeclaration.Markers, ctx.ReceiveMarkers)!);
            enumDeclaration = enumDeclaration.WithAttributeLists(ctx.ReceiveNodes(enumDeclaration.AttributeLists, ctx.ReceiveTree));
            enumDeclaration = enumDeclaration.WithModifiers(ctx.ReceiveNodes(enumDeclaration.Modifiers, ctx.ReceiveTree)!);
            enumDeclaration = enumDeclaration.Padding.WithName(ctx.ReceiveNode(enumDeclaration.Padding.Name, ReceiveLeftPadded)!);
            enumDeclaration = enumDeclaration.Padding.WithBaseType(ctx.ReceiveNode(enumDeclaration.Padding.BaseType, ReceiveLeftPadded));
            enumDeclaration = enumDeclaration.Padding.WithMembers(ctx.ReceiveNode(enumDeclaration.Padding.Members, ReceiveContainer));
            return enumDeclaration;
        }

        public override J VisitEnumMemberDeclaration(Cs.EnumMemberDeclaration enumMemberDeclaration, ReceiverContext ctx)
        {
            enumMemberDeclaration = enumMemberDeclaration.WithId(ctx.ReceiveValue(enumMemberDeclaration.Id)!);
            enumMemberDeclaration = enumMemberDeclaration.WithPrefix(ctx.ReceiveNode(enumMemberDeclaration.Prefix, ReceiveSpace)!);
            enumMemberDeclaration = enumMemberDeclaration.WithMarkers(ctx.ReceiveNode(enumMemberDeclaration.Markers, ctx.ReceiveMarkers)!);
            enumMemberDeclaration = enumMemberDeclaration.WithAttributeLists(ctx.ReceiveNodes(enumMemberDeclaration.AttributeLists, ctx.ReceiveTree)!);
            enumMemberDeclaration = enumMemberDeclaration.WithName(ctx.ReceiveNode(enumMemberDeclaration.Name, ctx.ReceiveTree)!);
            enumMemberDeclaration = enumMemberDeclaration.Padding.WithInitializer(ctx.ReceiveNode(enumMemberDeclaration.Padding.Initializer, ReceiveLeftPadded));
            return enumMemberDeclaration;
        }

        public override J VisitAliasQualifiedName(Cs.AliasQualifiedName aliasQualifiedName, ReceiverContext ctx)
        {
            aliasQualifiedName = aliasQualifiedName.WithId(ctx.ReceiveValue(aliasQualifiedName.Id)!);
            aliasQualifiedName = aliasQualifiedName.WithPrefix(ctx.ReceiveNode(aliasQualifiedName.Prefix, ReceiveSpace)!);
            aliasQualifiedName = aliasQualifiedName.WithMarkers(ctx.ReceiveNode(aliasQualifiedName.Markers, ctx.ReceiveMarkers)!);
            aliasQualifiedName = aliasQualifiedName.Padding.WithAlias(ctx.ReceiveNode(aliasQualifiedName.Padding.Alias, ReceiveRightPadded)!);
            aliasQualifiedName = aliasQualifiedName.WithName(ctx.ReceiveNode(aliasQualifiedName.Name, ctx.ReceiveTree)!);
            return aliasQualifiedName;
        }

        public override J VisitArrayType(Cs.ArrayType arrayType, ReceiverContext ctx)
        {
            arrayType = arrayType.WithId(ctx.ReceiveValue(arrayType.Id)!);
            arrayType = arrayType.WithPrefix(ctx.ReceiveNode(arrayType.Prefix, ReceiveSpace)!);
            arrayType = arrayType.WithMarkers(ctx.ReceiveNode(arrayType.Markers, ctx.ReceiveMarkers)!);
            arrayType = arrayType.WithTypeExpression(ctx.ReceiveNode(arrayType.TypeExpression, ctx.ReceiveTree));
            arrayType = arrayType.WithDimensions(ctx.ReceiveNodes(arrayType.Dimensions, ctx.ReceiveTree)!);
            arrayType = arrayType.WithType(ctx.ReceiveValue(arrayType.Type));
            return arrayType;
        }

        public override J VisitTry(Cs.Try @try, ReceiverContext ctx)
        {
            @try = @try.WithId(ctx.ReceiveValue(@try.Id)!);
            @try = @try.WithPrefix(ctx.ReceiveNode(@try.Prefix, ReceiveSpace)!);
            @try = @try.WithMarkers(ctx.ReceiveNode(@try.Markers, ctx.ReceiveMarkers)!);
            @try = @try.WithBody(ctx.ReceiveNode(@try.Body, ctx.ReceiveTree)!);
            @try = @try.WithCatches(ctx.ReceiveNodes(@try.Catches, ctx.ReceiveTree)!);
            @try = @try.Padding.WithFinally(ctx.ReceiveNode(@try.Padding.Finally, ReceiveLeftPadded));
            return @try;
        }

        public override J VisitTryCatch(Cs.Try.Catch @catch, ReceiverContext ctx)
        {
            @catch = @catch.WithId(ctx.ReceiveValue(@catch.Id)!);
            @catch = @catch.WithPrefix(ctx.ReceiveNode(@catch.Prefix, ReceiveSpace)!);
            @catch = @catch.WithMarkers(ctx.ReceiveNode(@catch.Markers, ctx.ReceiveMarkers)!);
            @catch = @catch.WithParameter(ctx.ReceiveNode(@catch.Parameter, ReceiveControlParentheses)!);
            @catch = @catch.Padding.WithFilterExpression(ctx.ReceiveNode(@catch.Padding.FilterExpression, ReceiveLeftPadded));
            @catch = @catch.WithBody(ctx.ReceiveNode(@catch.Body, ctx.ReceiveTree)!);
            return @catch;
        }

        public override J VisitArrowExpressionClause(Cs.ArrowExpressionClause arrowExpressionClause, ReceiverContext ctx)
        {
            arrowExpressionClause = arrowExpressionClause.WithId(ctx.ReceiveValue(arrowExpressionClause.Id)!);
            arrowExpressionClause = arrowExpressionClause.WithPrefix(ctx.ReceiveNode(arrowExpressionClause.Prefix, ReceiveSpace)!);
            arrowExpressionClause = arrowExpressionClause.WithMarkers(ctx.ReceiveNode(arrowExpressionClause.Markers, ctx.ReceiveMarkers)!);
            arrowExpressionClause = arrowExpressionClause.Padding.WithExpression(ctx.ReceiveNode(arrowExpressionClause.Padding.Expression, ReceiveRightPadded)!);
            return arrowExpressionClause;
        }

        public override J VisitAccessorDeclaration(Cs.AccessorDeclaration accessorDeclaration, ReceiverContext ctx)
        {
            accessorDeclaration = accessorDeclaration.WithId(ctx.ReceiveValue(accessorDeclaration.Id)!);
            accessorDeclaration = accessorDeclaration.WithPrefix(ctx.ReceiveNode(accessorDeclaration.Prefix, ReceiveSpace)!);
            accessorDeclaration = accessorDeclaration.WithMarkers(ctx.ReceiveNode(accessorDeclaration.Markers, ctx.ReceiveMarkers)!);
            accessorDeclaration = accessorDeclaration.WithAttributes(ctx.ReceiveNodes(accessorDeclaration.Attributes, ctx.ReceiveTree)!);
            accessorDeclaration = accessorDeclaration.WithModifiers(ctx.ReceiveNodes(accessorDeclaration.Modifiers, ctx.ReceiveTree)!);
            accessorDeclaration = accessorDeclaration.Padding.WithKind(ctx.ReceiveNode(accessorDeclaration.Padding.Kind, ReceiveLeftPadded)!);
            accessorDeclaration = accessorDeclaration.WithExpressionBody(ctx.ReceiveNode(accessorDeclaration.ExpressionBody, ctx.ReceiveTree));
            accessorDeclaration = accessorDeclaration.WithBody(ctx.ReceiveNode(accessorDeclaration.Body, ctx.ReceiveTree));
            return accessorDeclaration;
        }

        public override J VisitPointerFieldAccess(Cs.PointerFieldAccess pointerFieldAccess, ReceiverContext ctx)
        {
            pointerFieldAccess = pointerFieldAccess.WithId(ctx.ReceiveValue(pointerFieldAccess.Id)!);
            pointerFieldAccess = pointerFieldAccess.WithPrefix(ctx.ReceiveNode(pointerFieldAccess.Prefix, ReceiveSpace)!);
            pointerFieldAccess = pointerFieldAccess.WithMarkers(ctx.ReceiveNode(pointerFieldAccess.Markers, ctx.ReceiveMarkers)!);
            pointerFieldAccess = pointerFieldAccess.WithTarget(ctx.ReceiveNode(pointerFieldAccess.Target, ctx.ReceiveTree)!);
            pointerFieldAccess = pointerFieldAccess.Padding.WithName(ctx.ReceiveNode(pointerFieldAccess.Padding.Name, ReceiveLeftPadded)!);
            pointerFieldAccess = pointerFieldAccess.WithType(ctx.ReceiveValue(pointerFieldAccess.Type));
            return pointerFieldAccess;
        }

        public override J VisitAnnotatedType(J.AnnotatedType annotatedType, ReceiverContext ctx)
        {
            annotatedType = annotatedType.WithId(ctx.ReceiveValue(annotatedType.Id)!);
            annotatedType = annotatedType.WithPrefix(ctx.ReceiveNode(annotatedType.Prefix, ReceiveSpace)!);
            annotatedType = annotatedType.WithMarkers(ctx.ReceiveNode(annotatedType.Markers, ctx.ReceiveMarkers)!);
            annotatedType = annotatedType.WithAnnotations(ctx.ReceiveNodes(annotatedType.Annotations, ctx.ReceiveTree)!);
            annotatedType = annotatedType.WithTypeExpression(ctx.ReceiveNode(annotatedType.TypeExpression, ctx.ReceiveTree)!);
            return annotatedType;
        }

        public override J VisitAnnotation(J.Annotation annotation, ReceiverContext ctx)
        {
            annotation = annotation.WithId(ctx.ReceiveValue(annotation.Id)!);
            annotation = annotation.WithPrefix(ctx.ReceiveNode(annotation.Prefix, ReceiveSpace)!);
            annotation = annotation.WithMarkers(ctx.ReceiveNode(annotation.Markers, ctx.ReceiveMarkers)!);
            annotation = annotation.WithAnnotationType(ctx.ReceiveNode(annotation.AnnotationType, ctx.ReceiveTree)!);
            annotation = annotation.Padding.WithArguments(ctx.ReceiveNode(annotation.Padding.Arguments, ReceiveContainer));
            return annotation;
        }

        public override J VisitArrayAccess(J.ArrayAccess arrayAccess, ReceiverContext ctx)
        {
            arrayAccess = arrayAccess.WithId(ctx.ReceiveValue(arrayAccess.Id)!);
            arrayAccess = arrayAccess.WithPrefix(ctx.ReceiveNode(arrayAccess.Prefix, ReceiveSpace)!);
            arrayAccess = arrayAccess.WithMarkers(ctx.ReceiveNode(arrayAccess.Markers, ctx.ReceiveMarkers)!);
            arrayAccess = arrayAccess.WithIndexed(ctx.ReceiveNode(arrayAccess.Indexed, ctx.ReceiveTree)!);
            arrayAccess = arrayAccess.WithDimension(ctx.ReceiveNode(arrayAccess.Dimension, ctx.ReceiveTree)!);
            arrayAccess = arrayAccess.WithType(ctx.ReceiveValue(arrayAccess.Type));
            return arrayAccess;
        }

        public override J VisitArrayType(J.ArrayType arrayType, ReceiverContext ctx)
        {
            arrayType = arrayType.WithId(ctx.ReceiveValue(arrayType.Id)!);
            arrayType = arrayType.WithPrefix(ctx.ReceiveNode(arrayType.Prefix, ReceiveSpace)!);
            arrayType = arrayType.WithMarkers(ctx.ReceiveNode(arrayType.Markers, ctx.ReceiveMarkers)!);
            arrayType = arrayType.WithElementType(ctx.ReceiveNode(arrayType.ElementType, ctx.ReceiveTree)!);
            arrayType = arrayType.WithAnnotations(ctx.ReceiveNodes(arrayType.Annotations, ctx.ReceiveTree));
            arrayType = arrayType.WithDimension(ctx.ReceiveNode(arrayType.Dimension, ReceiveLeftPadded));
            arrayType = arrayType.WithType(ctx.ReceiveValue(arrayType.Type)!);
            return arrayType;
        }

        public override J VisitAssert(J.Assert assert, ReceiverContext ctx)
        {
            assert = assert.WithId(ctx.ReceiveValue(assert.Id)!);
            assert = assert.WithPrefix(ctx.ReceiveNode(assert.Prefix, ReceiveSpace)!);
            assert = assert.WithMarkers(ctx.ReceiveNode(assert.Markers, ctx.ReceiveMarkers)!);
            assert = assert.WithCondition(ctx.ReceiveNode(assert.Condition, ctx.ReceiveTree)!);
            assert = assert.WithDetail(ctx.ReceiveNode(assert.Detail, ReceiveLeftPadded));
            return assert;
        }

        public override J VisitAssignment(J.Assignment assignment, ReceiverContext ctx)
        {
            assignment = assignment.WithId(ctx.ReceiveValue(assignment.Id)!);
            assignment = assignment.WithPrefix(ctx.ReceiveNode(assignment.Prefix, ReceiveSpace)!);
            assignment = assignment.WithMarkers(ctx.ReceiveNode(assignment.Markers, ctx.ReceiveMarkers)!);
            assignment = assignment.WithVariable(ctx.ReceiveNode(assignment.Variable, ctx.ReceiveTree)!);
            assignment = assignment.Padding.WithExpression(ctx.ReceiveNode(assignment.Padding.Expression, ReceiveLeftPadded)!);
            assignment = assignment.WithType(ctx.ReceiveValue(assignment.Type));
            return assignment;
        }

        public override J VisitAssignmentOperation(J.AssignmentOperation assignmentOperation, ReceiverContext ctx)
        {
            assignmentOperation = assignmentOperation.WithId(ctx.ReceiveValue(assignmentOperation.Id)!);
            assignmentOperation = assignmentOperation.WithPrefix(ctx.ReceiveNode(assignmentOperation.Prefix, ReceiveSpace)!);
            assignmentOperation = assignmentOperation.WithMarkers(ctx.ReceiveNode(assignmentOperation.Markers, ctx.ReceiveMarkers)!);
            assignmentOperation = assignmentOperation.WithVariable(ctx.ReceiveNode(assignmentOperation.Variable, ctx.ReceiveTree)!);
            assignmentOperation = assignmentOperation.Padding.WithOperator(ctx.ReceiveNode(assignmentOperation.Padding.Operator, ReceiveLeftPadded)!);
            assignmentOperation = assignmentOperation.WithAssignment(ctx.ReceiveNode(assignmentOperation.Assignment, ctx.ReceiveTree)!);
            assignmentOperation = assignmentOperation.WithType(ctx.ReceiveValue(assignmentOperation.Type));
            return assignmentOperation;
        }

        public override J VisitBinary(J.Binary binary, ReceiverContext ctx)
        {
            binary = binary.WithId(ctx.ReceiveValue(binary.Id)!);
            binary = binary.WithPrefix(ctx.ReceiveNode(binary.Prefix, ReceiveSpace)!);
            binary = binary.WithMarkers(ctx.ReceiveNode(binary.Markers, ctx.ReceiveMarkers)!);
            binary = binary.WithLeft(ctx.ReceiveNode(binary.Left, ctx.ReceiveTree)!);
            binary = binary.Padding.WithOperator(ctx.ReceiveNode(binary.Padding.Operator, ReceiveLeftPadded)!);
            binary = binary.WithRight(ctx.ReceiveNode(binary.Right, ctx.ReceiveTree)!);
            binary = binary.WithType(ctx.ReceiveValue(binary.Type));
            return binary;
        }

        public override J VisitBlock(J.Block block, ReceiverContext ctx)
        {
            block = block.WithId(ctx.ReceiveValue(block.Id)!);
            block = block.WithPrefix(ctx.ReceiveNode(block.Prefix, ReceiveSpace)!);
            block = block.WithMarkers(ctx.ReceiveNode(block.Markers, ctx.ReceiveMarkers)!);
            block = block.Padding.WithStatic(ctx.ReceiveNode(block.Padding.Static, ReceiveRightPadded)!);
            block = block.Padding.WithStatements(ctx.ReceiveNodes(block.Padding.Statements, ReceiveRightPadded)!);
            block = block.WithEnd(ctx.ReceiveNode(block.End, ReceiveSpace)!);
            return block;
        }

        public override J VisitBreak(J.Break @break, ReceiverContext ctx)
        {
            @break = @break.WithId(ctx.ReceiveValue(@break.Id)!);
            @break = @break.WithPrefix(ctx.ReceiveNode(@break.Prefix, ReceiveSpace)!);
            @break = @break.WithMarkers(ctx.ReceiveNode(@break.Markers, ctx.ReceiveMarkers)!);
            @break = @break.WithLabel(ctx.ReceiveNode(@break.Label, ctx.ReceiveTree));
            return @break;
        }

        public override J VisitCase(J.Case @case, ReceiverContext ctx)
        {
            @case = @case.WithId(ctx.ReceiveValue(@case.Id)!);
            @case = @case.WithPrefix(ctx.ReceiveNode(@case.Prefix, ReceiveSpace)!);
            @case = @case.WithMarkers(ctx.ReceiveNode(@case.Markers, ctx.ReceiveMarkers)!);
            @case = @case.WithCaseType(ctx.ReceiveValue(@case.CaseType)!);
            @case = @case.Padding.WithCaseLabels(ctx.ReceiveNode(@case.Padding.CaseLabels, ReceiveContainer)!);
            @case = @case.Padding.WithStatements(ctx.ReceiveNode(@case.Padding.Statements, ReceiveContainer)!);
            @case = @case.Padding.WithBody(ctx.ReceiveNode(@case.Padding.Body, ReceiveRightPadded));
            @case = @case.WithGuard(ctx.ReceiveNode(@case.Guard, ctx.ReceiveTree));
            return @case;
        }

        public override J VisitClassDeclaration(J.ClassDeclaration classDeclaration, ReceiverContext ctx)
        {
            classDeclaration = classDeclaration.WithId(ctx.ReceiveValue(classDeclaration.Id)!);
            classDeclaration = classDeclaration.WithPrefix(ctx.ReceiveNode(classDeclaration.Prefix, ReceiveSpace)!);
            classDeclaration = classDeclaration.WithMarkers(ctx.ReceiveNode(classDeclaration.Markers, ctx.ReceiveMarkers)!);
            classDeclaration = classDeclaration.WithLeadingAnnotations(ctx.ReceiveNodes(classDeclaration.LeadingAnnotations, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithModifiers(ctx.ReceiveNodes(classDeclaration.Modifiers, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.Padding.WithDeclarationKind(ctx.ReceiveNode(classDeclaration.Padding.DeclarationKind, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithName(ctx.ReceiveNode(classDeclaration.Name, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.Padding.WithTypeParameters(ctx.ReceiveNode(classDeclaration.Padding.TypeParameters, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithPrimaryConstructor(ctx.ReceiveNode(classDeclaration.Padding.PrimaryConstructor, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithExtends(ctx.ReceiveNode(classDeclaration.Padding.Extends, ReceiveLeftPadded));
            classDeclaration = classDeclaration.Padding.WithImplements(ctx.ReceiveNode(classDeclaration.Padding.Implements, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithPermits(ctx.ReceiveNode(classDeclaration.Padding.Permits, ReceiveContainer));
            classDeclaration = classDeclaration.WithBody(ctx.ReceiveNode(classDeclaration.Body, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithType(ctx.ReceiveValue(classDeclaration.Type));
            return classDeclaration;
        }

        public override J VisitClassDeclarationKind(J.ClassDeclaration.Kind kind, ReceiverContext ctx)
        {
            kind = kind.WithId(ctx.ReceiveValue(kind.Id)!);
            kind = kind.WithPrefix(ctx.ReceiveNode(kind.Prefix, ReceiveSpace)!);
            kind = kind.WithMarkers(ctx.ReceiveNode(kind.Markers, ctx.ReceiveMarkers)!);
            kind = kind.WithAnnotations(ctx.ReceiveNodes(kind.Annotations, ctx.ReceiveTree)!);
            kind = kind.WithKindType(ctx.ReceiveValue(kind.KindType)!);
            return kind;
        }

        public override J VisitContinue(J.Continue @continue, ReceiverContext ctx)
        {
            @continue = @continue.WithId(ctx.ReceiveValue(@continue.Id)!);
            @continue = @continue.WithPrefix(ctx.ReceiveNode(@continue.Prefix, ReceiveSpace)!);
            @continue = @continue.WithMarkers(ctx.ReceiveNode(@continue.Markers, ctx.ReceiveMarkers)!);
            @continue = @continue.WithLabel(ctx.ReceiveNode(@continue.Label, ctx.ReceiveTree));
            return @continue;
        }

        public override J VisitDoWhileLoop(J.DoWhileLoop doWhileLoop, ReceiverContext ctx)
        {
            doWhileLoop = doWhileLoop.WithId(ctx.ReceiveValue(doWhileLoop.Id)!);
            doWhileLoop = doWhileLoop.WithPrefix(ctx.ReceiveNode(doWhileLoop.Prefix, ReceiveSpace)!);
            doWhileLoop = doWhileLoop.WithMarkers(ctx.ReceiveNode(doWhileLoop.Markers, ctx.ReceiveMarkers)!);
            doWhileLoop = doWhileLoop.Padding.WithBody(ctx.ReceiveNode(doWhileLoop.Padding.Body, ReceiveRightPadded)!);
            doWhileLoop = doWhileLoop.Padding.WithWhileCondition(ctx.ReceiveNode(doWhileLoop.Padding.WhileCondition, ReceiveLeftPadded)!);
            return doWhileLoop;
        }

        public override J VisitEmpty(J.Empty empty, ReceiverContext ctx)
        {
            empty = empty.WithId(ctx.ReceiveValue(empty.Id)!);
            empty = empty.WithPrefix(ctx.ReceiveNode(empty.Prefix, ReceiveSpace)!);
            empty = empty.WithMarkers(ctx.ReceiveNode(empty.Markers, ctx.ReceiveMarkers)!);
            return empty;
        }

        public override J VisitEnumValue(J.EnumValue enumValue, ReceiverContext ctx)
        {
            enumValue = enumValue.WithId(ctx.ReceiveValue(enumValue.Id)!);
            enumValue = enumValue.WithPrefix(ctx.ReceiveNode(enumValue.Prefix, ReceiveSpace)!);
            enumValue = enumValue.WithMarkers(ctx.ReceiveNode(enumValue.Markers, ctx.ReceiveMarkers)!);
            enumValue = enumValue.WithAnnotations(ctx.ReceiveNodes(enumValue.Annotations, ctx.ReceiveTree)!);
            enumValue = enumValue.WithName(ctx.ReceiveNode(enumValue.Name, ctx.ReceiveTree)!);
            enumValue = enumValue.WithInitializer(ctx.ReceiveNode(enumValue.Initializer, ctx.ReceiveTree));
            return enumValue;
        }

        public override J VisitEnumValueSet(J.EnumValueSet enumValueSet, ReceiverContext ctx)
        {
            enumValueSet = enumValueSet.WithId(ctx.ReceiveValue(enumValueSet.Id)!);
            enumValueSet = enumValueSet.WithPrefix(ctx.ReceiveNode(enumValueSet.Prefix, ReceiveSpace)!);
            enumValueSet = enumValueSet.WithMarkers(ctx.ReceiveNode(enumValueSet.Markers, ctx.ReceiveMarkers)!);
            enumValueSet = enumValueSet.Padding.WithEnums(ctx.ReceiveNodes(enumValueSet.Padding.Enums, ReceiveRightPadded)!);
            enumValueSet = enumValueSet.WithTerminatedWithSemicolon(ctx.ReceiveValue(enumValueSet.TerminatedWithSemicolon));
            return enumValueSet;
        }

        public override J VisitFieldAccess(J.FieldAccess fieldAccess, ReceiverContext ctx)
        {
            fieldAccess = fieldAccess.WithId(ctx.ReceiveValue(fieldAccess.Id)!);
            fieldAccess = fieldAccess.WithPrefix(ctx.ReceiveNode(fieldAccess.Prefix, ReceiveSpace)!);
            fieldAccess = fieldAccess.WithMarkers(ctx.ReceiveNode(fieldAccess.Markers, ctx.ReceiveMarkers)!);
            fieldAccess = fieldAccess.WithTarget(ctx.ReceiveNode(fieldAccess.Target, ctx.ReceiveTree)!);
            fieldAccess = fieldAccess.Padding.WithName(ctx.ReceiveNode(fieldAccess.Padding.Name, ReceiveLeftPadded)!);
            fieldAccess = fieldAccess.WithType(ctx.ReceiveValue(fieldAccess.Type));
            return fieldAccess;
        }

        public override J VisitForEachLoop(J.ForEachLoop forEachLoop, ReceiverContext ctx)
        {
            forEachLoop = forEachLoop.WithId(ctx.ReceiveValue(forEachLoop.Id)!);
            forEachLoop = forEachLoop.WithPrefix(ctx.ReceiveNode(forEachLoop.Prefix, ReceiveSpace)!);
            forEachLoop = forEachLoop.WithMarkers(ctx.ReceiveNode(forEachLoop.Markers, ctx.ReceiveMarkers)!);
            forEachLoop = forEachLoop.WithLoopControl(ctx.ReceiveNode(forEachLoop.LoopControl, ctx.ReceiveTree)!);
            forEachLoop = forEachLoop.Padding.WithBody(ctx.ReceiveNode(forEachLoop.Padding.Body, ReceiveRightPadded)!);
            return forEachLoop;
        }

        public override J VisitForEachControl(J.ForEachLoop.Control control, ReceiverContext ctx)
        {
            control = control.WithId(ctx.ReceiveValue(control.Id)!);
            control = control.WithPrefix(ctx.ReceiveNode(control.Prefix, ReceiveSpace)!);
            control = control.WithMarkers(ctx.ReceiveNode(control.Markers, ctx.ReceiveMarkers)!);
            control = control.Padding.WithVariable(ctx.ReceiveNode(control.Padding.Variable, ReceiveRightPadded)!);
            control = control.Padding.WithIterable(ctx.ReceiveNode(control.Padding.Iterable, ReceiveRightPadded)!);
            return control;
        }

        public override J VisitForLoop(J.ForLoop forLoop, ReceiverContext ctx)
        {
            forLoop = forLoop.WithId(ctx.ReceiveValue(forLoop.Id)!);
            forLoop = forLoop.WithPrefix(ctx.ReceiveNode(forLoop.Prefix, ReceiveSpace)!);
            forLoop = forLoop.WithMarkers(ctx.ReceiveNode(forLoop.Markers, ctx.ReceiveMarkers)!);
            forLoop = forLoop.WithLoopControl(ctx.ReceiveNode(forLoop.LoopControl, ctx.ReceiveTree)!);
            forLoop = forLoop.Padding.WithBody(ctx.ReceiveNode(forLoop.Padding.Body, ReceiveRightPadded)!);
            return forLoop;
        }

        public override J VisitForControl(J.ForLoop.Control control, ReceiverContext ctx)
        {
            control = control.WithId(ctx.ReceiveValue(control.Id)!);
            control = control.WithPrefix(ctx.ReceiveNode(control.Prefix, ReceiveSpace)!);
            control = control.WithMarkers(ctx.ReceiveNode(control.Markers, ctx.ReceiveMarkers)!);
            control = control.Padding.WithInit(ctx.ReceiveNodes(control.Padding.Init, ReceiveRightPadded)!);
            control = control.Padding.WithCondition(ctx.ReceiveNode(control.Padding.Condition, ReceiveRightPadded)!);
            control = control.Padding.WithUpdate(ctx.ReceiveNodes(control.Padding.Update, ReceiveRightPadded)!);
            return control;
        }

        public override J VisitParenthesizedTypeTree(J.ParenthesizedTypeTree parenthesizedTypeTree, ReceiverContext ctx)
        {
            parenthesizedTypeTree = parenthesizedTypeTree.WithId(ctx.ReceiveValue(parenthesizedTypeTree.Id)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithPrefix(ctx.ReceiveNode(parenthesizedTypeTree.Prefix, ReceiveSpace)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithMarkers(ctx.ReceiveNode(parenthesizedTypeTree.Markers, ctx.ReceiveMarkers)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithAnnotations(ctx.ReceiveNodes(parenthesizedTypeTree.Annotations, ctx.ReceiveTree)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithParenthesizedType(ctx.ReceiveNode(parenthesizedTypeTree.ParenthesizedType, ctx.ReceiveTree)!);
            return parenthesizedTypeTree;
        }

        public override J VisitIdentifier(J.Identifier identifier, ReceiverContext ctx)
        {
            identifier = identifier.WithId(ctx.ReceiveValue(identifier.Id)!);
            identifier = identifier.WithPrefix(ctx.ReceiveNode(identifier.Prefix, ReceiveSpace)!);
            identifier = identifier.WithMarkers(ctx.ReceiveNode(identifier.Markers, ctx.ReceiveMarkers)!);
            identifier = identifier.WithAnnotations(ctx.ReceiveNodes(identifier.Annotations, ctx.ReceiveTree)!);
            identifier = identifier.WithSimpleName(ctx.ReceiveValue(identifier.SimpleName)!);
            identifier = identifier.WithType(ctx.ReceiveValue(identifier.Type));
            identifier = identifier.WithFieldType(ctx.ReceiveValue(identifier.FieldType));
            return identifier;
        }

        public override J VisitIf(J.If @if, ReceiverContext ctx)
        {
            @if = @if.WithId(ctx.ReceiveValue(@if.Id)!);
            @if = @if.WithPrefix(ctx.ReceiveNode(@if.Prefix, ReceiveSpace)!);
            @if = @if.WithMarkers(ctx.ReceiveNode(@if.Markers, ctx.ReceiveMarkers)!);
            @if = @if.WithIfCondition(ctx.ReceiveNode(@if.IfCondition, ReceiveControlParentheses)!);
            @if = @if.Padding.WithThenPart(ctx.ReceiveNode(@if.Padding.ThenPart, ReceiveRightPadded)!);
            @if = @if.WithElsePart(ctx.ReceiveNode(@if.ElsePart, ctx.ReceiveTree));
            return @if;
        }

        public override J VisitElse(J.If.Else @else, ReceiverContext ctx)
        {
            @else = @else.WithId(ctx.ReceiveValue(@else.Id)!);
            @else = @else.WithPrefix(ctx.ReceiveNode(@else.Prefix, ReceiveSpace)!);
            @else = @else.WithMarkers(ctx.ReceiveNode(@else.Markers, ctx.ReceiveMarkers)!);
            @else = @else.Padding.WithBody(ctx.ReceiveNode(@else.Padding.Body, ReceiveRightPadded)!);
            return @else;
        }

        public override J VisitImport(J.Import import, ReceiverContext ctx)
        {
            import = import.WithId(ctx.ReceiveValue(import.Id)!);
            import = import.WithPrefix(ctx.ReceiveNode(import.Prefix, ReceiveSpace)!);
            import = import.WithMarkers(ctx.ReceiveNode(import.Markers, ctx.ReceiveMarkers)!);
            import = import.Padding.WithStatic(ctx.ReceiveNode(import.Padding.Static, ReceiveLeftPadded)!);
            import = import.WithQualid(ctx.ReceiveNode(import.Qualid, ctx.ReceiveTree)!);
            import = import.Padding.WithAlias(ctx.ReceiveNode(import.Padding.Alias, ReceiveLeftPadded));
            return import;
        }

        public override J VisitInstanceOf(J.InstanceOf instanceOf, ReceiverContext ctx)
        {
            instanceOf = instanceOf.WithId(ctx.ReceiveValue(instanceOf.Id)!);
            instanceOf = instanceOf.WithPrefix(ctx.ReceiveNode(instanceOf.Prefix, ReceiveSpace)!);
            instanceOf = instanceOf.WithMarkers(ctx.ReceiveNode(instanceOf.Markers, ctx.ReceiveMarkers)!);
            instanceOf = instanceOf.Padding.WithExpression(ctx.ReceiveNode(instanceOf.Padding.Expression, ReceiveRightPadded)!);
            instanceOf = instanceOf.WithClazz(ctx.ReceiveNode(instanceOf.Clazz, ctx.ReceiveTree)!);
            instanceOf = instanceOf.WithPattern(ctx.ReceiveNode(instanceOf.Pattern, ctx.ReceiveTree));
            instanceOf = instanceOf.WithType(ctx.ReceiveValue(instanceOf.Type));
            return instanceOf;
        }

        public override J VisitDeconstructionPattern(J.DeconstructionPattern deconstructionPattern, ReceiverContext ctx)
        {
            deconstructionPattern = deconstructionPattern.WithId(ctx.ReceiveValue(deconstructionPattern.Id)!);
            deconstructionPattern = deconstructionPattern.WithPrefix(ctx.ReceiveNode(deconstructionPattern.Prefix, ReceiveSpace)!);
            deconstructionPattern = deconstructionPattern.WithMarkers(ctx.ReceiveNode(deconstructionPattern.Markers, ctx.ReceiveMarkers)!);
            deconstructionPattern = deconstructionPattern.WithDeconstructor(ctx.ReceiveNode(deconstructionPattern.Deconstructor, ctx.ReceiveTree)!);
            deconstructionPattern = deconstructionPattern.Padding.WithNested(ctx.ReceiveNode(deconstructionPattern.Padding.Nested, ReceiveContainer)!);
            deconstructionPattern = deconstructionPattern.WithType(ctx.ReceiveValue(deconstructionPattern.Type)!);
            return deconstructionPattern;
        }

        public override J VisitIntersectionType(J.IntersectionType intersectionType, ReceiverContext ctx)
        {
            intersectionType = intersectionType.WithId(ctx.ReceiveValue(intersectionType.Id)!);
            intersectionType = intersectionType.WithPrefix(ctx.ReceiveNode(intersectionType.Prefix, ReceiveSpace)!);
            intersectionType = intersectionType.WithMarkers(ctx.ReceiveNode(intersectionType.Markers, ctx.ReceiveMarkers)!);
            intersectionType = intersectionType.Padding.WithBounds(ctx.ReceiveNode(intersectionType.Padding.Bounds, ReceiveContainer)!);
            return intersectionType;
        }

        public override J VisitLabel(J.Label label, ReceiverContext ctx)
        {
            label = label.WithId(ctx.ReceiveValue(label.Id)!);
            label = label.WithPrefix(ctx.ReceiveNode(label.Prefix, ReceiveSpace)!);
            label = label.WithMarkers(ctx.ReceiveNode(label.Markers, ctx.ReceiveMarkers)!);
            label = label.Padding.WithName(ctx.ReceiveNode(label.Padding.Name, ReceiveRightPadded)!);
            label = label.WithStatement(ctx.ReceiveNode(label.Statement, ctx.ReceiveTree)!);
            return label;
        }

        public override J VisitLambda(J.Lambda lambda, ReceiverContext ctx)
        {
            lambda = lambda.WithId(ctx.ReceiveValue(lambda.Id)!);
            lambda = lambda.WithPrefix(ctx.ReceiveNode(lambda.Prefix, ReceiveSpace)!);
            lambda = lambda.WithMarkers(ctx.ReceiveNode(lambda.Markers, ctx.ReceiveMarkers)!);
            lambda = lambda.WithParams(ctx.ReceiveNode(lambda.Params, ctx.ReceiveTree)!);
            lambda = lambda.WithArrow(ctx.ReceiveNode(lambda.Arrow, ReceiveSpace)!);
            lambda = lambda.WithBody(ctx.ReceiveNode(lambda.Body, ctx.ReceiveTree)!);
            lambda = lambda.WithType(ctx.ReceiveValue(lambda.Type));
            return lambda;
        }

        public override J VisitLambdaParameters(J.Lambda.Parameters parameters, ReceiverContext ctx)
        {
            parameters = parameters.WithId(ctx.ReceiveValue(parameters.Id)!);
            parameters = parameters.WithPrefix(ctx.ReceiveNode(parameters.Prefix, ReceiveSpace)!);
            parameters = parameters.WithMarkers(ctx.ReceiveNode(parameters.Markers, ctx.ReceiveMarkers)!);
            parameters = parameters.WithParenthesized(ctx.ReceiveValue(parameters.Parenthesized));
            parameters = parameters.Padding.WithElements(ctx.ReceiveNodes(parameters.Padding.Elements, ReceiveRightPadded)!);
            return parameters;
        }

        public override J VisitLiteral(J.Literal literal, ReceiverContext ctx)
        {
            literal = literal.WithId(ctx.ReceiveValue(literal.Id)!);
            literal = literal.WithPrefix(ctx.ReceiveNode(literal.Prefix, ReceiveSpace)!);
            literal = literal.WithMarkers(ctx.ReceiveNode(literal.Markers, ctx.ReceiveMarkers)!);
            literal = literal.WithValue(ctx.ReceiveValue(literal.Value));
            literal = literal.WithValueSource(ctx.ReceiveValue(literal.ValueSource));
            literal = literal.WithUnicodeEscapes(ctx.ReceiveValues(literal.UnicodeEscapes));
            literal = literal.WithType(ctx.ReceiveValue(literal.Type)!);
            return literal;
        }

        public override J VisitMemberReference(J.MemberReference memberReference, ReceiverContext ctx)
        {
            memberReference = memberReference.WithId(ctx.ReceiveValue(memberReference.Id)!);
            memberReference = memberReference.WithPrefix(ctx.ReceiveNode(memberReference.Prefix, ReceiveSpace)!);
            memberReference = memberReference.WithMarkers(ctx.ReceiveNode(memberReference.Markers, ctx.ReceiveMarkers)!);
            memberReference = memberReference.Padding.WithContaining(ctx.ReceiveNode(memberReference.Padding.Containing, ReceiveRightPadded)!);
            memberReference = memberReference.Padding.WithTypeParameters(ctx.ReceiveNode(memberReference.Padding.TypeParameters, ReceiveContainer));
            memberReference = memberReference.Padding.WithReference(ctx.ReceiveNode(memberReference.Padding.Reference, ReceiveLeftPadded)!);
            memberReference = memberReference.WithType(ctx.ReceiveValue(memberReference.Type));
            memberReference = memberReference.WithMethodType(ctx.ReceiveValue(memberReference.MethodType));
            memberReference = memberReference.WithVariableType(ctx.ReceiveValue(memberReference.VariableType));
            return memberReference;
        }

        public override J VisitMethodDeclaration(J.MethodDeclaration methodDeclaration, ReceiverContext ctx)
        {
            methodDeclaration = methodDeclaration.WithId(ctx.ReceiveValue(methodDeclaration.Id)!);
            methodDeclaration = methodDeclaration.WithPrefix(ctx.ReceiveNode(methodDeclaration.Prefix, ReceiveSpace)!);
            methodDeclaration = methodDeclaration.WithMarkers(ctx.ReceiveNode(methodDeclaration.Markers, ctx.ReceiveMarkers)!);
            methodDeclaration = methodDeclaration.WithLeadingAnnotations(ctx.ReceiveNodes(methodDeclaration.LeadingAnnotations, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.WithModifiers(ctx.ReceiveNodes(methodDeclaration.Modifiers, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.Annotations.WithTypeParameters(ctx.ReceiveNode(methodDeclaration.Annotations.TypeParameters, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.WithReturnTypeExpression(ctx.ReceiveNode(methodDeclaration.ReturnTypeExpression, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.Annotations.WithName(ctx.ReceiveNode(methodDeclaration.Annotations.Name, ReceiveMethodIdentifierWithAnnotations)!);
            methodDeclaration = methodDeclaration.Padding.WithParameters(ctx.ReceiveNode(methodDeclaration.Padding.Parameters, ReceiveContainer)!);
            methodDeclaration = methodDeclaration.Padding.WithThrows(ctx.ReceiveNode(methodDeclaration.Padding.Throws, ReceiveContainer));
            methodDeclaration = methodDeclaration.WithBody(ctx.ReceiveNode(methodDeclaration.Body, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.Padding.WithDefaultValue(ctx.ReceiveNode(methodDeclaration.Padding.DefaultValue, ReceiveLeftPadded));
            methodDeclaration = methodDeclaration.WithMethodType(ctx.ReceiveValue(methodDeclaration.MethodType));
            return methodDeclaration;
        }

        public override J VisitMethodInvocation(J.MethodInvocation methodInvocation, ReceiverContext ctx)
        {
            methodInvocation = methodInvocation.WithId(ctx.ReceiveValue(methodInvocation.Id)!);
            methodInvocation = methodInvocation.WithPrefix(ctx.ReceiveNode(methodInvocation.Prefix, ReceiveSpace)!);
            methodInvocation = methodInvocation.WithMarkers(ctx.ReceiveNode(methodInvocation.Markers, ctx.ReceiveMarkers)!);
            methodInvocation = methodInvocation.Padding.WithSelect(ctx.ReceiveNode(methodInvocation.Padding.Select, ReceiveRightPadded));
            methodInvocation = methodInvocation.Padding.WithTypeParameters(ctx.ReceiveNode(methodInvocation.Padding.TypeParameters, ReceiveContainer));
            methodInvocation = methodInvocation.WithName(ctx.ReceiveNode(methodInvocation.Name, ctx.ReceiveTree)!);
            methodInvocation = methodInvocation.Padding.WithArguments(ctx.ReceiveNode(methodInvocation.Padding.Arguments, ReceiveContainer)!);
            methodInvocation = methodInvocation.WithMethodType(ctx.ReceiveValue(methodInvocation.MethodType));
            return methodInvocation;
        }

        public override J VisitModifier(J.Modifier modifier, ReceiverContext ctx)
        {
            modifier = modifier.WithId(ctx.ReceiveValue(modifier.Id)!);
            modifier = modifier.WithPrefix(ctx.ReceiveNode(modifier.Prefix, ReceiveSpace)!);
            modifier = modifier.WithMarkers(ctx.ReceiveNode(modifier.Markers, ctx.ReceiveMarkers)!);
            modifier = modifier.WithKeyword(ctx.ReceiveValue(modifier.Keyword));
            modifier = modifier.WithModifierType(ctx.ReceiveValue(modifier.ModifierType)!);
            modifier = modifier.WithAnnotations(ctx.ReceiveNodes(modifier.Annotations, ctx.ReceiveTree)!);
            return modifier;
        }

        public override J VisitMultiCatch(J.MultiCatch multiCatch, ReceiverContext ctx)
        {
            multiCatch = multiCatch.WithId(ctx.ReceiveValue(multiCatch.Id)!);
            multiCatch = multiCatch.WithPrefix(ctx.ReceiveNode(multiCatch.Prefix, ReceiveSpace)!);
            multiCatch = multiCatch.WithMarkers(ctx.ReceiveNode(multiCatch.Markers, ctx.ReceiveMarkers)!);
            multiCatch = multiCatch.Padding.WithAlternatives(ctx.ReceiveNodes(multiCatch.Padding.Alternatives, ReceiveRightPadded)!);
            return multiCatch;
        }

        public override J VisitNewArray(J.NewArray newArray, ReceiverContext ctx)
        {
            newArray = newArray.WithId(ctx.ReceiveValue(newArray.Id)!);
            newArray = newArray.WithPrefix(ctx.ReceiveNode(newArray.Prefix, ReceiveSpace)!);
            newArray = newArray.WithMarkers(ctx.ReceiveNode(newArray.Markers, ctx.ReceiveMarkers)!);
            newArray = newArray.WithTypeExpression(ctx.ReceiveNode(newArray.TypeExpression, ctx.ReceiveTree));
            newArray = newArray.WithDimensions(ctx.ReceiveNodes(newArray.Dimensions, ctx.ReceiveTree)!);
            newArray = newArray.Padding.WithInitializer(ctx.ReceiveNode(newArray.Padding.Initializer, ReceiveContainer));
            newArray = newArray.WithType(ctx.ReceiveValue(newArray.Type));
            return newArray;
        }

        public override J VisitArrayDimension(J.ArrayDimension arrayDimension, ReceiverContext ctx)
        {
            arrayDimension = arrayDimension.WithId(ctx.ReceiveValue(arrayDimension.Id)!);
            arrayDimension = arrayDimension.WithPrefix(ctx.ReceiveNode(arrayDimension.Prefix, ReceiveSpace)!);
            arrayDimension = arrayDimension.WithMarkers(ctx.ReceiveNode(arrayDimension.Markers, ctx.ReceiveMarkers)!);
            arrayDimension = arrayDimension.Padding.WithIndex(ctx.ReceiveNode(arrayDimension.Padding.Index, ReceiveRightPadded)!);
            return arrayDimension;
        }

        public override J VisitNewClass(J.NewClass newClass, ReceiverContext ctx)
        {
            newClass = newClass.WithId(ctx.ReceiveValue(newClass.Id)!);
            newClass = newClass.WithPrefix(ctx.ReceiveNode(newClass.Prefix, ReceiveSpace)!);
            newClass = newClass.WithMarkers(ctx.ReceiveNode(newClass.Markers, ctx.ReceiveMarkers)!);
            newClass = newClass.Padding.WithEnclosing(ctx.ReceiveNode(newClass.Padding.Enclosing, ReceiveRightPadded));
            newClass = newClass.WithNew(ctx.ReceiveNode(newClass.New, ReceiveSpace)!);
            newClass = newClass.WithClazz(ctx.ReceiveNode(newClass.Clazz, ctx.ReceiveTree));
            newClass = newClass.Padding.WithArguments(ctx.ReceiveNode(newClass.Padding.Arguments, ReceiveContainer)!);
            newClass = newClass.WithBody(ctx.ReceiveNode(newClass.Body, ctx.ReceiveTree));
            newClass = newClass.WithConstructorType(ctx.ReceiveValue(newClass.ConstructorType));
            return newClass;
        }

        public override J VisitNullableType(J.NullableType nullableType, ReceiverContext ctx)
        {
            nullableType = nullableType.WithId(ctx.ReceiveValue(nullableType.Id)!);
            nullableType = nullableType.WithPrefix(ctx.ReceiveNode(nullableType.Prefix, ReceiveSpace)!);
            nullableType = nullableType.WithMarkers(ctx.ReceiveNode(nullableType.Markers, ctx.ReceiveMarkers)!);
            nullableType = nullableType.WithAnnotations(ctx.ReceiveNodes(nullableType.Annotations, ctx.ReceiveTree)!);
            nullableType = nullableType.Padding.WithTypeTree(ctx.ReceiveNode(nullableType.Padding.TypeTree, ReceiveRightPadded)!);
            return nullableType;
        }

        public override J VisitPackage(J.Package package, ReceiverContext ctx)
        {
            package = package.WithId(ctx.ReceiveValue(package.Id)!);
            package = package.WithPrefix(ctx.ReceiveNode(package.Prefix, ReceiveSpace)!);
            package = package.WithMarkers(ctx.ReceiveNode(package.Markers, ctx.ReceiveMarkers)!);
            package = package.WithExpression(ctx.ReceiveNode(package.Expression, ctx.ReceiveTree)!);
            package = package.WithAnnotations(ctx.ReceiveNodes(package.Annotations, ctx.ReceiveTree)!);
            return package;
        }

        public override J VisitParameterizedType(J.ParameterizedType parameterizedType, ReceiverContext ctx)
        {
            parameterizedType = parameterizedType.WithId(ctx.ReceiveValue(parameterizedType.Id)!);
            parameterizedType = parameterizedType.WithPrefix(ctx.ReceiveNode(parameterizedType.Prefix, ReceiveSpace)!);
            parameterizedType = parameterizedType.WithMarkers(ctx.ReceiveNode(parameterizedType.Markers, ctx.ReceiveMarkers)!);
            parameterizedType = parameterizedType.WithClazz(ctx.ReceiveNode(parameterizedType.Clazz, ctx.ReceiveTree)!);
            parameterizedType = parameterizedType.Padding.WithTypeParameters(ctx.ReceiveNode(parameterizedType.Padding.TypeParameters, ReceiveContainer));
            parameterizedType = parameterizedType.WithType(ctx.ReceiveValue(parameterizedType.Type));
            return parameterizedType;
        }

        public override J VisitParentheses<J2>(J.Parentheses<J2> parentheses, ReceiverContext ctx)
        {
            parentheses = parentheses.WithId(ctx.ReceiveValue(parentheses.Id)!);
            parentheses = parentheses.WithPrefix(ctx.ReceiveNode(parentheses.Prefix, ReceiveSpace)!);
            parentheses = parentheses.WithMarkers(ctx.ReceiveNode(parentheses.Markers, ctx.ReceiveMarkers)!);
            parentheses = parentheses.Padding.WithTree(ctx.ReceiveNode(parentheses.Padding.Tree, ReceiveRightPadded)!);
            return parentheses;
        }

        public override J VisitPrimitive(J.Primitive primitive, ReceiverContext ctx)
        {
            primitive = primitive.WithId(ctx.ReceiveValue(primitive.Id)!);
            primitive = primitive.WithPrefix(ctx.ReceiveNode(primitive.Prefix, ReceiveSpace)!);
            primitive = primitive.WithMarkers(ctx.ReceiveNode(primitive.Markers, ctx.ReceiveMarkers)!);
            primitive = primitive.WithType(ctx.ReceiveValue(primitive.Type)!);
            return primitive;
        }

        public override J VisitReturn(J.Return @return, ReceiverContext ctx)
        {
            @return = @return.WithId(ctx.ReceiveValue(@return.Id)!);
            @return = @return.WithPrefix(ctx.ReceiveNode(@return.Prefix, ReceiveSpace)!);
            @return = @return.WithMarkers(ctx.ReceiveNode(@return.Markers, ctx.ReceiveMarkers)!);
            @return = @return.WithExpression(ctx.ReceiveNode(@return.Expression, ctx.ReceiveTree));
            return @return;
        }

        public override J VisitSwitch(J.Switch @switch, ReceiverContext ctx)
        {
            @switch = @switch.WithId(ctx.ReceiveValue(@switch.Id)!);
            @switch = @switch.WithPrefix(ctx.ReceiveNode(@switch.Prefix, ReceiveSpace)!);
            @switch = @switch.WithMarkers(ctx.ReceiveNode(@switch.Markers, ctx.ReceiveMarkers)!);
            @switch = @switch.WithSelector(ctx.ReceiveNode(@switch.Selector, ReceiveControlParentheses)!);
            @switch = @switch.WithCases(ctx.ReceiveNode(@switch.Cases, ctx.ReceiveTree)!);
            return @switch;
        }

        public override J VisitSwitchExpression(J.SwitchExpression switchExpression, ReceiverContext ctx)
        {
            switchExpression = switchExpression.WithId(ctx.ReceiveValue(switchExpression.Id)!);
            switchExpression = switchExpression.WithPrefix(ctx.ReceiveNode(switchExpression.Prefix, ReceiveSpace)!);
            switchExpression = switchExpression.WithMarkers(ctx.ReceiveNode(switchExpression.Markers, ctx.ReceiveMarkers)!);
            switchExpression = switchExpression.WithSelector(ctx.ReceiveNode(switchExpression.Selector, ReceiveControlParentheses)!);
            switchExpression = switchExpression.WithCases(ctx.ReceiveNode(switchExpression.Cases, ctx.ReceiveTree)!);
            switchExpression = switchExpression.WithType(ctx.ReceiveValue(switchExpression.Type));
            return switchExpression;
        }

        public override J VisitSynchronized(J.Synchronized synchronized, ReceiverContext ctx)
        {
            synchronized = synchronized.WithId(ctx.ReceiveValue(synchronized.Id)!);
            synchronized = synchronized.WithPrefix(ctx.ReceiveNode(synchronized.Prefix, ReceiveSpace)!);
            synchronized = synchronized.WithMarkers(ctx.ReceiveNode(synchronized.Markers, ctx.ReceiveMarkers)!);
            synchronized = synchronized.WithLock(ctx.ReceiveNode(synchronized.Lock, ReceiveControlParentheses)!);
            synchronized = synchronized.WithBody(ctx.ReceiveNode(synchronized.Body, ctx.ReceiveTree)!);
            return synchronized;
        }

        public override J VisitTernary(J.Ternary ternary, ReceiverContext ctx)
        {
            ternary = ternary.WithId(ctx.ReceiveValue(ternary.Id)!);
            ternary = ternary.WithPrefix(ctx.ReceiveNode(ternary.Prefix, ReceiveSpace)!);
            ternary = ternary.WithMarkers(ctx.ReceiveNode(ternary.Markers, ctx.ReceiveMarkers)!);
            ternary = ternary.WithCondition(ctx.ReceiveNode(ternary.Condition, ctx.ReceiveTree)!);
            ternary = ternary.Padding.WithTruePart(ctx.ReceiveNode(ternary.Padding.TruePart, ReceiveLeftPadded)!);
            ternary = ternary.Padding.WithFalsePart(ctx.ReceiveNode(ternary.Padding.FalsePart, ReceiveLeftPadded)!);
            ternary = ternary.WithType(ctx.ReceiveValue(ternary.Type));
            return ternary;
        }

        public override J VisitThrow(J.Throw @throw, ReceiverContext ctx)
        {
            @throw = @throw.WithId(ctx.ReceiveValue(@throw.Id)!);
            @throw = @throw.WithPrefix(ctx.ReceiveNode(@throw.Prefix, ReceiveSpace)!);
            @throw = @throw.WithMarkers(ctx.ReceiveNode(@throw.Markers, ctx.ReceiveMarkers)!);
            @throw = @throw.WithException(ctx.ReceiveNode(@throw.Exception, ctx.ReceiveTree)!);
            return @throw;
        }

        public override J VisitTry(J.Try @try, ReceiverContext ctx)
        {
            @try = @try.WithId(ctx.ReceiveValue(@try.Id)!);
            @try = @try.WithPrefix(ctx.ReceiveNode(@try.Prefix, ReceiveSpace)!);
            @try = @try.WithMarkers(ctx.ReceiveNode(@try.Markers, ctx.ReceiveMarkers)!);
            @try = @try.Padding.WithResources(ctx.ReceiveNode(@try.Padding.Resources, ReceiveContainer));
            @try = @try.WithBody(ctx.ReceiveNode(@try.Body, ctx.ReceiveTree)!);
            @try = @try.WithCatches(ctx.ReceiveNodes(@try.Catches, ctx.ReceiveTree)!);
            @try = @try.Padding.WithFinally(ctx.ReceiveNode(@try.Padding.Finally, ReceiveLeftPadded));
            return @try;
        }

        public override J VisitTryResource(J.Try.Resource resource, ReceiverContext ctx)
        {
            resource = resource.WithId(ctx.ReceiveValue(resource.Id)!);
            resource = resource.WithPrefix(ctx.ReceiveNode(resource.Prefix, ReceiveSpace)!);
            resource = resource.WithMarkers(ctx.ReceiveNode(resource.Markers, ctx.ReceiveMarkers)!);
            resource = resource.WithVariableDeclarations(ctx.ReceiveNode(resource.VariableDeclarations, ctx.ReceiveTree)!);
            resource = resource.WithTerminatedWithSemicolon(ctx.ReceiveValue(resource.TerminatedWithSemicolon));
            return resource;
        }

        public override J VisitCatch(J.Try.Catch @catch, ReceiverContext ctx)
        {
            @catch = @catch.WithId(ctx.ReceiveValue(@catch.Id)!);
            @catch = @catch.WithPrefix(ctx.ReceiveNode(@catch.Prefix, ReceiveSpace)!);
            @catch = @catch.WithMarkers(ctx.ReceiveNode(@catch.Markers, ctx.ReceiveMarkers)!);
            @catch = @catch.WithParameter(ctx.ReceiveNode(@catch.Parameter, ReceiveControlParentheses)!);
            @catch = @catch.WithBody(ctx.ReceiveNode(@catch.Body, ctx.ReceiveTree)!);
            return @catch;
        }

        public override J VisitTypeCast(J.TypeCast typeCast, ReceiverContext ctx)
        {
            typeCast = typeCast.WithId(ctx.ReceiveValue(typeCast.Id)!);
            typeCast = typeCast.WithPrefix(ctx.ReceiveNode(typeCast.Prefix, ReceiveSpace)!);
            typeCast = typeCast.WithMarkers(ctx.ReceiveNode(typeCast.Markers, ctx.ReceiveMarkers)!);
            typeCast = typeCast.WithClazz(ctx.ReceiveNode(typeCast.Clazz, ReceiveControlParentheses)!);
            typeCast = typeCast.WithExpression(ctx.ReceiveNode(typeCast.Expression, ctx.ReceiveTree)!);
            return typeCast;
        }

        public override J VisitTypeParameter(J.TypeParameter typeParameter, ReceiverContext ctx)
        {
            typeParameter = typeParameter.WithId(ctx.ReceiveValue(typeParameter.Id)!);
            typeParameter = typeParameter.WithPrefix(ctx.ReceiveNode(typeParameter.Prefix, ReceiveSpace)!);
            typeParameter = typeParameter.WithMarkers(ctx.ReceiveNode(typeParameter.Markers, ctx.ReceiveMarkers)!);
            typeParameter = typeParameter.WithAnnotations(ctx.ReceiveNodes(typeParameter.Annotations, ctx.ReceiveTree)!);
            typeParameter = typeParameter.WithModifiers(ctx.ReceiveNodes(typeParameter.Modifiers, ctx.ReceiveTree)!);
            typeParameter = typeParameter.WithName(ctx.ReceiveNode(typeParameter.Name, ctx.ReceiveTree)!);
            typeParameter = typeParameter.Padding.WithBounds(ctx.ReceiveNode(typeParameter.Padding.Bounds, ReceiveContainer));
            return typeParameter;
        }

        public override J VisitTypeParameters(J.TypeParameters typeParameters, ReceiverContext ctx)
        {
            typeParameters = typeParameters.WithId(ctx.ReceiveValue(typeParameters.Id)!);
            typeParameters = typeParameters.WithPrefix(ctx.ReceiveNode(typeParameters.Prefix, ReceiveSpace)!);
            typeParameters = typeParameters.WithMarkers(ctx.ReceiveNode(typeParameters.Markers, ctx.ReceiveMarkers)!);
            typeParameters = typeParameters.WithAnnotations(ctx.ReceiveNodes(typeParameters.Annotations, ctx.ReceiveTree)!);
            typeParameters = typeParameters.Padding.WithParameters(ctx.ReceiveNodes(typeParameters.Padding.Parameters, ReceiveRightPadded)!);
            return typeParameters;
        }

        public override J VisitUnary(J.Unary unary, ReceiverContext ctx)
        {
            unary = unary.WithId(ctx.ReceiveValue(unary.Id)!);
            unary = unary.WithPrefix(ctx.ReceiveNode(unary.Prefix, ReceiveSpace)!);
            unary = unary.WithMarkers(ctx.ReceiveNode(unary.Markers, ctx.ReceiveMarkers)!);
            unary = unary.Padding.WithOperator(ctx.ReceiveNode(unary.Padding.Operator, ReceiveLeftPadded)!);
            unary = unary.WithExpression(ctx.ReceiveNode(unary.Expression, ctx.ReceiveTree)!);
            unary = unary.WithType(ctx.ReceiveValue(unary.Type));
            return unary;
        }

        public override J VisitVariableDeclarations(J.VariableDeclarations variableDeclarations, ReceiverContext ctx)
        {
            variableDeclarations = variableDeclarations.WithId(ctx.ReceiveValue(variableDeclarations.Id)!);
            variableDeclarations = variableDeclarations.WithPrefix(ctx.ReceiveNode(variableDeclarations.Prefix, ReceiveSpace)!);
            variableDeclarations = variableDeclarations.WithMarkers(ctx.ReceiveNode(variableDeclarations.Markers, ctx.ReceiveMarkers)!);
            variableDeclarations = variableDeclarations.WithLeadingAnnotations(ctx.ReceiveNodes(variableDeclarations.LeadingAnnotations, ctx.ReceiveTree)!);
            variableDeclarations = variableDeclarations.WithModifiers(ctx.ReceiveNodes(variableDeclarations.Modifiers, ctx.ReceiveTree)!);
            variableDeclarations = variableDeclarations.WithTypeExpression(ctx.ReceiveNode(variableDeclarations.TypeExpression, ctx.ReceiveTree));
            variableDeclarations = variableDeclarations.WithVarargs(ctx.ReceiveNode(variableDeclarations.Varargs, ReceiveSpace));
            variableDeclarations = variableDeclarations.WithDimensionsBeforeName(ctx.ReceiveNodes(variableDeclarations.DimensionsBeforeName, ReceiveLeftPadded)!);
            variableDeclarations = variableDeclarations.Padding.WithVariables(ctx.ReceiveNodes(variableDeclarations.Padding.Variables, ReceiveRightPadded)!);
            return variableDeclarations;
        }

        public override J VisitVariable(J.VariableDeclarations.NamedVariable namedVariable, ReceiverContext ctx)
        {
            namedVariable = namedVariable.WithId(ctx.ReceiveValue(namedVariable.Id)!);
            namedVariable = namedVariable.WithPrefix(ctx.ReceiveNode(namedVariable.Prefix, ReceiveSpace)!);
            namedVariable = namedVariable.WithMarkers(ctx.ReceiveNode(namedVariable.Markers, ctx.ReceiveMarkers)!);
            namedVariable = namedVariable.WithName(ctx.ReceiveNode(namedVariable.Name, ctx.ReceiveTree)!);
            namedVariable = namedVariable.WithDimensionsAfterName(ctx.ReceiveNodes(namedVariable.DimensionsAfterName, ReceiveLeftPadded)!);
            namedVariable = namedVariable.Padding.WithInitializer(ctx.ReceiveNode(namedVariable.Padding.Initializer, ReceiveLeftPadded));
            namedVariable = namedVariable.WithVariableType(ctx.ReceiveValue(namedVariable.VariableType));
            return namedVariable;
        }

        public override J VisitWhileLoop(J.WhileLoop whileLoop, ReceiverContext ctx)
        {
            whileLoop = whileLoop.WithId(ctx.ReceiveValue(whileLoop.Id)!);
            whileLoop = whileLoop.WithPrefix(ctx.ReceiveNode(whileLoop.Prefix, ReceiveSpace)!);
            whileLoop = whileLoop.WithMarkers(ctx.ReceiveNode(whileLoop.Markers, ctx.ReceiveMarkers)!);
            whileLoop = whileLoop.WithCondition(ctx.ReceiveNode(whileLoop.Condition, ReceiveControlParentheses)!);
            whileLoop = whileLoop.Padding.WithBody(ctx.ReceiveNode(whileLoop.Padding.Body, ReceiveRightPadded)!);
            return whileLoop;
        }

        public override J VisitWildcard(J.Wildcard wildcard, ReceiverContext ctx)
        {
            wildcard = wildcard.WithId(ctx.ReceiveValue(wildcard.Id)!);
            wildcard = wildcard.WithPrefix(ctx.ReceiveNode(wildcard.Prefix, ReceiveSpace)!);
            wildcard = wildcard.WithMarkers(ctx.ReceiveNode(wildcard.Markers, ctx.ReceiveMarkers)!);
            wildcard = wildcard.Padding.WithWildcardBound(ctx.ReceiveNode(wildcard.Padding.WildcardBound, ReceiveLeftPadded));
            wildcard = wildcard.WithBoundedType(ctx.ReceiveNode(wildcard.BoundedType, ctx.ReceiveTree));
            return wildcard;
        }

        public override J VisitYield(J.Yield yield, ReceiverContext ctx)
        {
            yield = yield.WithId(ctx.ReceiveValue(yield.Id)!);
            yield = yield.WithPrefix(ctx.ReceiveNode(yield.Prefix, ReceiveSpace)!);
            yield = yield.WithMarkers(ctx.ReceiveNode(yield.Markers, ctx.ReceiveMarkers)!);
            yield = yield.WithImplicit(ctx.ReceiveValue(yield.Implicit));
            yield = yield.WithValue(ctx.ReceiveNode(yield.Value, ctx.ReceiveTree)!);
            return yield;
        }

        public override J VisitUnknown(J.Unknown unknown, ReceiverContext ctx)
        {
            unknown = unknown.WithId(ctx.ReceiveValue(unknown.Id)!);
            unknown = unknown.WithPrefix(ctx.ReceiveNode(unknown.Prefix, ReceiveSpace)!);
            unknown = unknown.WithMarkers(ctx.ReceiveNode(unknown.Markers, ctx.ReceiveMarkers)!);
            unknown = unknown.WithUnknownSource(ctx.ReceiveNode(unknown.UnknownSource, ctx.ReceiveTree)!);
            return unknown;
        }

        public override J VisitUnknownSource(J.Unknown.Source source, ReceiverContext ctx)
        {
            source = source.WithId(ctx.ReceiveValue(source.Id)!);
            source = source.WithPrefix(ctx.ReceiveNode(source.Prefix, ReceiveSpace)!);
            source = source.WithMarkers(ctx.ReceiveNode(source.Markers, ctx.ReceiveMarkers)!);
            source = source.WithText(ctx.ReceiveValue(source.Text)!);
            return source;
        }

        public override J VisitErroneous(J.Erroneous erroneous, ReceiverContext ctx)
        {
            erroneous = erroneous.WithId(ctx.ReceiveValue(erroneous.Id)!);
            erroneous = erroneous.WithPrefix(ctx.ReceiveNode(erroneous.Prefix, ReceiveSpace)!);
            erroneous = erroneous.WithMarkers(ctx.ReceiveNode(erroneous.Markers, ctx.ReceiveMarkers)!);
            erroneous = erroneous.WithText(ctx.ReceiveValue(erroneous.Text)!);
            return erroneous;
        }

    }

    private class Factory : ReceiverFactory
    {
        public Rewrite.Core.Tree Create<T>(string type, ReceiverContext ctx) where T : Rewrite.Core.Tree
        {
            if (type is "Rewrite.RewriteCSharp.Tree.Cs.CompilationUnit" or "org.openrewrite.csharp.tree.Cs$CompilationUnit")
            {
                return new Cs.CompilationUnit(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string))!,
                    ctx.ReceiveValue(default(FileAttributes?))!,
                    ctx.ReceiveValue(default(string?))!,
                    ctx.ReceiveValue(default(bool))!,
                    ctx.ReceiveValue(default(Checksum?))!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.ExternAlias>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.UsingDirective>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.RefExpression" or "org.openrewrite.csharp.tree.Cs$RefExpression")
            {
                return new Cs.RefExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.PointerType" or "org.openrewrite.csharp.tree.Cs$PointerType")
            {
                return new Cs.PointerType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<TypeTree>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.RefType" or "org.openrewrite.csharp.tree.Cs$RefType")
            {
                return new Cs.RefType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Modifier?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ForEachVariableLoop" or "org.openrewrite.csharp.tree.Cs$ForEachVariableLoop")
            {
                return new Cs.ForEachVariableLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.ForEachVariableLoop.Control), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ForEachVariableLoop.Control" or "org.openrewrite.csharp.tree.Cs$ForEachVariableLoop$Control")
            {
                return new Cs.ForEachVariableLoop.Control(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Argument" or "org.openrewrite.csharp.tree.Cs$Argument")
            {
                return new Cs.Argument(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Cs.Keyword?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AnnotatedStatement" or "org.openrewrite.csharp.tree.Cs$AnnotatedStatement")
            {
                return new Cs.AnnotatedStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Statement), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ArrayRankSpecifier" or "org.openrewrite.csharp.tree.Cs$ArrayRankSpecifier")
            {
                return new Cs.ArrayRankSpecifier(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AssignmentOperation" or "org.openrewrite.csharp.tree.Cs$AssignmentOperation")
            {
                return new Cs.AssignmentOperation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.AssignmentOperation.OperatorType>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AttributeList" or "org.openrewrite.csharp.tree.Cs$AttributeList")
            {
                return new Cs.AttributeList(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>?), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.Annotation>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AwaitExpression" or "org.openrewrite.csharp.tree.Cs$AwaitExpression")
            {
                return new Cs.AwaitExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.StackAllocExpression" or "org.openrewrite.csharp.tree.Cs$StackAllocExpression")
            {
                return new Cs.StackAllocExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.NewArray), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.GotoStatement" or "org.openrewrite.csharp.tree.Cs$GotoStatement")
            {
                return new Cs.GotoStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Expression?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.EventDeclaration" or "org.openrewrite.csharp.tree.Cs$EventDeclaration")
            {
                return new Cs.EventDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<NameTree>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Statement>?), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Binary" or "org.openrewrite.csharp.tree.Cs$Binary")
            {
                return new Cs.Binary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.Binary.OperatorType>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.BlockScopeNamespaceDeclaration" or "org.openrewrite.csharp.tree.Cs$BlockScopeNamespaceDeclaration")
            {
                return new Cs.BlockScopeNamespaceDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.ExternAlias>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.UsingDirective>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.CollectionExpression" or "org.openrewrite.csharp.tree.Cs$CollectionExpression")
            {
                return new Cs.CollectionExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Expression>>), ReceiveRightPadded)!,
                    ctx.ReceiveValue(default(JavaType))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ExpressionStatement" or "org.openrewrite.csharp.tree.Cs$ExpressionStatement")
            {
                return new Cs.ExpressionStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ExternAlias" or "org.openrewrite.csharp.tree.Cs$ExternAlias")
            {
                return new Cs.ExternAlias(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.FileScopeNamespaceDeclaration" or "org.openrewrite.csharp.tree.Cs$FileScopeNamespaceDeclaration")
            {
                return new Cs.FileScopeNamespaceDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.ExternAlias>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.UsingDirective>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.InterpolatedString" or "org.openrewrite.csharp.tree.Cs$InterpolatedString")
            {
                return new Cs.InterpolatedString(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string))!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Expression>>), ReceiveRightPadded)!,
                    ctx.ReceiveValue(default(string))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Interpolation" or "org.openrewrite.csharp.tree.Cs$Interpolation")
            {
                return new Cs.Interpolation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>?), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.NullSafeExpression" or "org.openrewrite.csharp.tree.Cs$NullSafeExpression")
            {
                return new Cs.NullSafeExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.StatementExpression" or "org.openrewrite.csharp.tree.Cs$StatementExpression")
            {
                return new Cs.StatementExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Statement), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.UsingDirective" or "org.openrewrite.csharp.tree.Cs$UsingDirective")
            {
                return new Cs.UsingDirective(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<bool>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<bool>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<bool>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.PropertyDeclaration" or "org.openrewrite.csharp.tree.Cs$PropertyDeclaration")
            {
                return new Cs.PropertyDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<NameTree>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.ArrowExpressionClause?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Keyword" or "org.openrewrite.csharp.tree.Cs$Keyword")
            {
                return new Cs.Keyword(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(Cs.Keyword.KeywordKind))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Lambda" or "org.openrewrite.csharp.tree.Cs$Lambda")
            {
                return new Cs.Lambda(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Lambda), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ClassDeclaration" or "org.openrewrite.csharp.tree.Cs$ClassDeclaration")
            {
                return new Cs.ClassDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.ClassDeclaration.Kind), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameter>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Statement>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameterConstraintClause>?), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType.FullyQualified?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.MethodDeclaration" or "org.openrewrite.csharp.tree.Cs$MethodDeclaration")
            {
                return new Cs.MethodDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameter>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<TypeTree>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(Statement?), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType.Method?))!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameterConstraintClause>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.UsingStatement" or "org.openrewrite.csharp.tree.Cs$UsingStatement")
            {
                return new Cs.UsingStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Statement), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TypeParameterConstraintClause" or "org.openrewrite.csharp.tree.Cs$TypeParameterConstraintClause")
            {
                return new Cs.TypeParameterConstraintClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameterConstraint>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TypeConstraint" or "org.openrewrite.csharp.tree.Cs$TypeConstraint")
            {
                return new Cs.TypeConstraint(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AllowsConstraintClause" or "org.openrewrite.csharp.tree.Cs$AllowsConstraintClause")
            {
                return new Cs.AllowsConstraintClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.AllowsConstraint>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.RefStructConstraint" or "org.openrewrite.csharp.tree.Cs$RefStructConstraint")
            {
                return new Cs.RefStructConstraint(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ClassOrStructConstraint" or "org.openrewrite.csharp.tree.Cs$ClassOrStructConstraint")
            {
                return new Cs.ClassOrStructConstraint(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(Cs.ClassOrStructConstraint.TypeKind))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ConstructorConstraint" or "org.openrewrite.csharp.tree.Cs$ConstructorConstraint")
            {
                return new Cs.ConstructorConstraint(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DefaultConstraint" or "org.openrewrite.csharp.tree.Cs$DefaultConstraint")
            {
                return new Cs.DefaultConstraint(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DeclarationExpression" or "org.openrewrite.csharp.tree.Cs$DeclarationExpression")
            {
                return new Cs.DeclarationExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.VariableDesignation), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SingleVariableDesignation" or "org.openrewrite.csharp.tree.Cs$SingleVariableDesignation")
            {
                return new Cs.SingleVariableDesignation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ParenthesizedVariableDesignation" or "org.openrewrite.csharp.tree.Cs$ParenthesizedVariableDesignation")
            {
                return new Cs.ParenthesizedVariableDesignation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.VariableDesignation>), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DiscardVariableDesignation" or "org.openrewrite.csharp.tree.Cs$DiscardVariableDesignation")
            {
                return new Cs.DiscardVariableDesignation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TupleExpression" or "org.openrewrite.csharp.tree.Cs$TupleExpression")
            {
                return new Cs.TupleExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.Argument>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Constructor" or "org.openrewrite.csharp.tree.Cs$Constructor")
            {
                return new Cs.Constructor(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.ConstructorInitializer?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.MethodDeclaration), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DestructorDeclaration" or "org.openrewrite.csharp.tree.Cs$DestructorDeclaration")
            {
                return new Cs.DestructorDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.MethodDeclaration), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Unary" or "org.openrewrite.csharp.tree.Cs$Unary")
            {
                return new Cs.Unary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.Unary.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ConstructorInitializer" or "org.openrewrite.csharp.tree.Cs$ConstructorInitializer")
            {
                return new Cs.ConstructorInitializer(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TupleType" or "org.openrewrite.csharp.tree.Cs$TupleType")
            {
                return new Cs.TupleType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TupleElement>), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TupleElement" or "org.openrewrite.csharp.tree.Cs$TupleElement")
            {
                return new Cs.TupleElement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.NewClass" or "org.openrewrite.csharp.tree.Cs$NewClass")
            {
                return new Cs.NewClass(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.NewClass), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.InitializerExpression?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.InitializerExpression" or "org.openrewrite.csharp.tree.Cs$InitializerExpression")
            {
                return new Cs.InitializerExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ImplicitElementAccess" or "org.openrewrite.csharp.tree.Cs$ImplicitElementAccess")
            {
                return new Cs.ImplicitElementAccess(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.Argument>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Yield" or "org.openrewrite.csharp.tree.Cs$Yield")
            {
                return new Cs.Yield(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Expression?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DefaultExpression" or "org.openrewrite.csharp.tree.Cs$DefaultExpression")
            {
                return new Cs.DefaultExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>?), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.IsPattern" or "org.openrewrite.csharp.tree.Cs$IsPattern")
            {
                return new Cs.IsPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.Pattern>), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.UnaryPattern" or "org.openrewrite.csharp.tree.Cs$UnaryPattern")
            {
                return new Cs.UnaryPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.Pattern), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TypePattern" or "org.openrewrite.csharp.tree.Cs$TypePattern")
            {
                return new Cs.TypePattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.VariableDesignation?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.BinaryPattern" or "org.openrewrite.csharp.tree.Cs$BinaryPattern")
            {
                return new Cs.BinaryPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Pattern), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.BinaryPattern.OperatorType>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Cs.Pattern), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ConstantPattern" or "org.openrewrite.csharp.tree.Cs$ConstantPattern")
            {
                return new Cs.ConstantPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DiscardPattern" or "org.openrewrite.csharp.tree.Cs$DiscardPattern")
            {
                return new Cs.DiscardPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(JavaType))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ListPattern" or "org.openrewrite.csharp.tree.Cs$ListPattern")
            {
                return new Cs.ListPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.Pattern>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(Cs.VariableDesignation?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ParenthesizedPattern" or "org.openrewrite.csharp.tree.Cs$ParenthesizedPattern")
            {
                return new Cs.ParenthesizedPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.Pattern>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.RecursivePattern" or "org.openrewrite.csharp.tree.Cs$RecursivePattern")
            {
                return new Cs.RecursivePattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.PositionalPatternClause?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.PropertyPatternClause?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.VariableDesignation?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.VarPattern" or "org.openrewrite.csharp.tree.Cs$VarPattern")
            {
                return new Cs.VarPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.VariableDesignation), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.PositionalPatternClause" or "org.openrewrite.csharp.tree.Cs$PositionalPatternClause")
            {
                return new Cs.PositionalPatternClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Cs.Subpattern>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.RelationalPattern" or "org.openrewrite.csharp.tree.Cs$RelationalPattern")
            {
                return new Cs.RelationalPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.RelationalPattern.OperatorType>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SlicePattern" or "org.openrewrite.csharp.tree.Cs$SlicePattern")
            {
                return new Cs.SlicePattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.PropertyPatternClause" or "org.openrewrite.csharp.tree.Cs$PropertyPatternClause")
            {
                return new Cs.PropertyPatternClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Subpattern" or "org.openrewrite.csharp.tree.Cs$Subpattern")
            {
                return new Cs.Subpattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.Pattern>), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SwitchExpression" or "org.openrewrite.csharp.tree.Cs$SwitchExpression")
            {
                return new Cs.SwitchExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JContainer<Cs.SwitchExpressionArm>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SwitchExpressionArm" or "org.openrewrite.csharp.tree.Cs$SwitchExpressionArm")
            {
                return new Cs.SwitchExpressionArm(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Pattern), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SwitchSection" or "org.openrewrite.csharp.tree.Cs$SwitchSection")
            {
                return new Cs.SwitchSection(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.SwitchLabel>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DefaultSwitchLabel" or "org.openrewrite.csharp.tree.Cs$DefaultSwitchLabel")
            {
                return new Cs.DefaultSwitchLabel(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.CasePatternSwitchLabel" or "org.openrewrite.csharp.tree.Cs$CasePatternSwitchLabel")
            {
                return new Cs.CasePatternSwitchLabel(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Pattern), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SwitchStatement" or "org.openrewrite.csharp.tree.Cs$SwitchStatement")
            {
                return new Cs.SwitchStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Cs.SwitchSection>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.LockStatement" or "org.openrewrite.csharp.tree.Cs$LockStatement")
            {
                return new Cs.LockStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.FixedStatement" or "org.openrewrite.csharp.tree.Cs$FixedStatement")
            {
                return new Cs.FixedStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<J.VariableDeclarations>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.CheckedExpression" or "org.openrewrite.csharp.tree.Cs$CheckedExpression")
            {
                return new Cs.CheckedExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.CheckedStatement" or "org.openrewrite.csharp.tree.Cs$CheckedStatement")
            {
                return new Cs.CheckedStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.Keyword), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.UnsafeStatement" or "org.openrewrite.csharp.tree.Cs$UnsafeStatement")
            {
                return new Cs.UnsafeStatement(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.RangeExpression" or "org.openrewrite.csharp.tree.Cs$RangeExpression")
            {
                return new Cs.RangeExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.QueryExpression" or "org.openrewrite.csharp.tree.Cs$QueryExpression")
            {
                return new Cs.QueryExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Cs.FromClause), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.QueryBody), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.QueryBody" or "org.openrewrite.csharp.tree.Cs$QueryBody")
            {
                return new Cs.QueryBody(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.QueryClause>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.SelectOrGroupClause?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.QueryContinuation?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.FromClause" or "org.openrewrite.csharp.tree.Cs$FromClause")
            {
                return new Cs.FromClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.LetClause" or "org.openrewrite.csharp.tree.Cs$LetClause")
            {
                return new Cs.LetClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.JoinClause" or "org.openrewrite.csharp.tree.Cs$JoinClause")
            {
                return new Cs.JoinClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.JoinIntoClause>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.JoinIntoClause" or "org.openrewrite.csharp.tree.Cs$JoinIntoClause")
            {
                return new Cs.JoinIntoClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.WhereClause" or "org.openrewrite.csharp.tree.Cs$WhereClause")
            {
                return new Cs.WhereClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.OrderByClause" or "org.openrewrite.csharp.tree.Cs$OrderByClause")
            {
                return new Cs.OrderByClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Cs.Ordering>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.QueryContinuation" or "org.openrewrite.csharp.tree.Cs$QueryContinuation")
            {
                return new Cs.QueryContinuation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Cs.QueryBody), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Ordering" or "org.openrewrite.csharp.tree.Cs$Ordering")
            {
                return new Cs.Ordering(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveValue(default(Cs.Ordering.DirectionKind?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.SelectClause" or "org.openrewrite.csharp.tree.Cs$SelectClause")
            {
                return new Cs.SelectClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.GroupClause" or "org.openrewrite.csharp.tree.Cs$GroupClause")
            {
                return new Cs.GroupClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.IndexerDeclaration" or "org.openrewrite.csharp.tree.Cs$IndexerDeclaration")
            {
                return new Cs.IndexerDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.DelegateDeclaration" or "org.openrewrite.csharp.tree.Cs$DelegateDeclaration")
            {
                return new Cs.DelegateDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameter>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Cs.TypeParameterConstraintClause>?), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ConversionOperatorDeclaration" or "org.openrewrite.csharp.tree.Cs$ConversionOperatorDeclaration")
            {
                return new Cs.ConversionOperatorDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.ConversionOperatorDeclaration.ExplicitImplicit>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.TypeParameter" or "org.openrewrite.csharp.tree.Cs$TypeParameter")
            {
                return new Cs.TypeParameter(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.TypeParameter.VarianceKind>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.EnumDeclaration" or "org.openrewrite.csharp.tree.Cs$EnumDeclaration")
            {
                return new Cs.EnumDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>?), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JContainer<Expression>?), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.EnumMemberDeclaration" or "org.openrewrite.csharp.tree.Cs$EnumMemberDeclaration")
            {
                return new Cs.EnumMemberDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AliasQualifiedName" or "org.openrewrite.csharp.tree.Cs$AliasQualifiedName")
            {
                return new Cs.AliasQualifiedName(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ArrayType" or "org.openrewrite.csharp.tree.Cs$ArrayType")
            {
                return new Cs.ArrayType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.ArrayDimension>), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Try" or "org.openrewrite.csharp.tree.Cs$Try")
            {
                return new Cs.Try(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<Cs.Try.Catch>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Block>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.Try.Catch" or "org.openrewrite.csharp.tree.Cs$Try$Catch")
            {
                return new Cs.Try.Catch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<J.VariableDeclarations>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.ControlParentheses<Expression>>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.ArrowExpressionClause" or "org.openrewrite.csharp.tree.Cs$ArrowExpressionClause")
            {
                return new Cs.ArrowExpressionClause(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.AccessorDeclaration" or "org.openrewrite.csharp.tree.Cs$AccessorDeclaration")
            {
                return new Cs.AccessorDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<Cs.AttributeList>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Cs.AccessorDeclaration.AccessorKinds>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Cs.ArrowExpressionClause?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.Cs.PointerFieldAccess" or "org.openrewrite.csharp.tree.Cs$PointerFieldAccess")
            {
                return new Cs.PointerFieldAccess(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.AnnotatedType" or "org.openrewrite.java.tree.J$AnnotatedType")
            {
                return new J.AnnotatedType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Annotation" or "org.openrewrite.java.tree.J$Annotation")
            {
                return new J.Annotation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(NameTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>?), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ArrayAccess" or "org.openrewrite.java.tree.J$ArrayAccess")
            {
                return new J.ArrayAccess(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.ArrayDimension), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ArrayType" or "org.openrewrite.java.tree.J$ArrayType")
            {
                return new J.ArrayType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Space>?), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Assert" or "org.openrewrite.java.tree.J$Assert")
            {
                return new J.Assert(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Assignment" or "org.openrewrite.java.tree.J$Assignment")
            {
                return new J.Assignment(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.AssignmentOperation" or "org.openrewrite.java.tree.J$AssignmentOperation")
            {
                return new J.AssignmentOperation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.AssignmentOperation.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Binary" or "org.openrewrite.java.tree.J$Binary")
            {
                return new J.Binary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Binary.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Block" or "org.openrewrite.java.tree.J$Block")
            {
                return new J.Block(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<bool>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Break" or "org.openrewrite.java.tree.J$Break")
            {
                return new J.Break(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Case" or "org.openrewrite.java.tree.J$Case")
            {
                return new J.Case(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(J.Case.Types))!,
                    ctx.ReceiveNode(default(JContainer<J>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JRightPadded<J>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Expression?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ClassDeclaration" or "org.openrewrite.java.tree.J$ClassDeclaration")
            {
                return new J.ClassDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.ClassDeclaration.Kind), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<J.TypeParameter>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Statement>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType.FullyQualified?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ClassDeclaration.Kind" or "org.openrewrite.java.tree.J$ClassDeclaration$Kind")
            {
                return new J.ClassDeclaration.Kind(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(J.ClassDeclaration.Kind.Types))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Continue" or "org.openrewrite.java.tree.J$Continue")
            {
                return new J.Continue(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.DoWhileLoop" or "org.openrewrite.java.tree.J$DoWhileLoop")
            {
                return new J.DoWhileLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.ControlParentheses<Expression>>), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Empty" or "org.openrewrite.java.tree.J$Empty")
            {
                return new J.Empty(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.EnumValue" or "org.openrewrite.java.tree.J$EnumValue")
            {
                return new J.EnumValue(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.NewClass?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.EnumValueSet" or "org.openrewrite.java.tree.J$EnumValueSet")
            {
                return new J.EnumValueSet(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.EnumValue>>), ReceiveRightPadded)!,
                    ctx.ReceiveValue(default(bool))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.FieldAccess" or "org.openrewrite.java.tree.J$FieldAccess")
            {
                return new J.FieldAccess(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ForEachLoop" or "org.openrewrite.java.tree.J$ForEachLoop")
            {
                return new J.ForEachLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ForEachLoop.Control), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ForEachLoop.Control" or "org.openrewrite.java.tree.J$ForEachLoop$Control")
            {
                return new J.ForEachLoop.Control(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.VariableDeclarations>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ForLoop" or "org.openrewrite.java.tree.J$ForLoop")
            {
                return new J.ForLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ForLoop.Control), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ForLoop.Control" or "org.openrewrite.java.tree.J$ForLoop$Control")
            {
                return new J.ForLoop.Control(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ParenthesizedTypeTree" or "org.openrewrite.java.tree.J$ParenthesizedTypeTree")
            {
                return new J.ParenthesizedTypeTree(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Parentheses<TypeTree>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Identifier" or "org.openrewrite.java.tree.J$Identifier")
            {
                return new J.Identifier(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(string))!,
                    ctx.ReceiveValue(default(JavaType?))!,
                    ctx.ReceiveValue(default(JavaType.Variable?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.If" or "org.openrewrite.java.tree.J$If")
            {
                return new J.If(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J.If.Else?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.If.Else" or "org.openrewrite.java.tree.J$If$Else")
            {
                return new J.If.Else(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Import" or "org.openrewrite.java.tree.J$Import")
            {
                return new J.Import(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<bool>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.FieldAccess), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.InstanceOf" or "org.openrewrite.java.tree.J$InstanceOf")
            {
                return new J.InstanceOf(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J?), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.DeconstructionPattern" or "org.openrewrite.java.tree.J$DeconstructionPattern")
            {
                return new J.DeconstructionPattern(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<J>), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.IntersectionType" or "org.openrewrite.java.tree.J$IntersectionType")
            {
                return new J.IntersectionType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Label" or "org.openrewrite.java.tree.J$Label")
            {
                return new J.Label(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Statement), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Lambda" or "org.openrewrite.java.tree.J$Lambda")
            {
                return new J.Lambda(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Lambda.Parameters), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(J), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Lambda.Parameters" or "org.openrewrite.java.tree.J$Lambda$Parameters")
            {
                return new J.Lambda.Parameters(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(bool))!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Literal" or "org.openrewrite.java.tree.J$Literal")
            {
                return new J.Literal(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(object?))!,
                    ctx.ReceiveValue(default(string?))!,
                    ctx.ReceiveValues(default(IList<J.Literal.UnicodeEscape>?))!,
                    ctx.ReceiveValue(default(JavaType.Primitive))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.MemberReference" or "org.openrewrite.java.tree.J$MemberReference")
            {
                return new J.MemberReference(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JContainer<Expression>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType?))!,
                    ctx.ReceiveValue(default(JavaType.Method?))!,
                    ctx.ReceiveValue(default(JavaType.Variable?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.MethodDeclaration" or "org.openrewrite.java.tree.J$MethodDeclaration")
            {
                return new J.MethodDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.TypeParameters?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.MethodDeclaration.IdentifierWithAnnotations), ReceiveMethodIdentifierWithAnnotations)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<NameTree>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType.Method?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.MethodInvocation" or "org.openrewrite.java.tree.J$MethodInvocation")
            {
                return new J.MethodInvocation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JContainer<Expression>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType.Method?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Modifier" or "org.openrewrite.java.tree.J$Modifier")
            {
                return new J.Modifier(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string?))!,
                    ctx.ReceiveValue(default(J.Modifier.Types))!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.MultiCatch" or "org.openrewrite.java.tree.J$MultiCatch")
            {
                return new J.MultiCatch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<NameTree>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.NewArray" or "org.openrewrite.java.tree.J$NewArray")
            {
                return new J.NewArray(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.ArrayDimension>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>?), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ArrayDimension" or "org.openrewrite.java.tree.J$ArrayDimension")
            {
                return new J.ArrayDimension(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.NewClass" or "org.openrewrite.java.tree.J$NewClass")
            {
                return new J.NewClass(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>?), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Block?), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType.Method?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.NullableType" or "org.openrewrite.java.tree.J$NullableType")
            {
                return new J.NullableType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<TypeTree>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Package" or "org.openrewrite.java.tree.J$Package")
            {
                return new J.Package(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ParameterizedType" or "org.openrewrite.java.tree.J$ParameterizedType")
            {
                return new J.ParameterizedType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(NameTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>?), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Parentheses" or "org.openrewrite.java.tree.J$Parentheses")
            {
                return new J.Parentheses<J>(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.ControlParentheses" or "org.openrewrite.java.tree.J$ControlParentheses")
            {
                return new J.ControlParentheses<J>(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Primitive" or "org.openrewrite.java.tree.J$Primitive")
            {
                return new J.Primitive(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(JavaType.Primitive))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Return" or "org.openrewrite.java.tree.J$Return")
            {
                return new J.Return(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Switch" or "org.openrewrite.java.tree.J$Switch")
            {
                return new J.Switch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.SwitchExpression" or "org.openrewrite.java.tree.J$SwitchExpression")
            {
                return new J.SwitchExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Synchronized" or "org.openrewrite.java.tree.J$Synchronized")
            {
                return new J.Synchronized(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Ternary" or "org.openrewrite.java.tree.J$Ternary")
            {
                return new J.Ternary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Throw" or "org.openrewrite.java.tree.J$Throw")
            {
                return new J.Throw(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Try" or "org.openrewrite.java.tree.J$Try")
            {
                return new J.Try(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<J.Try.Resource>?), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Try.Catch>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Block>?), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Try.Resource" or "org.openrewrite.java.tree.J$Try$Resource")
            {
                return new J.Try.Resource(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypedTree), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(bool))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Try.Catch" or "org.openrewrite.java.tree.J$Try$Catch")
            {
                return new J.Try.Catch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<J.VariableDeclarations>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.TypeCast" or "org.openrewrite.java.tree.J$TypeCast")
            {
                return new J.TypeCast(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<TypeTree>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.TypeParameter" or "org.openrewrite.java.tree.J$TypeParameter")
            {
                return new J.TypeParameter(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>?), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.TypeParameters" or "org.openrewrite.java.tree.J$TypeParameters")
            {
                return new J.TypeParameters(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.TypeParameter>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Unary" or "org.openrewrite.java.tree.J$Unary")
            {
                return new J.Unary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Unary.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.VariableDeclarations" or "org.openrewrite.java.tree.J$VariableDeclarations")
            {
                return new J.VariableDeclarations(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree?), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Space?), ReceiveSpace)!,
                    ctx.ReceiveNodes(default(IList<JLeftPadded<Space>>), ReceiveLeftPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.VariableDeclarations.NamedVariable>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.VariableDeclarations.NamedVariable" or "org.openrewrite.java.tree.J$VariableDeclarations$NamedVariable")
            {
                return new J.VariableDeclarations.NamedVariable(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<JLeftPadded<Space>>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>?), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType.Variable?))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.WhileLoop" or "org.openrewrite.java.tree.J$WhileLoop")
            {
                return new J.WhileLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Wildcard" or "org.openrewrite.java.tree.J$Wildcard")
            {
                return new J.Wildcard(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Wildcard.Bound>?), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(NameTree?), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Yield" or "org.openrewrite.java.tree.J$Yield")
            {
                return new J.Yield(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(bool))!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Unknown" or "org.openrewrite.java.tree.J$Unknown")
            {
                return new J.Unknown(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Unknown.Source), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Unknown.Source" or "org.openrewrite.java.tree.J$Unknown$Source")
            {
                return new J.Unknown.Source(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string))!
                );
            }

            if (type is "Rewrite.RewriteCSharp.Tree.J.Erroneous" or "org.openrewrite.java.tree.J$Erroneous")
            {
                return new J.Erroneous(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string))!
                );
            }

            throw new NotImplementedException("No factory method for type: " + type);
        }
    }

    private static J.MethodDeclaration.IdentifierWithAnnotations ReceiveMethodIdentifierWithAnnotations(J.MethodDeclaration.IdentifierWithAnnotations? before, string? type, ReceiverContext ctx)
    {
        if (before != null) {
            before = before.WithIdentifier(ctx.ReceiveNode(before.Identifier, ctx.ReceiveTree)!);
            before = before.WithAnnotations(ctx.ReceiveNodes(before.Annotations, ctx.ReceiveTree)!);
        } else {
            before = new J.MethodDeclaration.IdentifierWithAnnotations(
                ctx.ReceiveNode<J.Identifier>(null, ctx.ReceiveTree)!,
                ctx.ReceiveNodes<J.Annotation>(null, ctx.ReceiveTree)!
            );
        }
        return before;
    }

    private static J.ControlParentheses<T> ReceiveControlParentheses<T>(J.ControlParentheses<T>? before, string? type, ReceiverContext ctx)
        where T : J
    {
        if (before != null)
        {
            before = before.WithId(ctx.ReceiveValue(before.Id)!);
            before = before.WithPrefix(ctx.ReceiveNode(before.Prefix, ReceiveSpace)!);
            before = before.WithMarkers(ctx.ReceiveNode(before.Markers, ctx.ReceiveMarkers)!);
            before = before.Padding.WithTree(ctx.ReceiveNode(before.Padding.Tree, ReceiveRightPadded)!);
        }
        else
        {
            before = new J.ControlParentheses<T>(
                ctx.ReceiveValue(default(Guid))!,
                ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                ctx.ReceiveNode(default(JRightPadded<T>), ReceiveRightPadded)!
            );
        }

        return before;
    }

    private static JContainer<T> ReceiveContainer<T>(JContainer<T>? container, string? type, ReceiverContext ctx)
    where T : J
    {
        if (container != null) {
            container = container.WithBefore(ctx.ReceiveNode(container.Before, ReceiveSpace)!);
            container = container.Padding.WithElements(ctx.ReceiveNodes(container.Padding.Elements, ReceiveRightPadded)!);
            container = container.WithMarkers(ctx.ReceiveNode(container.Markers, ctx.ReceiveMarkers)!);
        } else {
            container = JContainer<T>.Build(
                ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                ctx.ReceiveNodes(default(IList<JRightPadded<T>>), ReceiveRightPadded)!,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return container;
    }

    private static JLeftPadded<T> ReceiveLeftPadded<T>(JLeftPadded<T>? leftPadded, string? type, ReceiverContext ctx)
    {
        if (leftPadded != null) {
            leftPadded = leftPadded.WithBefore(ctx.ReceiveNode(leftPadded.Before, ReceiveSpace)!);
            if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                leftPadded = leftPadded.WithElement((T)ctx.ReceiveNode(leftPadded.Element as Core.Tree, ctx.ReceiveTree)!);
            }
            else if (typeof(T) == typeof(Space))
            {
                leftPadded = leftPadded.WithElement((T)(object)ctx.ReceiveNode(leftPadded.Element as Space, ReceiveSpace)!);
            }
            else
            {
                leftPadded = leftPadded.WithElement(ctx.ReceiveValue(leftPadded.Element)!);
            }
            leftPadded = leftPadded.WithMarkers(ctx.ReceiveNode(leftPadded.Markers, ctx.ReceiveMarkers)!);
        } else
        {
            var before = ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            T element;
            if (typeof(T) == typeof(Space))
            {
                element = (T)(object)ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(J.ControlParentheses<Expression>)))
            {
                element = (T)(J)ctx.ReceiveNode<J.ControlParentheses<Expression>>(default, ReceiveControlParentheses)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(J.ControlParentheses<J.VariableDeclarations>)))
            {
                element = (T)(J)ctx.ReceiveNode<J.ControlParentheses<J.VariableDeclarations>>(default, ReceiveControlParentheses)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(J.ControlParentheses<TypeTree>)))
            {
                element = (T)(J)ctx.ReceiveNode<J.ControlParentheses<TypeTree>>(default, ReceiveControlParentheses)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                element = (T)ctx.ReceiveNode(default(Core.Tree), ctx.ReceiveTree)!;
            }
            else
            {
                element = ctx.ReceiveValue(default(T))!;
            }
            leftPadded = new JLeftPadded<T>(
                before,
                element,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return leftPadded;
    }

    private static JRightPadded<T> ReceiveRightPadded<T>(JRightPadded<T>? rightPadded, string? type, ReceiverContext ctx)
    {
        if (rightPadded != null) {
            if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                rightPadded = rightPadded.WithElement((T)ctx.ReceiveNode(rightPadded.Element as Core.Tree, ctx.ReceiveTree)!);
            }
            else if (typeof(T) == typeof(Space))
            {
                rightPadded = rightPadded.WithElement((T)(object)ctx.ReceiveNode(rightPadded.Element as Space, ReceiveSpace)!);
            }
            else
            {
                rightPadded = rightPadded.WithElement(ctx.ReceiveValue(rightPadded.Element)!);
            }
            rightPadded = rightPadded.WithAfter(ctx.ReceiveNode(rightPadded.After, ReceiveSpace)!);
            rightPadded = rightPadded.WithMarkers(ctx.ReceiveNode(rightPadded.Markers, ctx.ReceiveMarkers)!);
        } else
        {
            T element;
            if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                element = (T)ctx.ReceiveNode(default(Core.Tree), ctx.ReceiveTree)!;
            }
            else if (typeof(T) == typeof(Space))
            {
                element = (T)(object)ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            }
            else
            {
                element = ctx.ReceiveValue(default(T))!;
            }
            var after = ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            rightPadded = new JRightPadded<T>(
                element,
                after,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return rightPadded;
    }

    private static Space ReceiveSpace(Space? space, string? type, ReceiverContext ctx)
    {
        if (space != null) {
            space = space.WithComments(ctx.ReceiveNodes(space.Comments, ReceiveComment));
            space = space.WithWhitespace(ctx.ReceiveValue(space.Whitespace)!);
        } else {
            space = new Space(
                ctx.ReceiveNodes<Comment>(null, ReceiveComment)!,
                ctx.ReceiveValue(default(string))
            );
        }
        return space;
    }

    private static Comment ReceiveComment(Comment? comment, string? type, ReceiverContext ctx)
    {
        if (comment != null)
        {
            comment = ((TextComment)comment).WithMultiline(ctx.ReceiveValue(comment.Multiline))
                .WithText(ctx.ReceiveValue(((TextComment)comment).Text)!)
                .WithSuffix(ctx.ReceiveValue(comment.Suffix) ?? "")
                .WithMarkers(ctx.ReceiveNode(comment.Markers, ctx.ReceiveMarkers)!
            );
        }
        else
        {
            comment = new TextComment(
                ctx.ReceiveValue(default(bool)),
                ctx.ReceiveValue(default(string))!,
                ctx.ReceiveValue(default(string))!,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return comment;
    }

}
