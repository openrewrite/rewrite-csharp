//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class MethodDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> leadingAnnotations,
    IList<Modifier> modifiers,
    TypeParameters? typeParameters,
    TypeTree? returnTypeExpression,
    MethodDeclaration.IdentifierWithAnnotations name,
    JContainer<Statement> parameters,
    JContainer<NameTree>? throws,
    Block? body,
    JLeftPadded<Expression>? defaultValue,
    JavaType.Method? methodType
    ) : J,Statement,TypedTree    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        [NonSerialized] private WeakReference<AnnotationsHelper>? _annotations;

        public AnnotationsHelper Annotations
        {
            get
            {
                AnnotationsHelper? p;
                if (_annotations == null)
                {
                    p = new AnnotationsHelper(this);
                    _annotations = new WeakReference<AnnotationsHelper>(p);
                }
                else
                {
                    _annotations.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new AnnotationsHelper(this);
                        _annotations.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitMethodDeclaration(this, p);
        }

        public Guid Id { get;  set; } = id;

        public MethodDeclaration WithId(Guid newId)
        {
            return newId == Id ? this : new MethodDeclaration(newId, Prefix, Markers, LeadingAnnotations, Modifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, MethodType);
        }
        public Space Prefix { get;  set; } = prefix;

        public MethodDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new MethodDeclaration(Id, newPrefix, Markers, LeadingAnnotations, Modifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, MethodType);
        }
        public Markers Markers { get;  set; } = markers;

        public MethodDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new MethodDeclaration(Id, Prefix, newMarkers, LeadingAnnotations, Modifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, MethodType);
        }
        public IList<J.Annotation> LeadingAnnotations { get;  set; } = leadingAnnotations;

        public MethodDeclaration WithLeadingAnnotations(IList<J.Annotation> newLeadingAnnotations)
        {
            return newLeadingAnnotations == LeadingAnnotations ? this : new MethodDeclaration(Id, Prefix, Markers, newLeadingAnnotations, Modifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, MethodType);
        }
        public IList<J.Modifier> Modifiers { get;  set; } = modifiers;

        public MethodDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == Modifiers ? this : new MethodDeclaration(Id, Prefix, Markers, LeadingAnnotations, newModifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, MethodType);
        }
        private J.TypeParameters? _typeParameters = typeParameters;
        public TypeTree? ReturnTypeExpression { get;  set; } = returnTypeExpression;

        public MethodDeclaration WithReturnTypeExpression(TypeTree? newReturnTypeExpression)
        {
            return ReferenceEquals(newReturnTypeExpression, ReturnTypeExpression) ? this : new MethodDeclaration(Id, Prefix, Markers, LeadingAnnotations, Modifiers, _typeParameters, newReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, MethodType);
        }
        private IdentifierWithAnnotations _name = name;
        private JContainer<Statement> _parameters = parameters;
        public IList<Statement> Parameters => _parameters.GetElements();

        public MethodDeclaration WithParameters(IList<Statement> newParameters)
        {
            return Padding.WithParameters(JContainer<Statement>.WithElements(_parameters, newParameters));
        }
        private JContainer<NameTree>? _throws = throws;
        public IList<NameTree>? Throws => _throws?.GetElements();

        public MethodDeclaration WithThrows(IList<NameTree>? newThrows)
        {
            return Padding.WithThrows(JContainer<NameTree>.WithElementsNullable(_throws, newThrows));
        }
        public J.Block? Body { get;  set; } = body;

        public MethodDeclaration WithBody(J.Block? newBody)
        {
            return ReferenceEquals(newBody, Body) ? this : new MethodDeclaration(Id, Prefix, Markers, LeadingAnnotations, Modifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, newBody, _defaultValue, MethodType);
        }
        private JLeftPadded<Expression>? _defaultValue = defaultValue;
        public Expression? DefaultValue => _defaultValue?.Element;

        public MethodDeclaration WithDefaultValue(Expression? newDefaultValue)
        {
            return Padding.WithDefaultValue(JLeftPadded<Expression>.WithElement(_defaultValue, newDefaultValue));
        }
        public JavaType.Method? MethodType { get;  set; } = methodType;

        public MethodDeclaration WithMethodType(JavaType.Method? newMethodType)
        {
            return newMethodType == MethodType ? this : new MethodDeclaration(Id, Prefix, Markers, LeadingAnnotations, Modifiers, _typeParameters, ReturnTypeExpression, _name, _parameters, _throws, Body, _defaultValue, newMethodType);
        }
        public sealed record IdentifierWithAnnotations(
    J.Identifier identifier,
    IList<J.Annotation> annotations
        )
        {
            public J.Identifier Identifier { get;  set; } = identifier;

            public IdentifierWithAnnotations WithIdentifier(J.Identifier newIdentifier)
            {
                return ReferenceEquals(newIdentifier, Identifier) ? this : new IdentifierWithAnnotations(newIdentifier, Annotations);
            }
            public IList<J.Annotation> Annotations { get;  set; } = annotations;

            public IdentifierWithAnnotations WithAnnotations(IList<J.Annotation> newAnnotations)
            {
                return newAnnotations == Annotations ? this : new IdentifierWithAnnotations(Identifier, newAnnotations);
            }
        }
        public sealed record PaddingHelper(J.MethodDeclaration T)
        {
            public J.TypeParameters? TypeParameters { get => T._typeParameters;  set => T._typeParameters = value; }

            public J.MethodDeclaration WithTypeParameters(J.TypeParameters? newTypeParameters)
            {
                return TypeParameters == newTypeParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, newTypeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public J.MethodDeclaration.IdentifierWithAnnotations Name { get => T._name;  set => T._name = value; }

            public J.MethodDeclaration WithName(J.MethodDeclaration.IdentifierWithAnnotations newName)
            {
                return Name == newName ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, newName, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<Statement> Parameters { get => T._parameters;  set => T._parameters = value; }

            public J.MethodDeclaration WithParameters(JContainer<Statement> newParameters)
            {
                return Parameters == newParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, newParameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<NameTree>? Throws { get => T._throws;  set => T._throws = value; }

            public J.MethodDeclaration WithThrows(JContainer<NameTree>? newThrows)
            {
                return Throws == newThrows ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, newThrows, T.Body, T._defaultValue, T.MethodType);
            }

            public JLeftPadded<Expression>? DefaultValue { get => T._defaultValue;  set => T._defaultValue = value; }

            public J.MethodDeclaration WithDefaultValue(JLeftPadded<Expression>? newDefaultValue)
            {
                return DefaultValue == newDefaultValue ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, newDefaultValue, T.MethodType);
            }

        }

        public sealed record AnnotationsHelper(J.MethodDeclaration T)
        {
            public J.TypeParameters? TypeParameters { get => T._typeParameters;  set => T._typeParameters = value; }

            public J.MethodDeclaration WithTypeParameters(J.TypeParameters? newTypeParameters)
            {
                return TypeParameters == newTypeParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, newTypeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public J.MethodDeclaration.IdentifierWithAnnotations Name { get => T._name;  set => T._name = value; }

            public J.MethodDeclaration WithName(J.MethodDeclaration.IdentifierWithAnnotations newName)
            {
                return Name == newName ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, newName, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<Statement> Parameters { get => T._parameters;  set => T._parameters = value; }

            public J.MethodDeclaration WithParameters(JContainer<Statement> newParameters)
            {
                return Parameters == newParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, newParameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<NameTree>? Throws { get => T._throws;  set => T._throws = value; }

            public J.MethodDeclaration WithThrows(JContainer<NameTree>? newThrows)
            {
                return Throws == newThrows ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, newThrows, T.Body, T._defaultValue, T.MethodType);
            }

            public JLeftPadded<Expression>? DefaultValue { get => T._defaultValue;  set => T._defaultValue = value; }

            public J.MethodDeclaration WithDefaultValue(JLeftPadded<Expression>? newDefaultValue)
            {
                return DefaultValue == newDefaultValue ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, newDefaultValue, T.MethodType);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is MethodDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}