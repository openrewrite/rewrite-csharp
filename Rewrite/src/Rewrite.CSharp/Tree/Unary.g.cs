//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Unary(
    Guid id,
    Space prefix,
    Markers markers,
    JLeftPadded<Unary.Types> @operator,
    Expression expression,
    JavaType? type
    ) : Cs, Statement, Expression, TypedTree, Expression<Unary>, TypedTree<Unary>, J<Unary>, MutableTree<Unary>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitUnary(this, p);
        }

        public Guid Id => id;

        public Unary WithId(Guid newId)
        {
            return newId == id ? this : new Unary(newId, prefix, markers, _operator, expression, type);
        }
        public Space Prefix => prefix;

        public Unary WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new Unary(id, newPrefix, markers, _operator, expression, type);
        }
        public Markers Markers => markers;

        public Unary WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new Unary(id, prefix, newMarkers, _operator, expression, type);
        }
        private readonly JLeftPadded<Types> _operator = @operator;
        public Types Operator => _operator.Element;

        public Unary WithOperator(Types newOperator)
        {
            return Padding.WithOperator(_operator.WithElement(newOperator));
        }
        public Expression Expression => expression;

        public Unary WithExpression(Expression newExpression)
        {
            return ReferenceEquals(newExpression, expression) ? this : new Unary(id, prefix, markers, _operator, newExpression, type);
        }
        public JavaType? Type => type;

        public Unary WithType(JavaType? newType)
        {
            return newType == type ? this : new Unary(id, prefix, markers, _operator, expression, newType);
        }
        public enum Types
        {
            SuppressNullableWarning,
            PointerIndirection,
            AddressOf,
            FromEnd,
        }
        public sealed record PaddingHelper(Cs.Unary T)
        {
            public JLeftPadded<Cs.Unary.Types> Operator => T._operator;

            public Cs.Unary WithOperator(JLeftPadded<Cs.Unary.Types> newOperator)
            {
                return T._operator == newOperator ? T : new Cs.Unary(T.Id, T.Prefix, T.Markers, newOperator, T.Expression, T.Type);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Unary && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}