//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a parenthesized list of variable declarations used in deconstruction patterns.
    /// Example of simple deconstruction:
    /// <code>
    /// int (x, y) = point;
    /// </code>
    /// Example of nested deconstruction:
    /// <code>
    /// (int count, var (string name, int age)) = GetPersonDetails();
    ///             ^^^^^^^^^^^^^^^^^^^^^^^^^^ nested ParenthesizedVariable
    ///  ^^^^^^^^^ SingleVariableDesignation
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ParenthesizedVariableDesignation(
    Guid id,
    Space prefix,
    Markers markers,
    JContainer<VariableDesignation> variables,
    JavaType? type
    ) : Cs.VariableDesignation, Cs, Expression<ParenthesizedVariableDesignation>, J<ParenthesizedVariableDesignation>, MutableTree<ParenthesizedVariableDesignation>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitParenthesizedVariableDesignation(this, p);
        }

        public Guid Id { get;  set; } = id;

        public ParenthesizedVariableDesignation WithId(Guid newId)
        {
            return newId == Id ? this : new ParenthesizedVariableDesignation(newId, Prefix, Markers, _variables, Type);
        }
        public Space Prefix { get;  set; } = prefix;

        public ParenthesizedVariableDesignation WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new ParenthesizedVariableDesignation(Id, newPrefix, Markers, _variables, Type);
        }
        public Markers Markers { get;  set; } = markers;

        public ParenthesizedVariableDesignation WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new ParenthesizedVariableDesignation(Id, Prefix, newMarkers, _variables, Type);
        }
        private JContainer<Cs.VariableDesignation> _variables = variables;
        public IList<Cs.VariableDesignation> Variables => _variables.GetElements();

        public ParenthesizedVariableDesignation WithVariables(IList<Cs.VariableDesignation> newVariables)
        {
            return Padding.WithVariables(JContainer<Cs.VariableDesignation>.WithElements(_variables, newVariables));
        }
        public JavaType? Type { get;  set; } = type;

        public ParenthesizedVariableDesignation WithType(JavaType? newType)
        {
            return newType == Type ? this : new ParenthesizedVariableDesignation(Id, Prefix, Markers, _variables, newType);
        }
        public sealed record PaddingHelper(Cs.ParenthesizedVariableDesignation T)
        {
            public JContainer<Cs.VariableDesignation> Variables { get => T._variables;  set => T._variables = value; }

            public Cs.ParenthesizedVariableDesignation WithVariables(JContainer<Cs.VariableDesignation> newVariables)
            {
                return Variables == newVariables ? T : new Cs.ParenthesizedVariableDesignation(T.Id, T.Prefix, T.Markers, newVariables, T.Type);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ParenthesizedVariableDesignation && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}