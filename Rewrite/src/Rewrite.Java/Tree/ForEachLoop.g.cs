//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ForEachLoop(
    Guid id,
    Space prefix,
    Markers markers,
    ForEachLoop.Control loopControl,
    JRightPadded<Statement> body
    ) : J, Loop, J<ForEachLoop>, MutableTree<ForEachLoop>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitForEachLoop(this, p);
        }

        public Guid Id => id;

        public ForEachLoop WithId(Guid newId)
        {
            return newId == id ? this : new ForEachLoop(newId, prefix, markers, loopControl, _body);
        }
        public Space Prefix => prefix;

        public ForEachLoop WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new ForEachLoop(id, newPrefix, markers, loopControl, _body);
        }
        public Markers Markers => markers;

        public ForEachLoop WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new ForEachLoop(id, prefix, newMarkers, loopControl, _body);
        }
        public Control LoopControl => loopControl;

        public ForEachLoop WithLoopControl(Control newLoopControl)
        {
            return ReferenceEquals(newLoopControl, loopControl) ? this : new ForEachLoop(id, prefix, markers, newLoopControl, _body);
        }
        private readonly JRightPadded<Statement> _body = body;
        public Statement Body => _body.Element;

        public ForEachLoop WithBody(Statement newBody)
        {
            return Padding.WithBody(_body.WithElement(newBody));
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class Control(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<J.VariableDeclarations> variable,
    JRightPadded<Expression> iterable
        ) : J, J<Control>, MutableTree<Control>
        {
            [NonSerialized] private WeakReference<PaddingHelper>? _padding;

            public PaddingHelper Padding
            {
                get
                {
                    PaddingHelper? p;
                    if (_padding == null)
                    {
                        p = new PaddingHelper(this);
                        _padding = new WeakReference<PaddingHelper>(p);
                    }
                    else
                    {
                        _padding.TryGetTarget(out p);
                        if (p == null || p.T != this)
                        {
                            p = new PaddingHelper(this);
                            _padding.SetTarget(p);
                        }
                    }
                    return p;
                }
            }

            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitForEachControl(this, p);
            }

            public Guid Id => id;

            public Control WithId(Guid newId)
            {
                return newId == id ? this : new Control(newId, prefix, markers, _variable, _iterable);
            }
            public Space Prefix => prefix;

            public Control WithPrefix(Space newPrefix)
            {
                return newPrefix == prefix ? this : new Control(id, newPrefix, markers, _variable, _iterable);
            }
            public Markers Markers => markers;

            public Control WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, markers) ? this : new Control(id, prefix, newMarkers, _variable, _iterable);
            }
            private readonly JRightPadded<J.VariableDeclarations> _variable = variable;
            public J.VariableDeclarations Variable => _variable.Element;

            public Control WithVariable(J.VariableDeclarations newVariable)
            {
                return Padding.WithVariable(_variable.WithElement(newVariable));
            }
            private readonly JRightPadded<Expression> _iterable = iterable;
            public Expression Iterable => _iterable.Element;

            public Control WithIterable(Expression newIterable)
            {
                return Padding.WithIterable(_iterable.WithElement(newIterable));
            }
            public sealed record PaddingHelper(J.ForEachLoop.Control T)
            {
                public JRightPadded<J.VariableDeclarations> Variable => T._variable;

                public J.ForEachLoop.Control WithVariable(JRightPadded<J.VariableDeclarations> newVariable)
                {
                    return T._variable == newVariable ? T : new J.ForEachLoop.Control(T.Id, T.Prefix, T.Markers, newVariable, T._iterable);
                }

                public JRightPadded<Expression> Iterable => T._iterable;

                public J.ForEachLoop.Control WithIterable(JRightPadded<Expression> newIterable)
                {
                    return T._iterable == newIterable ? T : new J.ForEachLoop.Control(T.Id, T.Prefix, T.Markers, T._variable, newIterable);
                }

            }

            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Control && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        public sealed record PaddingHelper(J.ForEachLoop T)
        {
            public JRightPadded<Statement> Body => T._body;

            public J.ForEachLoop WithBody(JRightPadded<Statement> newBody)
            {
                return T._body == newBody ? T : new J.ForEachLoop(T.Id, T.Prefix, T.Markers, T.LoopControl, newBody);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ForEachLoop && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}