//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# slice pattern that matches sequences with arbitrary elements between fixed elements.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple slice pattern
    ///     if (array is [1, .., 5])
    ///     // Multiple elements before and after
    ///     if (array is [1, 2, .., 8, 9])
    ///     // Just prefix elements
    ///     if (array is [1, 2, ..])
    ///     // Just suffix elements
    ///     if (array is [.., 8, 9])
    ///     // In switch expressions
    ///     return array switch {
    ///         [var first, .., var last] =&gt; $"{first}..{last}",
    ///         [var single] =&gt; single.ToString(),
    ///         [] =&gt; "empty"
    ///     };
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class SlicePattern(
    Guid id,
    Space prefix,
    Markers markers
    ) : Cs.Pattern, Expression<SlicePattern>, J<SlicePattern>, MutableTree<SlicePattern>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitSlicePattern(this, p);
        }

        public Guid Id => id;

        public SlicePattern WithId(Guid newId)
        {
            return newId == id ? this : new SlicePattern(newId, prefix, markers);
        }
        public Space Prefix => prefix;

        public SlicePattern WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new SlicePattern(id, newPrefix, markers);
        }
        public Markers Markers => markers;

        public SlicePattern WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new SlicePattern(id, prefix, newMarkers);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is SlicePattern && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}