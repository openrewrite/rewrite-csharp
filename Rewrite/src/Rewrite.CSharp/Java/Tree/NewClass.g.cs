//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class NewClass(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<Expression>? enclosing,
    Space @new,
    TypeTree? clazz,
    JContainer<Expression> arguments,
    Block? body,
    JavaType.Method? constructorType
    ) : J, Statement, TypedTree, MethodCall, Expression<NewClass>, TypedTree<NewClass>, J<NewClass>, MutableTree<NewClass>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitNewClass(this, p);
        }

        public Guid Id { get;  set; } = id;

        public NewClass WithId(Guid newId)
        {
            return newId == Id ? this : new NewClass(newId, Prefix, Markers, _enclosing, New, Clazz, _arguments, Body, ConstructorType);
        }
        public Space Prefix { get;  set; } = prefix;

        public NewClass WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new NewClass(Id, newPrefix, Markers, _enclosing, New, Clazz, _arguments, Body, ConstructorType);
        }
        public Markers Markers { get;  set; } = markers;

        public NewClass WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new NewClass(Id, Prefix, newMarkers, _enclosing, New, Clazz, _arguments, Body, ConstructorType);
        }
        private JRightPadded<Expression>? _enclosing = enclosing;
        public Expression? Enclosing => _enclosing?.Element;

        public NewClass WithEnclosing(Expression? newEnclosing)
        {
            return Padding.WithEnclosing(JRightPadded<Expression>.WithElement(_enclosing, newEnclosing));
        }
        public Space New { get;  set; } = @new;

        public NewClass WithNew(Space newNew)
        {
            return newNew == New ? this : new NewClass(Id, Prefix, Markers, _enclosing, newNew, Clazz, _arguments, Body, ConstructorType);
        }
        public TypeTree? Clazz { get;  set; } = clazz;

        public NewClass WithClazz(TypeTree? newClazz)
        {
            return ReferenceEquals(newClazz, Clazz) ? this : new NewClass(Id, Prefix, Markers, _enclosing, New, newClazz, _arguments, Body, ConstructorType);
        }
        private JContainer<Expression> _arguments = arguments;
        public IList<Expression> Arguments => _arguments.GetElements();

        public NewClass WithArguments(IList<Expression> newArguments)
        {
            return Padding.WithArguments(JContainer<Expression>.WithElements(_arguments, newArguments));
        }
        public J.Block? Body { get;  set; } = body;

        public NewClass WithBody(J.Block? newBody)
        {
            return ReferenceEquals(newBody, Body) ? this : new NewClass(Id, Prefix, Markers, _enclosing, New, Clazz, _arguments, newBody, ConstructorType);
        }
        public JavaType.Method? ConstructorType { get;  set; } = constructorType;

        public NewClass WithConstructorType(JavaType.Method? newConstructorType)
        {
            return newConstructorType == ConstructorType ? this : new NewClass(Id, Prefix, Markers, _enclosing, New, Clazz, _arguments, Body, newConstructorType);
        }
        public sealed record PaddingHelper(J.NewClass T)
        {
            public JRightPadded<Expression>? Enclosing { get => T._enclosing;  set => T._enclosing = value; }

            public J.NewClass WithEnclosing(JRightPadded<Expression>? newEnclosing)
            {
                return Enclosing == newEnclosing ? T : new J.NewClass(T.Id, T.Prefix, T.Markers, newEnclosing, T.New, T.Clazz, T._arguments, T.Body, T.ConstructorType);
            }

            public JContainer<Expression> Arguments { get => T._arguments;  set => T._arguments = value; }

            public J.NewClass WithArguments(JContainer<Expression> newArguments)
            {
                return Arguments == newArguments ? T : new J.NewClass(T.Id, T.Prefix, T.Markers, T._enclosing, T.New, T.Clazz, newArguments, T.Body, T.ConstructorType);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is NewClass && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}