//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# binary pattern that combines two patterns with a logical operator.
    /// The binary pattern is used in pattern matching to create compound pattern tests.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Using 'and' to combine patterns
    ///     if (obj is string { Length: &gt; 0 } and not null)
    ///     // Using 'or' to combine patterns
    ///     if (number is &gt; 0 or &lt; -10)
    ///     // Combining type patterns
    ///     if (obj is IList and not string)
    ///     // Complex combinations
    ///     if (value is &gt;= 0 and &lt;= 100)
    ///     // Multiple binary patterns
    ///     if (obj is IEnumerable and not string and not int[])
    ///     // In switch expressions
    ///     return size switch {
    ///         &lt; 0 or &gt; 100 =&gt; "Invalid",
    ///         &gt;= 0 and &lt;= 50 =&gt; "Small",
    ///         _ =&gt; "Large"
    ///     };
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class BinaryPattern(
    Guid id,
    Space prefix,
    Markers markers,
    Pattern left,
    JLeftPadded<BinaryPattern.OperatorType> @operator,
    Pattern right
    ) : Cs.Pattern    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitBinaryPattern(this, p);
        }

        public Guid Id { get;  set; } = id;

        public BinaryPattern WithId(Guid newId)
        {
            return newId == Id ? this : new BinaryPattern(newId, Prefix, Markers, Left, _operator, Right);
        }
        public Space Prefix { get;  set; } = prefix;

        public BinaryPattern WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new BinaryPattern(Id, newPrefix, Markers, Left, _operator, Right);
        }
        public Markers Markers { get;  set; } = markers;

        public BinaryPattern WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new BinaryPattern(Id, Prefix, newMarkers, Left, _operator, Right);
        }
        public Cs.Pattern Left { get;  set; } = left;

        public BinaryPattern WithLeft(Cs.Pattern newLeft)
        {
            return ReferenceEquals(newLeft, Left) ? this : new BinaryPattern(Id, Prefix, Markers, newLeft, _operator, Right);
        }
        private JLeftPadded<OperatorType> _operator = @operator;
        public OperatorType Operator => _operator.Element;

        public BinaryPattern WithOperator(OperatorType newOperator)
        {
            return Padding.WithOperator(_operator.WithElement(newOperator));
        }
        public Cs.Pattern Right { get;  set; } = right;

        public BinaryPattern WithRight(Cs.Pattern newRight)
        {
            return ReferenceEquals(newRight, Right) ? this : new BinaryPattern(Id, Prefix, Markers, Left, _operator, newRight);
        }
        public enum OperatorType
        {
            And,
            Or,
        }
        public sealed record PaddingHelper(Cs.BinaryPattern T)
        {
            public JLeftPadded<Cs.BinaryPattern.OperatorType> Operator { get => T._operator;  set => T._operator = value; }

            public Cs.BinaryPattern WithOperator(JLeftPadded<Cs.BinaryPattern.OperatorType> newOperator)
            {
                return Operator == newOperator ? T : new Cs.BinaryPattern(T.Id, T.Prefix, T.Markers, T.Left, newOperator, T.Right);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is BinaryPattern && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}