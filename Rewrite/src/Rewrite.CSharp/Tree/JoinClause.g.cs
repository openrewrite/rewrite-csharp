//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# join clause in a LINQ query expression.
    /// <br/>
    /// For example:
    /// <code>
    /// // Simple join
    /// join customer in customers on order.CustomerId equals customer.Id
    /// // Join with into (group join)
    /// join category in categories
    ///   on product.CategoryId equals category.Id
    ///   into productCategories
    /// // Multiple joins
    /// from order in orders
    /// join customer in customers
    ///   on order.CustomerId equals customer.Id
    /// join employee in employees
    ///   on order.EmployeeId equals employee.Id
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class JoinClause(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<J.Identifier> identifier,
    JRightPadded<Expression> inExpression,
    JRightPadded<Expression> leftExpression,
    Expression rightExpression,
    JLeftPadded<JoinIntoClause>? into
    ) : Cs, Cs.QueryClause, J<JoinClause>, MutableTree<JoinClause>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitJoinClause(this, p);
        }

        public Guid Id { get;  set; } = id;

        public JoinClause WithId(Guid newId)
        {
            return newId == Id ? this : new JoinClause(newId, Prefix, Markers, _identifier, _inExpression, _leftExpression, RightExpression, _into);
        }
        public Space Prefix { get;  set; } = prefix;

        public JoinClause WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new JoinClause(Id, newPrefix, Markers, _identifier, _inExpression, _leftExpression, RightExpression, _into);
        }
        public Markers Markers { get;  set; } = markers;

        public JoinClause WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new JoinClause(Id, Prefix, newMarkers, _identifier, _inExpression, _leftExpression, RightExpression, _into);
        }
        private JRightPadded<J.Identifier> _identifier = identifier;
        public J.Identifier Identifier => _identifier.Element;

        public JoinClause WithIdentifier(J.Identifier newIdentifier)
        {
            return Padding.WithIdentifier(_identifier.WithElement(newIdentifier));
        }
        private JRightPadded<Expression> _inExpression = inExpression;
        public Expression InExpression => _inExpression.Element;

        public JoinClause WithInExpression(Expression newInExpression)
        {
            return Padding.WithInExpression(_inExpression.WithElement(newInExpression));
        }
        private JRightPadded<Expression> _leftExpression = leftExpression;
        public Expression LeftExpression => _leftExpression.Element;

        public JoinClause WithLeftExpression(Expression newLeftExpression)
        {
            return Padding.WithLeftExpression(_leftExpression.WithElement(newLeftExpression));
        }
        public Expression RightExpression { get;  set; } = rightExpression;

        public JoinClause WithRightExpression(Expression newRightExpression)
        {
            return ReferenceEquals(newRightExpression, RightExpression) ? this : new JoinClause(Id, Prefix, Markers, _identifier, _inExpression, _leftExpression, newRightExpression, _into);
        }
        private JLeftPadded<Cs.JoinIntoClause>? _into = into;
        public Cs.JoinIntoClause? Into => _into?.Element;

        public JoinClause WithInto(Cs.JoinIntoClause? newInto)
        {
            return Padding.WithInto(JLeftPadded<Cs.JoinIntoClause>.WithElement(_into, newInto));
        }
        public sealed record PaddingHelper(Cs.JoinClause T)
        {
            public JRightPadded<J.Identifier> Identifier { get => T._identifier;  set => T._identifier = value; }

            public Cs.JoinClause WithIdentifier(JRightPadded<J.Identifier> newIdentifier)
            {
                return Identifier == newIdentifier ? T : new Cs.JoinClause(T.Id, T.Prefix, T.Markers, newIdentifier, T._inExpression, T._leftExpression, T.RightExpression, T._into);
            }

            public JRightPadded<Expression> InExpression { get => T._inExpression;  set => T._inExpression = value; }

            public Cs.JoinClause WithInExpression(JRightPadded<Expression> newInExpression)
            {
                return InExpression == newInExpression ? T : new Cs.JoinClause(T.Id, T.Prefix, T.Markers, T._identifier, newInExpression, T._leftExpression, T.RightExpression, T._into);
            }

            public JRightPadded<Expression> LeftExpression { get => T._leftExpression;  set => T._leftExpression = value; }

            public Cs.JoinClause WithLeftExpression(JRightPadded<Expression> newLeftExpression)
            {
                return LeftExpression == newLeftExpression ? T : new Cs.JoinClause(T.Id, T.Prefix, T.Markers, T._identifier, T._inExpression, newLeftExpression, T.RightExpression, T._into);
            }

            public JLeftPadded<Cs.JoinIntoClause>? Into { get => T._into;  set => T._into = value; }

            public Cs.JoinClause WithInto(JLeftPadded<Cs.JoinIntoClause>? newInto)
            {
                return Into == newInto ? T : new Cs.JoinClause(T.Id, T.Prefix, T.Markers, T._identifier, T._inExpression, T._leftExpression, T.RightExpression, newInto);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is JoinClause && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}