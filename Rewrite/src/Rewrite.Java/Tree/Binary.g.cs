//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Binary(
    Guid id,
    Space prefix,
    Markers markers,
    Expression left,
    JLeftPadded<Binary.Type> @operator,
    Expression right,
    JavaType? javaType
    ) : J, Expression, TypedTree, MutableTree<Binary>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitBinary(this, p);
        }

        public Guid Id => id;

        public Binary WithId(Guid newId)
        {
            return newId == id ? this : new Binary(newId, prefix, markers, left, _operator, right, javaType);
        }
        public Space Prefix => prefix;

        public Binary WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new Binary(id, newPrefix, markers, left, _operator, right, javaType);
        }
        public Markers Markers => markers;

        public Binary WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new Binary(id, prefix, newMarkers, left, _operator, right, javaType);
        }
        public Expression Left => left;

        public Binary WithLeft(Expression newLeft)
        {
            return ReferenceEquals(newLeft, left) ? this : new Binary(id, prefix, markers, newLeft, _operator, right, javaType);
        }
        private readonly JLeftPadded<Type> _operator = @operator;
        public Type Operator => _operator.Element;

        public Binary WithOperator(Type newOperator)
        {
            return Padding.WithOperator(_operator.WithElement(newOperator));
        }
        public Expression Right => right;

        public Binary WithRight(Expression newRight)
        {
            return ReferenceEquals(newRight, right) ? this : new Binary(id, prefix, markers, left, _operator, newRight, javaType);
        }
        public JavaType? JavaType => javaType;

        public Binary WithJavaType(JavaType? newJavaType)
        {
            return newJavaType == javaType ? this : new Binary(id, prefix, markers, left, _operator, right, newJavaType);
        }
        public enum Type
        {
            Addition,
            Subtraction,
            Multiplication,
            Division,
            Modulo,
            LessThan,
            GreaterThan,
            LessThanOrEqual,
            GreaterThanOrEqual,
            Equal,
            NotEqual,
            BitAnd,
            BitOr,
            BitXor,
            LeftShift,
            RightShift,
            UnsignedRightShift,
            Or,
            And,
        }
        public sealed record PaddingHelper(J.Binary T)
        {
            public JLeftPadded<J.Binary.Type> Operator => T._operator;

            public J.Binary WithOperator(JLeftPadded<J.Binary.Type> newOperator)
            {
                return T._operator == newOperator ? T : new J.Binary(T.Id, T.Prefix, T.Markers, T.Left, newOperator, T.Right, T.JavaType);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Binary && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}