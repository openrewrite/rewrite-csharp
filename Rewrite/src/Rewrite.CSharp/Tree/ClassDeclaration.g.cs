//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ClassDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<AttributeList> attributeList,
    IList<J.Modifier> modifiers,
    J.ClassDeclaration.Kind kind,
    J.Identifier name,
    JContainer<TypeParameter>? typeParameters,
    JContainer<Statement>? primaryConstructor,
    JLeftPadded<TypeTree>? extendings,
    JContainer<TypeTree>? implementings,
    J.Block? body,
    JContainer<TypeParameterConstraintClause>? typeParameterConstraintClauses,
    JavaType.FullyQualified? type
    ) : Cs, Statement, TypedTree, TypedTree<ClassDeclaration>, J<ClassDeclaration>, MutableTree<ClassDeclaration>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitClassDeclaration(this, p);
        }

        public Guid Id => id;

        public ClassDeclaration WithId(Guid newId)
        {
            return newId == id ? this : new ClassDeclaration(newId, prefix, markers, attributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        public Space Prefix => prefix;

        public ClassDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new ClassDeclaration(id, newPrefix, markers, attributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        public Markers Markers => markers;

        public ClassDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new ClassDeclaration(id, prefix, newMarkers, attributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        public IList<Cs.AttributeList> AttributeList => attributeList;

        public ClassDeclaration WithAttributeList(IList<Cs.AttributeList> newAttributeList)
        {
            return newAttributeList == attributeList ? this : new ClassDeclaration(id, prefix, markers, newAttributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        public IList<J.Modifier> Modifiers => modifiers;

        public ClassDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == modifiers ? this : new ClassDeclaration(id, prefix, markers, attributeList, newModifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        private readonly J.ClassDeclaration.Kind _kind = kind;

        public ClassDeclaration WithKind(J.ClassDeclaration.Kind newKind)
        {
            return ReferenceEquals(newKind, _kind) ? this : new ClassDeclaration(id, prefix, markers, attributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        public J.Identifier Name => name;

        public ClassDeclaration WithName(J.Identifier newName)
        {
            return ReferenceEquals(newName, name) ? this : new ClassDeclaration(id, prefix, markers, attributeList, modifiers, _kind, newName, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, type);
        }
        private readonly JContainer<Cs.TypeParameter>? _typeParameters = typeParameters;
        public IList<Cs.TypeParameter>? TypeParameters => _typeParameters?.GetElements();

        public ClassDeclaration WithTypeParameters(IList<Cs.TypeParameter>? newTypeParameters)
        {
            return Padding.WithTypeParameters(JContainer<Cs.TypeParameter>.WithElementsNullable(_typeParameters, newTypeParameters));
        }
        private readonly JContainer<Statement>? _primaryConstructor = primaryConstructor;
        public IList<Statement>? PrimaryConstructor => _primaryConstructor?.GetElements();

        public ClassDeclaration WithPrimaryConstructor(IList<Statement>? newPrimaryConstructor)
        {
            return Padding.WithPrimaryConstructor(JContainer<Statement>.WithElementsNullable(_primaryConstructor, newPrimaryConstructor));
        }
        private readonly JLeftPadded<TypeTree>? _extendings = extendings;
        public TypeTree? Extendings => _extendings?.Element;

        public ClassDeclaration WithExtendings(TypeTree? newExtendings)
        {
            return Padding.WithExtendings(JLeftPadded<TypeTree>.WithElement(_extendings, newExtendings));
        }
        private readonly JContainer<TypeTree>? _implementings = implementings;
        public IList<TypeTree>? Implementings => _implementings?.GetElements();

        public ClassDeclaration WithImplementings(IList<TypeTree>? newImplementings)
        {
            return Padding.WithImplementings(JContainer<TypeTree>.WithElementsNullable(_implementings, newImplementings));
        }
        public J.Block? Body => body;

        public ClassDeclaration WithBody(J.Block? newBody)
        {
            return ReferenceEquals(newBody, body) ? this : new ClassDeclaration(id, prefix, markers, attributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, newBody, _typeParameterConstraintClauses, type);
        }
        private readonly JContainer<Cs.TypeParameterConstraintClause>? _typeParameterConstraintClauses = typeParameterConstraintClauses;
        public IList<Cs.TypeParameterConstraintClause>? TypeParameterConstraintClauses => _typeParameterConstraintClauses?.GetElements();

        public ClassDeclaration WithTypeParameterConstraintClauses(IList<Cs.TypeParameterConstraintClause>? newTypeParameterConstraintClauses)
        {
            return Padding.WithTypeParameterConstraintClauses(JContainer<Cs.TypeParameterConstraintClause>.WithElementsNullable(_typeParameterConstraintClauses, newTypeParameterConstraintClauses));
        }
        public JavaType.FullyQualified? Type => type;

        public ClassDeclaration WithType(JavaType.FullyQualified? newType)
        {
            return newType == type ? this : new ClassDeclaration(id, prefix, markers, attributeList, modifiers, _kind, name, _typeParameters, _primaryConstructor, _extendings, _implementings, body, _typeParameterConstraintClauses, newType);
        }
        public sealed record PaddingHelper(Cs.ClassDeclaration T)
        {
            public J.ClassDeclaration.Kind Kind => T._kind;

            public Cs.ClassDeclaration WithKind(J.ClassDeclaration.Kind newKind)
            {
                return T._kind == newKind ? T : new Cs.ClassDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeList, T.Modifiers, newKind, T.Name, T._typeParameters, T._primaryConstructor, T._extendings, T._implementings, T.Body, T._typeParameterConstraintClauses, T.Type);
            }

            public JContainer<Cs.TypeParameter>? TypeParameters => T._typeParameters;

            public Cs.ClassDeclaration WithTypeParameters(JContainer<Cs.TypeParameter>? newTypeParameters)
            {
                return T._typeParameters == newTypeParameters ? T : new Cs.ClassDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeList, T.Modifiers, T._kind, T.Name, newTypeParameters, T._primaryConstructor, T._extendings, T._implementings, T.Body, T._typeParameterConstraintClauses, T.Type);
            }

            public JContainer<Statement>? PrimaryConstructor => T._primaryConstructor;

            public Cs.ClassDeclaration WithPrimaryConstructor(JContainer<Statement>? newPrimaryConstructor)
            {
                return T._primaryConstructor == newPrimaryConstructor ? T : new Cs.ClassDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeList, T.Modifiers, T._kind, T.Name, T._typeParameters, newPrimaryConstructor, T._extendings, T._implementings, T.Body, T._typeParameterConstraintClauses, T.Type);
            }

            public JLeftPadded<TypeTree>? Extendings => T._extendings;

            public Cs.ClassDeclaration WithExtendings(JLeftPadded<TypeTree>? newExtendings)
            {
                return T._extendings == newExtendings ? T : new Cs.ClassDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeList, T.Modifiers, T._kind, T.Name, T._typeParameters, T._primaryConstructor, newExtendings, T._implementings, T.Body, T._typeParameterConstraintClauses, T.Type);
            }

            public JContainer<TypeTree>? Implementings => T._implementings;

            public Cs.ClassDeclaration WithImplementings(JContainer<TypeTree>? newImplementings)
            {
                return T._implementings == newImplementings ? T : new Cs.ClassDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeList, T.Modifiers, T._kind, T.Name, T._typeParameters, T._primaryConstructor, T._extendings, newImplementings, T.Body, T._typeParameterConstraintClauses, T.Type);
            }

            public JContainer<Cs.TypeParameterConstraintClause>? TypeParameterConstraintClauses => T._typeParameterConstraintClauses;

            public Cs.ClassDeclaration WithTypeParameterConstraintClauses(JContainer<Cs.TypeParameterConstraintClause>? newTypeParameterConstraintClauses)
            {
                return T._typeParameterConstraintClauses == newTypeParameterConstraintClauses ? T : new Cs.ClassDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeList, T.Modifiers, T._kind, T.Name, T._typeParameters, T._primaryConstructor, T._extendings, T._implementings, T.Body, newTypeParameterConstraintClauses, T.Type);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ClassDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}