//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ForEachVariableLoop(
    Guid id,
    Space prefix,
    Markers markers,
    ForEachVariableLoop.Control controlElement,
    JRightPadded<Statement> body
    ) : Cs, Loop, J<ForEachVariableLoop>, MutableTree<ForEachVariableLoop>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitForEachVariableLoop(this, p);
        }

        public Guid Id { get;  set; } = id;

        public ForEachVariableLoop WithId(Guid newId)
        {
            return newId == Id ? this : new ForEachVariableLoop(newId, Prefix, Markers, ControlElement, _body);
        }
        public Space Prefix { get;  set; } = prefix;

        public ForEachVariableLoop WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new ForEachVariableLoop(Id, newPrefix, Markers, ControlElement, _body);
        }
        public Markers Markers { get;  set; } = markers;

        public ForEachVariableLoop WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new ForEachVariableLoop(Id, Prefix, newMarkers, ControlElement, _body);
        }
        public Control ControlElement { get;  set; } = controlElement;

        public ForEachVariableLoop WithControlElement(Control newControlElement)
        {
            return ReferenceEquals(newControlElement, ControlElement) ? this : new ForEachVariableLoop(Id, Prefix, Markers, newControlElement, _body);
        }
        private JRightPadded<Statement> _body = body;
        public Statement Body => _body.Element;

        public ForEachVariableLoop WithBody(Statement newBody)
        {
            return Padding.WithBody(_body.WithElement(newBody));
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class Control(
    Guid id,
    Space prefix,
    Markers markers,
    JRightPadded<Expression> variable,
    JRightPadded<Expression> iterable
        ) : Cs, J<Control>, MutableTree<Control>
        {
            [NonSerialized] private WeakReference<PaddingHelper>? _padding;

            public PaddingHelper Padding
            {
                get
                {
                    PaddingHelper? p;
                    if (_padding == null)
                    {
                        p = new PaddingHelper(this);
                        _padding = new WeakReference<PaddingHelper>(p);
                    }
                    else
                    {
                        _padding.TryGetTarget(out p);
                        if (p == null || p.T != this)
                        {
                            p = new PaddingHelper(this);
                            _padding.SetTarget(p);
                        }
                    }
                    return p;
                }
            }

            public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
            {
                return v.VisitForEachVariableLoopControl(this, p);
            }

            public Guid Id { get;  set; } = id;

            public Control WithId(Guid newId)
            {
                return newId == Id ? this : new Control(newId, Prefix, Markers, _variable, _iterable);
            }
            public Space Prefix { get;  set; } = prefix;

            public Control WithPrefix(Space newPrefix)
            {
                return newPrefix == Prefix ? this : new Control(Id, newPrefix, Markers, _variable, _iterable);
            }
            public Markers Markers { get;  set; } = markers;

            public Control WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, Markers) ? this : new Control(Id, Prefix, newMarkers, _variable, _iterable);
            }
            private JRightPadded<Expression> _variable = variable;
            public Expression Variable => _variable.Element;

            public Control WithVariable(Expression newVariable)
            {
                return Padding.WithVariable(_variable.WithElement(newVariable));
            }
            private JRightPadded<Expression> _iterable = iterable;
            public Expression Iterable => _iterable.Element;

            public Control WithIterable(Expression newIterable)
            {
                return Padding.WithIterable(_iterable.WithElement(newIterable));
            }
            public sealed record PaddingHelper(Cs.ForEachVariableLoop.Control T)
            {
                public JRightPadded<Expression> Variable { get => T._variable;  set => T._variable = value; }

                public Cs.ForEachVariableLoop.Control WithVariable(JRightPadded<Expression> newVariable)
                {
                    return Variable == newVariable ? T : new Cs.ForEachVariableLoop.Control(T.Id, T.Prefix, T.Markers, newVariable, T._iterable);
                }

                public JRightPadded<Expression> Iterable { get => T._iterable;  set => T._iterable = value; }

                public Cs.ForEachVariableLoop.Control WithIterable(JRightPadded<Expression> newIterable)
                {
                    return Iterable == newIterable ? T : new Cs.ForEachVariableLoop.Control(T.Id, T.Prefix, T.Markers, T._variable, newIterable);
                }

            }

            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Control && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        public sealed record PaddingHelper(Cs.ForEachVariableLoop T)
        {
            public JRightPadded<Statement> Body { get => T._body;  set => T._body = value; }

            public Cs.ForEachVariableLoop WithBody(JRightPadded<Statement> newBody)
            {
                return Body == newBody ? T : new Cs.ForEachVariableLoop(T.Id, T.Prefix, T.Markers, T.ControlElement, newBody);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ForEachVariableLoop && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}