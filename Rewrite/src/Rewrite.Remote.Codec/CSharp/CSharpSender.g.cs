//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using Rewrite.Remote;
using Rewrite.RewriteCSharp;
using Rewrite.RewriteJava;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.Remote.Codec.CSharp;

using Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
public record CSharpSender : Sender
{
    public void Send<T>(T after, T? before, SenderContext ctx) where T : Core.Tree {
        var visitor = new Visitor();
        visitor.Visit(after, ctx.Fork(visitor, before));
    }

    private class Visitor : CSharpVisitor<SenderContext>
    {
        public override Cs Visit(Tree? tree, SenderContext ctx)
        {
            Cursor = new Cursor(Cursor, tree ?? throw new InvalidOperationException($"Parameter {nameof(tree)} should not be null"));
            ctx.SendNode(tree, x => x, ctx.SendTree);
            Cursor = Cursor.Parent!;

            return (Cs) tree;
        }

        public override J VisitCompilationUnit(Cs.CompilationUnit compilationUnit, SenderContext ctx)
        {
            ctx.SendValue(compilationUnit, v => v.Id);
            ctx.SendNode(compilationUnit, v => v.Prefix, SendSpace);
            ctx.SendNode(compilationUnit, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(compilationUnit, v => v.SourcePath);
            ctx.SendTypedValue(compilationUnit, v => v.FileAttributes);
            ctx.SendValue(compilationUnit, v => v.CharsetName);
            ctx.SendValue(compilationUnit, v => v.CharsetBomMarked);
            ctx.SendTypedValue(compilationUnit, v => v.Checksum);
            ctx.SendNodes(compilationUnit, v => v.Padding.Externs, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(compilationUnit, v => v.Padding.Usings, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(compilationUnit, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNodes(compilationUnit, v => v.Padding.Members, SendRightPadded, t => t.Element.Id);
            ctx.SendNode(compilationUnit, v => v.Eof, SendSpace);
            return compilationUnit;
        }

        public override J VisitRefExpression(Cs.RefExpression refExpression, SenderContext ctx)
        {
            ctx.SendValue(refExpression, v => v.Id);
            ctx.SendNode(refExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(refExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(refExpression, v => v.Expression, ctx.SendTree);
            return refExpression;
        }

        public override J VisitPointerType(Cs.PointerType pointerType, SenderContext ctx)
        {
            ctx.SendValue(pointerType, v => v.Id);
            ctx.SendNode(pointerType, v => v.Prefix, SendSpace);
            ctx.SendNode(pointerType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(pointerType, v => v.Padding.ElementType, SendRightPadded);
            return pointerType;
        }

        public override J VisitRefType(Cs.RefType refType, SenderContext ctx)
        {
            ctx.SendValue(refType, v => v.Id);
            ctx.SendNode(refType, v => v.Prefix, SendSpace);
            ctx.SendNode(refType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(refType, v => v.ReadonlyKeyword, ctx.SendTree);
            ctx.SendNode(refType, v => v.TypeIdentifier, ctx.SendTree);
            ctx.SendTypedValue(refType, v => v.Type);
            return refType;
        }

        public override J VisitForEachVariableLoop(Cs.ForEachVariableLoop forEachVariableLoop, SenderContext ctx)
        {
            ctx.SendValue(forEachVariableLoop, v => v.Id);
            ctx.SendNode(forEachVariableLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(forEachVariableLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(forEachVariableLoop, v => v.ControlElement, ctx.SendTree);
            ctx.SendNode(forEachVariableLoop, v => v.Padding.Body, SendRightPadded);
            return forEachVariableLoop;
        }

        public override J VisitForEachVariableLoopControl(Cs.ForEachVariableLoop.Control control, SenderContext ctx)
        {
            ctx.SendValue(control, v => v.Id);
            ctx.SendNode(control, v => v.Prefix, SendSpace);
            ctx.SendNode(control, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(control, v => v.Padding.Variable, SendRightPadded);
            ctx.SendNode(control, v => v.Padding.Iterable, SendRightPadded);
            return control;
        }

        public override J VisitArgument(Cs.Argument argument, SenderContext ctx)
        {
            ctx.SendValue(argument, v => v.Id);
            ctx.SendNode(argument, v => v.Prefix, SendSpace);
            ctx.SendNode(argument, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(argument, v => v.Padding.NameColumn, SendRightPadded);
            ctx.SendNode(argument, v => v.RefKindKeyword, ctx.SendTree);
            ctx.SendNode(argument, v => v.Expression, ctx.SendTree);
            return argument;
        }

        public override J VisitAnnotatedStatement(Cs.AnnotatedStatement annotatedStatement, SenderContext ctx)
        {
            ctx.SendValue(annotatedStatement, v => v.Id);
            ctx.SendNode(annotatedStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(annotatedStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(annotatedStatement, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNode(annotatedStatement, v => v.Statement, ctx.SendTree);
            return annotatedStatement;
        }

        public override J VisitArrayRankSpecifier(Cs.ArrayRankSpecifier arrayRankSpecifier, SenderContext ctx)
        {
            ctx.SendValue(arrayRankSpecifier, v => v.Id);
            ctx.SendNode(arrayRankSpecifier, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayRankSpecifier, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayRankSpecifier, v => v.Padding.Sizes, SendContainer);
            return arrayRankSpecifier;
        }

        public override J VisitAssignmentOperation(Cs.AssignmentOperation assignmentOperation, SenderContext ctx)
        {
            ctx.SendValue(assignmentOperation, v => v.Id);
            ctx.SendNode(assignmentOperation, v => v.Prefix, SendSpace);
            ctx.SendNode(assignmentOperation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assignmentOperation, v => v.Variable, ctx.SendTree);
            ctx.SendNode(assignmentOperation, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(assignmentOperation, v => v.Assignment, ctx.SendTree);
            ctx.SendTypedValue(assignmentOperation, v => v.Type);
            return assignmentOperation;
        }

        public override J VisitAttributeList(Cs.AttributeList attributeList, SenderContext ctx)
        {
            ctx.SendValue(attributeList, v => v.Id);
            ctx.SendNode(attributeList, v => v.Prefix, SendSpace);
            ctx.SendNode(attributeList, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(attributeList, v => v.Padding.Target, SendRightPadded);
            ctx.SendNodes(attributeList, v => v.Padding.Attributes, SendRightPadded, t => t.Element.Id);
            return attributeList;
        }

        public override J VisitAwaitExpression(Cs.AwaitExpression awaitExpression, SenderContext ctx)
        {
            ctx.SendValue(awaitExpression, v => v.Id);
            ctx.SendNode(awaitExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(awaitExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(awaitExpression, v => v.Expression, ctx.SendTree);
            ctx.SendTypedValue(awaitExpression, v => v.Type);
            return awaitExpression;
        }

        public override J VisitStackAllocExpression(Cs.StackAllocExpression stackAllocExpression, SenderContext ctx)
        {
            ctx.SendValue(stackAllocExpression, v => v.Id);
            ctx.SendNode(stackAllocExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(stackAllocExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(stackAllocExpression, v => v.Expression, ctx.SendTree);
            return stackAllocExpression;
        }

        public override J VisitGotoStatement(Cs.GotoStatement gotoStatement, SenderContext ctx)
        {
            ctx.SendValue(gotoStatement, v => v.Id);
            ctx.SendNode(gotoStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(gotoStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(gotoStatement, v => v.CaseOrDefaultKeyword, ctx.SendTree);
            ctx.SendNode(gotoStatement, v => v.Target, ctx.SendTree);
            return gotoStatement;
        }

        public override J VisitEventDeclaration(Cs.EventDeclaration eventDeclaration, SenderContext ctx)
        {
            ctx.SendValue(eventDeclaration, v => v.Id);
            ctx.SendNode(eventDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(eventDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(eventDeclaration, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNodes(eventDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(eventDeclaration, v => v.Padding.TypeExpression, SendLeftPadded);
            ctx.SendNode(eventDeclaration, v => v.Padding.InterfaceSpecifier, SendRightPadded);
            ctx.SendNode(eventDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(eventDeclaration, v => v.Padding.Accessors, SendContainer);
            return eventDeclaration;
        }

        public override J VisitBinary(Cs.Binary binary, SenderContext ctx)
        {
            ctx.SendValue(binary, v => v.Id);
            ctx.SendNode(binary, v => v.Prefix, SendSpace);
            ctx.SendNode(binary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(binary, v => v.Left, ctx.SendTree);
            ctx.SendNode(binary, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(binary, v => v.Right, ctx.SendTree);
            ctx.SendTypedValue(binary, v => v.Type);
            return binary;
        }

        public override J VisitBlockScopeNamespaceDeclaration(Cs.BlockScopeNamespaceDeclaration blockScopeNamespaceDeclaration, SenderContext ctx)
        {
            ctx.SendValue(blockScopeNamespaceDeclaration, v => v.Id);
            ctx.SendNode(blockScopeNamespaceDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(blockScopeNamespaceDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(blockScopeNamespaceDeclaration, v => v.Padding.Name, SendRightPadded);
            ctx.SendNodes(blockScopeNamespaceDeclaration, v => v.Padding.Externs, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(blockScopeNamespaceDeclaration, v => v.Padding.Usings, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(blockScopeNamespaceDeclaration, v => v.Padding.Members, SendRightPadded, t => t.Element.Id);
            ctx.SendNode(blockScopeNamespaceDeclaration, v => v.End, SendSpace);
            return blockScopeNamespaceDeclaration;
        }

        public override J VisitCollectionExpression(Cs.CollectionExpression collectionExpression, SenderContext ctx)
        {
            ctx.SendValue(collectionExpression, v => v.Id);
            ctx.SendNode(collectionExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(collectionExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(collectionExpression, v => v.Padding.Elements, SendRightPadded, t => t.Element.Id);
            ctx.SendTypedValue(collectionExpression, v => v.Type);
            return collectionExpression;
        }

        public override J VisitExpressionStatement(Cs.ExpressionStatement expressionStatement, SenderContext ctx)
        {
            ctx.SendValue(expressionStatement, v => v.Id);
            ctx.SendNode(expressionStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(expressionStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(expressionStatement, v => v.Padding.Expression, SendRightPadded);
            return expressionStatement;
        }

        public override J VisitExternAlias(Cs.ExternAlias externAlias, SenderContext ctx)
        {
            ctx.SendValue(externAlias, v => v.Id);
            ctx.SendNode(externAlias, v => v.Prefix, SendSpace);
            ctx.SendNode(externAlias, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(externAlias, v => v.Padding.Identifier, SendLeftPadded);
            return externAlias;
        }

        public override J VisitFileScopeNamespaceDeclaration(Cs.FileScopeNamespaceDeclaration fileScopeNamespaceDeclaration, SenderContext ctx)
        {
            ctx.SendValue(fileScopeNamespaceDeclaration, v => v.Id);
            ctx.SendNode(fileScopeNamespaceDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(fileScopeNamespaceDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(fileScopeNamespaceDeclaration, v => v.Padding.Name, SendRightPadded);
            ctx.SendNodes(fileScopeNamespaceDeclaration, v => v.Padding.Externs, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(fileScopeNamespaceDeclaration, v => v.Padding.Usings, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(fileScopeNamespaceDeclaration, v => v.Padding.Members, SendRightPadded, t => t.Element.Id);
            return fileScopeNamespaceDeclaration;
        }

        public override J VisitInterpolatedString(Cs.InterpolatedString interpolatedString, SenderContext ctx)
        {
            ctx.SendValue(interpolatedString, v => v.Id);
            ctx.SendNode(interpolatedString, v => v.Prefix, SendSpace);
            ctx.SendNode(interpolatedString, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(interpolatedString, v => v.Start);
            ctx.SendNodes(interpolatedString, v => v.Padding.Parts, SendRightPadded, t => t.Element.Id);
            ctx.SendValue(interpolatedString, v => v.End);
            return interpolatedString;
        }

        public override J VisitInterpolation(Cs.Interpolation interpolation, SenderContext ctx)
        {
            ctx.SendValue(interpolation, v => v.Id);
            ctx.SendNode(interpolation, v => v.Prefix, SendSpace);
            ctx.SendNode(interpolation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(interpolation, v => v.Padding.Expression, SendRightPadded);
            ctx.SendNode(interpolation, v => v.Padding.Alignment, SendRightPadded);
            ctx.SendNode(interpolation, v => v.Padding.Format, SendRightPadded);
            return interpolation;
        }

        public override J VisitNullSafeExpression(Cs.NullSafeExpression nullSafeExpression, SenderContext ctx)
        {
            ctx.SendValue(nullSafeExpression, v => v.Id);
            ctx.SendNode(nullSafeExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(nullSafeExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(nullSafeExpression, v => v.Padding.Expression, SendRightPadded);
            return nullSafeExpression;
        }

        public override J VisitStatementExpression(Cs.StatementExpression statementExpression, SenderContext ctx)
        {
            ctx.SendValue(statementExpression, v => v.Id);
            ctx.SendNode(statementExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(statementExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(statementExpression, v => v.Statement, ctx.SendTree);
            return statementExpression;
        }

        public override J VisitUsingDirective(Cs.UsingDirective usingDirective, SenderContext ctx)
        {
            ctx.SendValue(usingDirective, v => v.Id);
            ctx.SendNode(usingDirective, v => v.Prefix, SendSpace);
            ctx.SendNode(usingDirective, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(usingDirective, v => v.Padding.Global, SendRightPadded);
            ctx.SendNode(usingDirective, v => v.Padding.Static, SendLeftPadded);
            ctx.SendNode(usingDirective, v => v.Padding.Unsafe, SendLeftPadded);
            ctx.SendNode(usingDirective, v => v.Padding.Alias, SendRightPadded);
            ctx.SendNode(usingDirective, v => v.NamespaceOrType, ctx.SendTree);
            return usingDirective;
        }

        public override J VisitPropertyDeclaration(Cs.PropertyDeclaration propertyDeclaration, SenderContext ctx)
        {
            ctx.SendValue(propertyDeclaration, v => v.Id);
            ctx.SendNode(propertyDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(propertyDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(propertyDeclaration, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNodes(propertyDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(propertyDeclaration, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNode(propertyDeclaration, v => v.Padding.InterfaceSpecifier, SendRightPadded);
            ctx.SendNode(propertyDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(propertyDeclaration, v => v.Accessors, ctx.SendTree);
            ctx.SendNode(propertyDeclaration, v => v.ExpressionBody, ctx.SendTree);
            ctx.SendNode(propertyDeclaration, v => v.Padding.Initializer, SendLeftPadded);
            return propertyDeclaration;
        }

        public override J VisitKeyword(Cs.Keyword keyword, SenderContext ctx)
        {
            ctx.SendValue(keyword, v => v.Id);
            ctx.SendNode(keyword, v => v.Prefix, SendSpace);
            ctx.SendNode(keyword, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(keyword, v => v.Kind);
            return keyword;
        }

        public override J VisitLambda(Cs.Lambda lambda, SenderContext ctx)
        {
            ctx.SendValue(lambda, v => v.Id);
            ctx.SendNode(lambda, v => v.Prefix, SendSpace);
            ctx.SendNode(lambda, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(lambda, v => v.LambdaExpression, ctx.SendTree);
            ctx.SendNodes(lambda, v => v.Modifiers, ctx.SendTree, t => t.Id);
            return lambda;
        }

        public override J VisitClassDeclaration(Cs.ClassDeclaration classDeclaration, SenderContext ctx)
        {
            ctx.SendValue(classDeclaration, v => v.Id);
            ctx.SendNode(classDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(classDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(classDeclaration, v => v.AttributeList, ctx.SendTree, t => t.Id);
            ctx.SendNodes(classDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(classDeclaration, v => v.Padding.Kind, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.PrimaryConstructor, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.Extendings, SendLeftPadded);
            ctx.SendNode(classDeclaration, v => v.Padding.Implementings, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Body, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Padding.TypeParameterConstraintClauses, SendContainer);
            ctx.SendTypedValue(classDeclaration, v => v.Type);
            return classDeclaration;
        }

        public override J VisitMethodDeclaration(Cs.MethodDeclaration methodDeclaration, SenderContext ctx)
        {
            ctx.SendValue(methodDeclaration, v => v.Id);
            ctx.SendNode(methodDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(methodDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(methodDeclaration, v => v.Attributes, ctx.SendTree, t => t.Id);
            ctx.SendNodes(methodDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(methodDeclaration, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(methodDeclaration, v => v.ReturnTypeExpression, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.Padding.ExplicitInterfaceSpecifier, SendRightPadded);
            ctx.SendNode(methodDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.Padding.Parameters, SendContainer);
            ctx.SendNode(methodDeclaration, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(methodDeclaration, v => v.MethodType);
            ctx.SendNode(methodDeclaration, v => v.Padding.TypeParameterConstraintClauses, SendContainer);
            return methodDeclaration;
        }

        public override J VisitUsingStatement(Cs.UsingStatement usingStatement, SenderContext ctx)
        {
            ctx.SendValue(usingStatement, v => v.Id);
            ctx.SendNode(usingStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(usingStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(usingStatement, v => v.AwaitKeyword, ctx.SendTree);
            ctx.SendNode(usingStatement, v => v.Padding.Expression, SendLeftPadded);
            ctx.SendNode(usingStatement, v => v.Statement, ctx.SendTree);
            return usingStatement;
        }

        public override J VisitTypeParameterConstraintClause(Cs.TypeParameterConstraintClause typeParameterConstraintClause, SenderContext ctx)
        {
            ctx.SendValue(typeParameterConstraintClause, v => v.Id);
            ctx.SendNode(typeParameterConstraintClause, v => v.Prefix, SendSpace);
            ctx.SendNode(typeParameterConstraintClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(typeParameterConstraintClause, v => v.Padding.TypeParameter, SendRightPadded);
            ctx.SendNode(typeParameterConstraintClause, v => v.Padding.TypeParameterConstraints, SendContainer);
            return typeParameterConstraintClause;
        }

        public override J VisitTypeConstraint(Cs.TypeConstraint typeConstraint, SenderContext ctx)
        {
            ctx.SendValue(typeConstraint, v => v.Id);
            ctx.SendNode(typeConstraint, v => v.Prefix, SendSpace);
            ctx.SendNode(typeConstraint, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(typeConstraint, v => v.TypeExpression, ctx.SendTree);
            return typeConstraint;
        }

        public override J VisitAllowsConstraintClause(Cs.AllowsConstraintClause allowsConstraintClause, SenderContext ctx)
        {
            ctx.SendValue(allowsConstraintClause, v => v.Id);
            ctx.SendNode(allowsConstraintClause, v => v.Prefix, SendSpace);
            ctx.SendNode(allowsConstraintClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(allowsConstraintClause, v => v.Padding.Expressions, SendContainer);
            return allowsConstraintClause;
        }

        public override J VisitRefStructConstraint(Cs.RefStructConstraint refStructConstraint, SenderContext ctx)
        {
            ctx.SendValue(refStructConstraint, v => v.Id);
            ctx.SendNode(refStructConstraint, v => v.Prefix, SendSpace);
            ctx.SendNode(refStructConstraint, v => v.Markers, ctx.SendMarkers);
            return refStructConstraint;
        }

        public override J VisitClassOrStructConstraint(Cs.ClassOrStructConstraint classOrStructConstraint, SenderContext ctx)
        {
            ctx.SendValue(classOrStructConstraint, v => v.Id);
            ctx.SendNode(classOrStructConstraint, v => v.Prefix, SendSpace);
            ctx.SendNode(classOrStructConstraint, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(classOrStructConstraint, v => v.Kind);
            return classOrStructConstraint;
        }

        public override J VisitConstructorConstraint(Cs.ConstructorConstraint constructorConstraint, SenderContext ctx)
        {
            ctx.SendValue(constructorConstraint, v => v.Id);
            ctx.SendNode(constructorConstraint, v => v.Prefix, SendSpace);
            ctx.SendNode(constructorConstraint, v => v.Markers, ctx.SendMarkers);
            return constructorConstraint;
        }

        public override J VisitDefaultConstraint(Cs.DefaultConstraint defaultConstraint, SenderContext ctx)
        {
            ctx.SendValue(defaultConstraint, v => v.Id);
            ctx.SendNode(defaultConstraint, v => v.Prefix, SendSpace);
            ctx.SendNode(defaultConstraint, v => v.Markers, ctx.SendMarkers);
            return defaultConstraint;
        }

        public override J VisitDeclarationExpression(Cs.DeclarationExpression declarationExpression, SenderContext ctx)
        {
            ctx.SendValue(declarationExpression, v => v.Id);
            ctx.SendNode(declarationExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(declarationExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(declarationExpression, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNode(declarationExpression, v => v.Variables, ctx.SendTree);
            return declarationExpression;
        }

        public override J VisitSingleVariableDesignation(Cs.SingleVariableDesignation singleVariableDesignation, SenderContext ctx)
        {
            ctx.SendValue(singleVariableDesignation, v => v.Id);
            ctx.SendNode(singleVariableDesignation, v => v.Prefix, SendSpace);
            ctx.SendNode(singleVariableDesignation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(singleVariableDesignation, v => v.Name, ctx.SendTree);
            return singleVariableDesignation;
        }

        public override J VisitParenthesizedVariableDesignation(Cs.ParenthesizedVariableDesignation parenthesizedVariableDesignation, SenderContext ctx)
        {
            ctx.SendValue(parenthesizedVariableDesignation, v => v.Id);
            ctx.SendNode(parenthesizedVariableDesignation, v => v.Prefix, SendSpace);
            ctx.SendNode(parenthesizedVariableDesignation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(parenthesizedVariableDesignation, v => v.Padding.Variables, SendContainer);
            ctx.SendTypedValue(parenthesizedVariableDesignation, v => v.Type);
            return parenthesizedVariableDesignation;
        }

        public override J VisitDiscardVariableDesignation(Cs.DiscardVariableDesignation discardVariableDesignation, SenderContext ctx)
        {
            ctx.SendValue(discardVariableDesignation, v => v.Id);
            ctx.SendNode(discardVariableDesignation, v => v.Prefix, SendSpace);
            ctx.SendNode(discardVariableDesignation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(discardVariableDesignation, v => v.Discard, ctx.SendTree);
            return discardVariableDesignation;
        }

        public override J VisitTupleExpression(Cs.TupleExpression tupleExpression, SenderContext ctx)
        {
            ctx.SendValue(tupleExpression, v => v.Id);
            ctx.SendNode(tupleExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(tupleExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(tupleExpression, v => v.Padding.Arguments, SendContainer);
            return tupleExpression;
        }

        public override J VisitConstructor(Cs.Constructor constructor, SenderContext ctx)
        {
            ctx.SendValue(constructor, v => v.Id);
            ctx.SendNode(constructor, v => v.Prefix, SendSpace);
            ctx.SendNode(constructor, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(constructor, v => v.Initializer, ctx.SendTree);
            ctx.SendNode(constructor, v => v.ConstructorCore, ctx.SendTree);
            return constructor;
        }

        public override J VisitDestructorDeclaration(Cs.DestructorDeclaration destructorDeclaration, SenderContext ctx)
        {
            ctx.SendValue(destructorDeclaration, v => v.Id);
            ctx.SendNode(destructorDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(destructorDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(destructorDeclaration, v => v.MethodCore, ctx.SendTree);
            return destructorDeclaration;
        }

        public override J VisitUnary(Cs.Unary unary, SenderContext ctx)
        {
            ctx.SendValue(unary, v => v.Id);
            ctx.SendNode(unary, v => v.Prefix, SendSpace);
            ctx.SendNode(unary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unary, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(unary, v => v.Expression, ctx.SendTree);
            ctx.SendTypedValue(unary, v => v.Type);
            return unary;
        }

        public override J VisitConstructorInitializer(Cs.ConstructorInitializer constructorInitializer, SenderContext ctx)
        {
            ctx.SendValue(constructorInitializer, v => v.Id);
            ctx.SendNode(constructorInitializer, v => v.Prefix, SendSpace);
            ctx.SendNode(constructorInitializer, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(constructorInitializer, v => v.Keyword, ctx.SendTree);
            ctx.SendNode(constructorInitializer, v => v.Padding.Arguments, SendContainer);
            return constructorInitializer;
        }

        public override J VisitTupleType(Cs.TupleType tupleType, SenderContext ctx)
        {
            ctx.SendValue(tupleType, v => v.Id);
            ctx.SendNode(tupleType, v => v.Prefix, SendSpace);
            ctx.SendNode(tupleType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(tupleType, v => v.Padding.Elements, SendContainer);
            ctx.SendTypedValue(tupleType, v => v.Type);
            return tupleType;
        }

        public override J VisitTupleElement(Cs.TupleElement tupleElement, SenderContext ctx)
        {
            ctx.SendValue(tupleElement, v => v.Id);
            ctx.SendNode(tupleElement, v => v.Prefix, SendSpace);
            ctx.SendNode(tupleElement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(tupleElement, v => v.Type, ctx.SendTree);
            ctx.SendNode(tupleElement, v => v.Name, ctx.SendTree);
            return tupleElement;
        }

        public override J VisitNewClass(Cs.NewClass newClass, SenderContext ctx)
        {
            ctx.SendValue(newClass, v => v.Id);
            ctx.SendNode(newClass, v => v.Prefix, SendSpace);
            ctx.SendNode(newClass, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(newClass, v => v.NewClassCore, ctx.SendTree);
            ctx.SendNode(newClass, v => v.Initializer, ctx.SendTree);
            return newClass;
        }

        public override J VisitInitializerExpression(Cs.InitializerExpression initializerExpression, SenderContext ctx)
        {
            ctx.SendValue(initializerExpression, v => v.Id);
            ctx.SendNode(initializerExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(initializerExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(initializerExpression, v => v.Padding.Expressions, SendContainer);
            return initializerExpression;
        }

        public override J VisitImplicitElementAccess(Cs.ImplicitElementAccess implicitElementAccess, SenderContext ctx)
        {
            ctx.SendValue(implicitElementAccess, v => v.Id);
            ctx.SendNode(implicitElementAccess, v => v.Prefix, SendSpace);
            ctx.SendNode(implicitElementAccess, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(implicitElementAccess, v => v.Padding.ArgumentList, SendContainer);
            return implicitElementAccess;
        }

        public override J VisitYield(Cs.Yield yield, SenderContext ctx)
        {
            ctx.SendValue(yield, v => v.Id);
            ctx.SendNode(yield, v => v.Prefix, SendSpace);
            ctx.SendNode(yield, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(yield, v => v.ReturnOrBreakKeyword, ctx.SendTree);
            ctx.SendNode(yield, v => v.Expression, ctx.SendTree);
            return yield;
        }

        public override J VisitDefaultExpression(Cs.DefaultExpression defaultExpression, SenderContext ctx)
        {
            ctx.SendValue(defaultExpression, v => v.Id);
            ctx.SendNode(defaultExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(defaultExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(defaultExpression, v => v.Padding.TypeOperator, SendContainer);
            return defaultExpression;
        }

        public override J VisitIsPattern(Cs.IsPattern isPattern, SenderContext ctx)
        {
            ctx.SendValue(isPattern, v => v.Id);
            ctx.SendNode(isPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(isPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(isPattern, v => v.Expression, ctx.SendTree);
            ctx.SendNode(isPattern, v => v.Padding.Pattern, SendLeftPadded);
            return isPattern;
        }

        public override J VisitUnaryPattern(Cs.UnaryPattern unaryPattern, SenderContext ctx)
        {
            ctx.SendValue(unaryPattern, v => v.Id);
            ctx.SendNode(unaryPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(unaryPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unaryPattern, v => v.Operator, ctx.SendTree);
            ctx.SendNode(unaryPattern, v => v.Pattern, ctx.SendTree);
            return unaryPattern;
        }

        public override J VisitTypePattern(Cs.TypePattern typePattern, SenderContext ctx)
        {
            ctx.SendValue(typePattern, v => v.Id);
            ctx.SendNode(typePattern, v => v.Prefix, SendSpace);
            ctx.SendNode(typePattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(typePattern, v => v.TypeIdentifier, ctx.SendTree);
            ctx.SendNode(typePattern, v => v.Designation, ctx.SendTree);
            return typePattern;
        }

        public override J VisitBinaryPattern(Cs.BinaryPattern binaryPattern, SenderContext ctx)
        {
            ctx.SendValue(binaryPattern, v => v.Id);
            ctx.SendNode(binaryPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(binaryPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(binaryPattern, v => v.Left, ctx.SendTree);
            ctx.SendNode(binaryPattern, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(binaryPattern, v => v.Right, ctx.SendTree);
            return binaryPattern;
        }

        public override J VisitConstantPattern(Cs.ConstantPattern constantPattern, SenderContext ctx)
        {
            ctx.SendValue(constantPattern, v => v.Id);
            ctx.SendNode(constantPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(constantPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(constantPattern, v => v.Value, ctx.SendTree);
            return constantPattern;
        }

        public override J VisitDiscardPattern(Cs.DiscardPattern discardPattern, SenderContext ctx)
        {
            ctx.SendValue(discardPattern, v => v.Id);
            ctx.SendNode(discardPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(discardPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendTypedValue(discardPattern, v => v.Type);
            return discardPattern;
        }

        public override J VisitListPattern(Cs.ListPattern listPattern, SenderContext ctx)
        {
            ctx.SendValue(listPattern, v => v.Id);
            ctx.SendNode(listPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(listPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(listPattern, v => v.Padding.Patterns, SendContainer);
            ctx.SendNode(listPattern, v => v.Designation, ctx.SendTree);
            return listPattern;
        }

        public override J VisitParenthesizedPattern(Cs.ParenthesizedPattern parenthesizedPattern, SenderContext ctx)
        {
            ctx.SendValue(parenthesizedPattern, v => v.Id);
            ctx.SendNode(parenthesizedPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(parenthesizedPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(parenthesizedPattern, v => v.Padding.Pattern, SendContainer);
            return parenthesizedPattern;
        }

        public override J VisitRecursivePattern(Cs.RecursivePattern recursivePattern, SenderContext ctx)
        {
            ctx.SendValue(recursivePattern, v => v.Id);
            ctx.SendNode(recursivePattern, v => v.Prefix, SendSpace);
            ctx.SendNode(recursivePattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(recursivePattern, v => v.TypeQualifier, ctx.SendTree);
            ctx.SendNode(recursivePattern, v => v.PositionalPattern, ctx.SendTree);
            ctx.SendNode(recursivePattern, v => v.PropertyPattern, ctx.SendTree);
            ctx.SendNode(recursivePattern, v => v.Designation, ctx.SendTree);
            return recursivePattern;
        }

        public override J VisitVarPattern(Cs.VarPattern varPattern, SenderContext ctx)
        {
            ctx.SendValue(varPattern, v => v.Id);
            ctx.SendNode(varPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(varPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(varPattern, v => v.Designation, ctx.SendTree);
            return varPattern;
        }

        public override J VisitPositionalPatternClause(Cs.PositionalPatternClause positionalPatternClause, SenderContext ctx)
        {
            ctx.SendValue(positionalPatternClause, v => v.Id);
            ctx.SendNode(positionalPatternClause, v => v.Prefix, SendSpace);
            ctx.SendNode(positionalPatternClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(positionalPatternClause, v => v.Padding.Subpatterns, SendContainer);
            return positionalPatternClause;
        }

        public override J VisitRelationalPattern(Cs.RelationalPattern relationalPattern, SenderContext ctx)
        {
            ctx.SendValue(relationalPattern, v => v.Id);
            ctx.SendNode(relationalPattern, v => v.Prefix, SendSpace);
            ctx.SendNode(relationalPattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(relationalPattern, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(relationalPattern, v => v.Value, ctx.SendTree);
            return relationalPattern;
        }

        public override J VisitSlicePattern(Cs.SlicePattern slicePattern, SenderContext ctx)
        {
            ctx.SendValue(slicePattern, v => v.Id);
            ctx.SendNode(slicePattern, v => v.Prefix, SendSpace);
            ctx.SendNode(slicePattern, v => v.Markers, ctx.SendMarkers);
            return slicePattern;
        }

        public override J VisitPropertyPatternClause(Cs.PropertyPatternClause propertyPatternClause, SenderContext ctx)
        {
            ctx.SendValue(propertyPatternClause, v => v.Id);
            ctx.SendNode(propertyPatternClause, v => v.Prefix, SendSpace);
            ctx.SendNode(propertyPatternClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(propertyPatternClause, v => v.Padding.Subpatterns, SendContainer);
            return propertyPatternClause;
        }

        public override J VisitSubpattern(Cs.Subpattern subpattern, SenderContext ctx)
        {
            ctx.SendValue(subpattern, v => v.Id);
            ctx.SendNode(subpattern, v => v.Prefix, SendSpace);
            ctx.SendNode(subpattern, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(subpattern, v => v.Name, ctx.SendTree);
            ctx.SendNode(subpattern, v => v.Padding.Pattern, SendLeftPadded);
            return subpattern;
        }

        public override J VisitSwitchExpression(Cs.SwitchExpression switchExpression, SenderContext ctx)
        {
            ctx.SendValue(switchExpression, v => v.Id);
            ctx.SendNode(switchExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(switchExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(switchExpression, v => v.Padding.Expression, SendRightPadded);
            ctx.SendNode(switchExpression, v => v.Padding.Arms, SendContainer);
            return switchExpression;
        }

        public override J VisitSwitchExpressionArm(Cs.SwitchExpressionArm switchExpressionArm, SenderContext ctx)
        {
            ctx.SendValue(switchExpressionArm, v => v.Id);
            ctx.SendNode(switchExpressionArm, v => v.Prefix, SendSpace);
            ctx.SendNode(switchExpressionArm, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(switchExpressionArm, v => v.Pattern, ctx.SendTree);
            ctx.SendNode(switchExpressionArm, v => v.Padding.WhenExpression, SendLeftPadded);
            ctx.SendNode(switchExpressionArm, v => v.Padding.Expression, SendLeftPadded);
            return switchExpressionArm;
        }

        public override J VisitSwitchSection(Cs.SwitchSection switchSection, SenderContext ctx)
        {
            ctx.SendValue(switchSection, v => v.Id);
            ctx.SendNode(switchSection, v => v.Prefix, SendSpace);
            ctx.SendNode(switchSection, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(switchSection, v => v.Labels, ctx.SendTree, t => t.Id);
            ctx.SendNodes(switchSection, v => v.Padding.Statements, SendRightPadded, t => t.Element.Id);
            return switchSection;
        }

        public override J VisitDefaultSwitchLabel(Cs.DefaultSwitchLabel defaultSwitchLabel, SenderContext ctx)
        {
            ctx.SendValue(defaultSwitchLabel, v => v.Id);
            ctx.SendNode(defaultSwitchLabel, v => v.Prefix, SendSpace);
            ctx.SendNode(defaultSwitchLabel, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(defaultSwitchLabel, v => v.ColonToken, SendSpace);
            return defaultSwitchLabel;
        }

        public override J VisitCasePatternSwitchLabel(Cs.CasePatternSwitchLabel casePatternSwitchLabel, SenderContext ctx)
        {
            ctx.SendValue(casePatternSwitchLabel, v => v.Id);
            ctx.SendNode(casePatternSwitchLabel, v => v.Prefix, SendSpace);
            ctx.SendNode(casePatternSwitchLabel, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(casePatternSwitchLabel, v => v.Pattern, ctx.SendTree);
            ctx.SendNode(casePatternSwitchLabel, v => v.Padding.WhenClause, SendLeftPadded);
            ctx.SendNode(casePatternSwitchLabel, v => v.ColonToken, SendSpace);
            return casePatternSwitchLabel;
        }

        public override J VisitSwitchStatement(Cs.SwitchStatement switchStatement, SenderContext ctx)
        {
            ctx.SendValue(switchStatement, v => v.Id);
            ctx.SendNode(switchStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(switchStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(switchStatement, v => v.Padding.Expression, SendContainer);
            ctx.SendNode(switchStatement, v => v.Padding.Sections, SendContainer);
            return switchStatement;
        }

        public override J VisitLockStatement(Cs.LockStatement lockStatement, SenderContext ctx)
        {
            ctx.SendValue(lockStatement, v => v.Id);
            ctx.SendNode(lockStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(lockStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(lockStatement, v => v.Expression, ctx.SendTree);
            ctx.SendNode(lockStatement, v => v.Padding.Statement, SendRightPadded);
            return lockStatement;
        }

        public override J VisitFixedStatement(Cs.FixedStatement fixedStatement, SenderContext ctx)
        {
            ctx.SendValue(fixedStatement, v => v.Id);
            ctx.SendNode(fixedStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(fixedStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(fixedStatement, v => v.Declarations, ctx.SendTree);
            ctx.SendNode(fixedStatement, v => v.Block, ctx.SendTree);
            return fixedStatement;
        }

        public override J VisitCheckedExpression(Cs.CheckedExpression checkedExpression, SenderContext ctx)
        {
            ctx.SendValue(checkedExpression, v => v.Id);
            ctx.SendNode(checkedExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(checkedExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(checkedExpression, v => v.CheckedOrUncheckedKeyword, ctx.SendTree);
            ctx.SendNode(checkedExpression, v => v.Expression, ctx.SendTree);
            return checkedExpression;
        }

        public override J VisitCheckedStatement(Cs.CheckedStatement checkedStatement, SenderContext ctx)
        {
            ctx.SendValue(checkedStatement, v => v.Id);
            ctx.SendNode(checkedStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(checkedStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(checkedStatement, v => v.Keyword, ctx.SendTree);
            ctx.SendNode(checkedStatement, v => v.Block, ctx.SendTree);
            return checkedStatement;
        }

        public override J VisitUnsafeStatement(Cs.UnsafeStatement unsafeStatement, SenderContext ctx)
        {
            ctx.SendValue(unsafeStatement, v => v.Id);
            ctx.SendNode(unsafeStatement, v => v.Prefix, SendSpace);
            ctx.SendNode(unsafeStatement, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unsafeStatement, v => v.Block, ctx.SendTree);
            return unsafeStatement;
        }

        public override J VisitRangeExpression(Cs.RangeExpression rangeExpression, SenderContext ctx)
        {
            ctx.SendValue(rangeExpression, v => v.Id);
            ctx.SendNode(rangeExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(rangeExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(rangeExpression, v => v.Padding.Start, SendRightPadded);
            ctx.SendNode(rangeExpression, v => v.End, ctx.SendTree);
            return rangeExpression;
        }

        public override J VisitQueryExpression(Cs.QueryExpression queryExpression, SenderContext ctx)
        {
            ctx.SendValue(queryExpression, v => v.Id);
            ctx.SendNode(queryExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(queryExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(queryExpression, v => v.FromClause, ctx.SendTree);
            ctx.SendNode(queryExpression, v => v.Body, ctx.SendTree);
            return queryExpression;
        }

        public override J VisitQueryBody(Cs.QueryBody queryBody, SenderContext ctx)
        {
            ctx.SendValue(queryBody, v => v.Id);
            ctx.SendNode(queryBody, v => v.Prefix, SendSpace);
            ctx.SendNode(queryBody, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(queryBody, v => v.Clauses, ctx.SendTree, t => t.Id);
            ctx.SendNode(queryBody, v => v.SelectOrGroup, ctx.SendTree);
            ctx.SendNode(queryBody, v => v.Continuation, ctx.SendTree);
            return queryBody;
        }

        public override J VisitFromClause(Cs.FromClause fromClause, SenderContext ctx)
        {
            ctx.SendValue(fromClause, v => v.Id);
            ctx.SendNode(fromClause, v => v.Prefix, SendSpace);
            ctx.SendNode(fromClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(fromClause, v => v.TypeIdentifier, ctx.SendTree);
            ctx.SendNode(fromClause, v => v.Padding.Identifier, SendRightPadded);
            ctx.SendNode(fromClause, v => v.Expression, ctx.SendTree);
            return fromClause;
        }

        public override J VisitLetClause(Cs.LetClause letClause, SenderContext ctx)
        {
            ctx.SendValue(letClause, v => v.Id);
            ctx.SendNode(letClause, v => v.Prefix, SendSpace);
            ctx.SendNode(letClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(letClause, v => v.Padding.Identifier, SendRightPadded);
            ctx.SendNode(letClause, v => v.Expression, ctx.SendTree);
            return letClause;
        }

        public override J VisitJoinClause(Cs.JoinClause joinClause, SenderContext ctx)
        {
            ctx.SendValue(joinClause, v => v.Id);
            ctx.SendNode(joinClause, v => v.Prefix, SendSpace);
            ctx.SendNode(joinClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(joinClause, v => v.Padding.Identifier, SendRightPadded);
            ctx.SendNode(joinClause, v => v.Padding.InExpression, SendRightPadded);
            ctx.SendNode(joinClause, v => v.Padding.LeftExpression, SendRightPadded);
            ctx.SendNode(joinClause, v => v.RightExpression, ctx.SendTree);
            ctx.SendNode(joinClause, v => v.Padding.Into, SendLeftPadded);
            return joinClause;
        }

        public override J VisitJoinIntoClause(Cs.JoinIntoClause joinIntoClause, SenderContext ctx)
        {
            ctx.SendValue(joinIntoClause, v => v.Id);
            ctx.SendNode(joinIntoClause, v => v.Prefix, SendSpace);
            ctx.SendNode(joinIntoClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(joinIntoClause, v => v.Identifier, ctx.SendTree);
            return joinIntoClause;
        }

        public override J VisitWhereClause(Cs.WhereClause whereClause, SenderContext ctx)
        {
            ctx.SendValue(whereClause, v => v.Id);
            ctx.SendNode(whereClause, v => v.Prefix, SendSpace);
            ctx.SendNode(whereClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(whereClause, v => v.Condition, ctx.SendTree);
            return whereClause;
        }

        public override J VisitOrderByClause(Cs.OrderByClause orderByClause, SenderContext ctx)
        {
            ctx.SendValue(orderByClause, v => v.Id);
            ctx.SendNode(orderByClause, v => v.Prefix, SendSpace);
            ctx.SendNode(orderByClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(orderByClause, v => v.Padding.Orderings, SendRightPadded, t => t.Element.Id);
            return orderByClause;
        }

        public override J VisitQueryContinuation(Cs.QueryContinuation queryContinuation, SenderContext ctx)
        {
            ctx.SendValue(queryContinuation, v => v.Id);
            ctx.SendNode(queryContinuation, v => v.Prefix, SendSpace);
            ctx.SendNode(queryContinuation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(queryContinuation, v => v.Identifier, ctx.SendTree);
            ctx.SendNode(queryContinuation, v => v.Body, ctx.SendTree);
            return queryContinuation;
        }

        public override J VisitOrdering(Cs.Ordering ordering, SenderContext ctx)
        {
            ctx.SendValue(ordering, v => v.Id);
            ctx.SendNode(ordering, v => v.Prefix, SendSpace);
            ctx.SendNode(ordering, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(ordering, v => v.Padding.Expression, SendRightPadded);
            ctx.SendValue(ordering, v => v.Direction);
            return ordering;
        }

        public override J VisitSelectClause(Cs.SelectClause selectClause, SenderContext ctx)
        {
            ctx.SendValue(selectClause, v => v.Id);
            ctx.SendNode(selectClause, v => v.Prefix, SendSpace);
            ctx.SendNode(selectClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(selectClause, v => v.Expression, ctx.SendTree);
            return selectClause;
        }

        public override J VisitGroupClause(Cs.GroupClause groupClause, SenderContext ctx)
        {
            ctx.SendValue(groupClause, v => v.Id);
            ctx.SendNode(groupClause, v => v.Prefix, SendSpace);
            ctx.SendNode(groupClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(groupClause, v => v.Padding.GroupExpression, SendRightPadded);
            ctx.SendNode(groupClause, v => v.Key, ctx.SendTree);
            return groupClause;
        }

        public override J VisitIndexerDeclaration(Cs.IndexerDeclaration indexerDeclaration, SenderContext ctx)
        {
            ctx.SendValue(indexerDeclaration, v => v.Id);
            ctx.SendNode(indexerDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(indexerDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(indexerDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(indexerDeclaration, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNode(indexerDeclaration, v => v.Indexer, ctx.SendTree);
            ctx.SendNode(indexerDeclaration, v => v.Padding.Parameters, SendContainer);
            ctx.SendNode(indexerDeclaration, v => v.Padding.ExpressionBody, SendLeftPadded);
            ctx.SendNode(indexerDeclaration, v => v.Accessors, ctx.SendTree);
            return indexerDeclaration;
        }

        public override J VisitDelegateDeclaration(Cs.DelegateDeclaration delegateDeclaration, SenderContext ctx)
        {
            ctx.SendValue(delegateDeclaration, v => v.Id);
            ctx.SendNode(delegateDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(delegateDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(delegateDeclaration, v => v.Attributes, ctx.SendTree, t => t.Id);
            ctx.SendNodes(delegateDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(delegateDeclaration, v => v.Padding.ReturnType, SendLeftPadded);
            ctx.SendNode(delegateDeclaration, v => v.Identifier, ctx.SendTree);
            ctx.SendNode(delegateDeclaration, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(delegateDeclaration, v => v.Padding.Parameters, SendContainer);
            ctx.SendNode(delegateDeclaration, v => v.Padding.TypeParameterConstraintClauses, SendContainer);
            return delegateDeclaration;
        }

        public override J VisitConversionOperatorDeclaration(Cs.ConversionOperatorDeclaration conversionOperatorDeclaration, SenderContext ctx)
        {
            ctx.SendValue(conversionOperatorDeclaration, v => v.Id);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(conversionOperatorDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Padding.Kind, SendLeftPadded);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Padding.ReturnType, SendLeftPadded);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Padding.Parameters, SendContainer);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Padding.ExpressionBody, SendLeftPadded);
            ctx.SendNode(conversionOperatorDeclaration, v => v.Body, ctx.SendTree);
            return conversionOperatorDeclaration;
        }

        public override J VisitTypeParameter(Cs.TypeParameter typeParameter, SenderContext ctx)
        {
            ctx.SendValue(typeParameter, v => v.Id);
            ctx.SendNode(typeParameter, v => v.Prefix, SendSpace);
            ctx.SendNode(typeParameter, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(typeParameter, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNode(typeParameter, v => v.Padding.Variance, SendLeftPadded);
            ctx.SendNode(typeParameter, v => v.Name, ctx.SendTree);
            return typeParameter;
        }

        public override J VisitEnumDeclaration(Cs.EnumDeclaration enumDeclaration, SenderContext ctx)
        {
            ctx.SendValue(enumDeclaration, v => v.Id);
            ctx.SendNode(enumDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(enumDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(enumDeclaration, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNodes(enumDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(enumDeclaration, v => v.Padding.Name, SendLeftPadded);
            ctx.SendNode(enumDeclaration, v => v.Padding.BaseType, SendLeftPadded);
            ctx.SendNode(enumDeclaration, v => v.Padding.Members, SendContainer);
            return enumDeclaration;
        }

        public override J VisitEnumMemberDeclaration(Cs.EnumMemberDeclaration enumMemberDeclaration, SenderContext ctx)
        {
            ctx.SendValue(enumMemberDeclaration, v => v.Id);
            ctx.SendNode(enumMemberDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(enumMemberDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(enumMemberDeclaration, v => v.AttributeLists, ctx.SendTree, t => t.Id);
            ctx.SendNode(enumMemberDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(enumMemberDeclaration, v => v.Padding.Initializer, SendLeftPadded);
            return enumMemberDeclaration;
        }

        public override J VisitAliasQualifiedName(Cs.AliasQualifiedName aliasQualifiedName, SenderContext ctx)
        {
            ctx.SendValue(aliasQualifiedName, v => v.Id);
            ctx.SendNode(aliasQualifiedName, v => v.Prefix, SendSpace);
            ctx.SendNode(aliasQualifiedName, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(aliasQualifiedName, v => v.Padding.Alias, SendRightPadded);
            ctx.SendNode(aliasQualifiedName, v => v.Name, ctx.SendTree);
            return aliasQualifiedName;
        }

        public override J VisitArrayType(Cs.ArrayType arrayType, SenderContext ctx)
        {
            ctx.SendValue(arrayType, v => v.Id);
            ctx.SendNode(arrayType, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayType, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNodes(arrayType, v => v.Dimensions, ctx.SendTree, t => t.Id);
            ctx.SendTypedValue(arrayType, v => v.Type);
            return arrayType;
        }

        public override J VisitTry(Cs.Try @try, SenderContext ctx)
        {
            ctx.SendValue(@try, v => v.Id);
            ctx.SendNode(@try, v => v.Prefix, SendSpace);
            ctx.SendNode(@try, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@try, v => v.Body, ctx.SendTree);
            ctx.SendNodes(@try, v => v.Catches, ctx.SendTree, t => t.Id);
            ctx.SendNode(@try, v => v.Padding.Finally, SendLeftPadded);
            return @try;
        }

        public override J VisitTryCatch(Cs.Try.Catch @catch, SenderContext ctx)
        {
            ctx.SendValue(@catch, v => v.Id);
            ctx.SendNode(@catch, v => v.Prefix, SendSpace);
            ctx.SendNode(@catch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@catch, v => v.Parameter, ctx.SendTree);
            ctx.SendNode(@catch, v => v.Padding.FilterExpression, SendLeftPadded);
            ctx.SendNode(@catch, v => v.Body, ctx.SendTree);
            return @catch;
        }

        public override J VisitArrowExpressionClause(Cs.ArrowExpressionClause arrowExpressionClause, SenderContext ctx)
        {
            ctx.SendValue(arrowExpressionClause, v => v.Id);
            ctx.SendNode(arrowExpressionClause, v => v.Prefix, SendSpace);
            ctx.SendNode(arrowExpressionClause, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrowExpressionClause, v => v.Padding.Expression, SendRightPadded);
            return arrowExpressionClause;
        }

        public override J VisitAccessorDeclaration(Cs.AccessorDeclaration accessorDeclaration, SenderContext ctx)
        {
            ctx.SendValue(accessorDeclaration, v => v.Id);
            ctx.SendNode(accessorDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(accessorDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(accessorDeclaration, v => v.Attributes, ctx.SendTree, t => t.Id);
            ctx.SendNodes(accessorDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(accessorDeclaration, v => v.Padding.Kind, SendLeftPadded);
            ctx.SendNode(accessorDeclaration, v => v.ExpressionBody, ctx.SendTree);
            ctx.SendNode(accessorDeclaration, v => v.Body, ctx.SendTree);
            return accessorDeclaration;
        }

        public override J VisitPointerFieldAccess(Cs.PointerFieldAccess pointerFieldAccess, SenderContext ctx)
        {
            ctx.SendValue(pointerFieldAccess, v => v.Id);
            ctx.SendNode(pointerFieldAccess, v => v.Prefix, SendSpace);
            ctx.SendNode(pointerFieldAccess, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(pointerFieldAccess, v => v.Target, ctx.SendTree);
            ctx.SendNode(pointerFieldAccess, v => v.Padding.Name, SendLeftPadded);
            ctx.SendTypedValue(pointerFieldAccess, v => v.Type);
            return pointerFieldAccess;
        }

        public override J VisitAnnotatedType(J.AnnotatedType annotatedType, SenderContext ctx)
        {
            ctx.SendValue(annotatedType, v => v.Id);
            ctx.SendNode(annotatedType, v => v.Prefix, SendSpace);
            ctx.SendNode(annotatedType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(annotatedType, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(annotatedType, v => v.TypeExpression, ctx.SendTree);
            return annotatedType;
        }

        public override J VisitAnnotation(J.Annotation annotation, SenderContext ctx)
        {
            ctx.SendValue(annotation, v => v.Id);
            ctx.SendNode(annotation, v => v.Prefix, SendSpace);
            ctx.SendNode(annotation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(annotation, v => v.AnnotationType, ctx.SendTree);
            ctx.SendNode(annotation, v => v.Padding.Arguments, SendContainer);
            return annotation;
        }

        public override J VisitArrayAccess(J.ArrayAccess arrayAccess, SenderContext ctx)
        {
            ctx.SendValue(arrayAccess, v => v.Id);
            ctx.SendNode(arrayAccess, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayAccess, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayAccess, v => v.Indexed, ctx.SendTree);
            ctx.SendNode(arrayAccess, v => v.Dimension, ctx.SendTree);
            ctx.SendTypedValue(arrayAccess, v => v.Type);
            return arrayAccess;
        }

        public override J VisitArrayType(J.ArrayType arrayType, SenderContext ctx)
        {
            ctx.SendValue(arrayType, v => v.Id);
            ctx.SendNode(arrayType, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayType, v => v.ElementType, ctx.SendTree);
            ctx.SendNodes(arrayType, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(arrayType, v => v.Dimension, SendLeftPadded);
            ctx.SendTypedValue(arrayType, v => v.Type);
            return arrayType;
        }

        public override J VisitAssert(J.Assert assert, SenderContext ctx)
        {
            ctx.SendValue(assert, v => v.Id);
            ctx.SendNode(assert, v => v.Prefix, SendSpace);
            ctx.SendNode(assert, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assert, v => v.Condition, ctx.SendTree);
            ctx.SendNode(assert, v => v.Detail, SendLeftPadded);
            return assert;
        }

        public override J VisitAssignment(J.Assignment assignment, SenderContext ctx)
        {
            ctx.SendValue(assignment, v => v.Id);
            ctx.SendNode(assignment, v => v.Prefix, SendSpace);
            ctx.SendNode(assignment, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assignment, v => v.Variable, ctx.SendTree);
            ctx.SendNode(assignment, v => v.Padding.Expression, SendLeftPadded);
            ctx.SendTypedValue(assignment, v => v.Type);
            return assignment;
        }

        public override J VisitAssignmentOperation(J.AssignmentOperation assignmentOperation, SenderContext ctx)
        {
            ctx.SendValue(assignmentOperation, v => v.Id);
            ctx.SendNode(assignmentOperation, v => v.Prefix, SendSpace);
            ctx.SendNode(assignmentOperation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assignmentOperation, v => v.Variable, ctx.SendTree);
            ctx.SendNode(assignmentOperation, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(assignmentOperation, v => v.Assignment, ctx.SendTree);
            ctx.SendTypedValue(assignmentOperation, v => v.Type);
            return assignmentOperation;
        }

        public override J VisitBinary(J.Binary binary, SenderContext ctx)
        {
            ctx.SendValue(binary, v => v.Id);
            ctx.SendNode(binary, v => v.Prefix, SendSpace);
            ctx.SendNode(binary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(binary, v => v.Left, ctx.SendTree);
            ctx.SendNode(binary, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(binary, v => v.Right, ctx.SendTree);
            ctx.SendTypedValue(binary, v => v.Type);
            return binary;
        }

        public override J VisitBlock(J.Block block, SenderContext ctx)
        {
            ctx.SendValue(block, v => v.Id);
            ctx.SendNode(block, v => v.Prefix, SendSpace);
            ctx.SendNode(block, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(block, v => v.Padding.Static, SendRightPadded);
            ctx.SendNodes(block, v => v.Padding.Statements, SendRightPadded, t => t.Element.Id);
            ctx.SendNode(block, v => v.End, SendSpace);
            return block;
        }

        public override J VisitBreak(J.Break @break, SenderContext ctx)
        {
            ctx.SendValue(@break, v => v.Id);
            ctx.SendNode(@break, v => v.Prefix, SendSpace);
            ctx.SendNode(@break, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@break, v => v.Label, ctx.SendTree);
            return @break;
        }

        public override J VisitCase(J.Case @case, SenderContext ctx)
        {
            ctx.SendValue(@case, v => v.Id);
            ctx.SendNode(@case, v => v.Prefix, SendSpace);
            ctx.SendNode(@case, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(@case, v => v.CaseType);
            ctx.SendNode(@case, v => v.Padding.Expressions, SendContainer);
            ctx.SendNode(@case, v => v.Padding.Statements, SendContainer);
            ctx.SendNode(@case, v => v.Padding.Body, SendRightPadded);
            return @case;
        }

        public override J VisitClassDeclaration(J.ClassDeclaration classDeclaration, SenderContext ctx)
        {
            ctx.SendValue(classDeclaration, v => v.Id);
            ctx.SendNode(classDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(classDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(classDeclaration, v => v.LeadingAnnotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(classDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(classDeclaration, v => v.Padding.DeclarationKind, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.PrimaryConstructor, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.Extends, SendLeftPadded);
            ctx.SendNode(classDeclaration, v => v.Padding.Implements, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.Permits, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(classDeclaration, v => v.Type);
            return classDeclaration;
        }

        public override J VisitClassDeclarationKind(J.ClassDeclaration.Kind kind, SenderContext ctx)
        {
            ctx.SendValue(kind, v => v.Id);
            ctx.SendNode(kind, v => v.Prefix, SendSpace);
            ctx.SendNode(kind, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(kind, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendValue(kind, v => v.KindType);
            return kind;
        }

        public override J VisitContinue(J.Continue @continue, SenderContext ctx)
        {
            ctx.SendValue(@continue, v => v.Id);
            ctx.SendNode(@continue, v => v.Prefix, SendSpace);
            ctx.SendNode(@continue, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@continue, v => v.Label, ctx.SendTree);
            return @continue;
        }

        public override J VisitDoWhileLoop(J.DoWhileLoop doWhileLoop, SenderContext ctx)
        {
            ctx.SendValue(doWhileLoop, v => v.Id);
            ctx.SendNode(doWhileLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(doWhileLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(doWhileLoop, v => v.Padding.Body, SendRightPadded);
            ctx.SendNode(doWhileLoop, v => v.Padding.WhileCondition, SendLeftPadded);
            return doWhileLoop;
        }

        public override J VisitEmpty(J.Empty empty, SenderContext ctx)
        {
            ctx.SendValue(empty, v => v.Id);
            ctx.SendNode(empty, v => v.Prefix, SendSpace);
            ctx.SendNode(empty, v => v.Markers, ctx.SendMarkers);
            return empty;
        }

        public override J VisitEnumValue(J.EnumValue enumValue, SenderContext ctx)
        {
            ctx.SendValue(enumValue, v => v.Id);
            ctx.SendNode(enumValue, v => v.Prefix, SendSpace);
            ctx.SendNode(enumValue, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(enumValue, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(enumValue, v => v.Name, ctx.SendTree);
            ctx.SendNode(enumValue, v => v.Initializer, ctx.SendTree);
            return enumValue;
        }

        public override J VisitEnumValueSet(J.EnumValueSet enumValueSet, SenderContext ctx)
        {
            ctx.SendValue(enumValueSet, v => v.Id);
            ctx.SendNode(enumValueSet, v => v.Prefix, SendSpace);
            ctx.SendNode(enumValueSet, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(enumValueSet, v => v.Padding.Enums, SendRightPadded, t => t.Element.Id);
            ctx.SendValue(enumValueSet, v => v.TerminatedWithSemicolon);
            return enumValueSet;
        }

        public override J VisitFieldAccess(J.FieldAccess fieldAccess, SenderContext ctx)
        {
            ctx.SendValue(fieldAccess, v => v.Id);
            ctx.SendNode(fieldAccess, v => v.Prefix, SendSpace);
            ctx.SendNode(fieldAccess, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(fieldAccess, v => v.Target, ctx.SendTree);
            ctx.SendNode(fieldAccess, v => v.Padding.Name, SendLeftPadded);
            ctx.SendTypedValue(fieldAccess, v => v.Type);
            return fieldAccess;
        }

        public override J VisitForEachLoop(J.ForEachLoop forEachLoop, SenderContext ctx)
        {
            ctx.SendValue(forEachLoop, v => v.Id);
            ctx.SendNode(forEachLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(forEachLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(forEachLoop, v => v.LoopControl, ctx.SendTree);
            ctx.SendNode(forEachLoop, v => v.Padding.Body, SendRightPadded);
            return forEachLoop;
        }

        public override J VisitForEachControl(J.ForEachLoop.Control control, SenderContext ctx)
        {
            ctx.SendValue(control, v => v.Id);
            ctx.SendNode(control, v => v.Prefix, SendSpace);
            ctx.SendNode(control, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(control, v => v.Padding.Variable, SendRightPadded);
            ctx.SendNode(control, v => v.Padding.Iterable, SendRightPadded);
            return control;
        }

        public override J VisitForLoop(J.ForLoop forLoop, SenderContext ctx)
        {
            ctx.SendValue(forLoop, v => v.Id);
            ctx.SendNode(forLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(forLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(forLoop, v => v.LoopControl, ctx.SendTree);
            ctx.SendNode(forLoop, v => v.Padding.Body, SendRightPadded);
            return forLoop;
        }

        public override J VisitForControl(J.ForLoop.Control control, SenderContext ctx)
        {
            ctx.SendValue(control, v => v.Id);
            ctx.SendNode(control, v => v.Prefix, SendSpace);
            ctx.SendNode(control, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(control, v => v.Padding.Init, SendRightPadded, t => t.Element.Id);
            ctx.SendNode(control, v => v.Padding.Condition, SendRightPadded);
            ctx.SendNodes(control, v => v.Padding.Update, SendRightPadded, t => t.Element.Id);
            return control;
        }

        public override J VisitParenthesizedTypeTree(J.ParenthesizedTypeTree parenthesizedTypeTree, SenderContext ctx)
        {
            ctx.SendValue(parenthesizedTypeTree, v => v.Id);
            ctx.SendNode(parenthesizedTypeTree, v => v.Prefix, SendSpace);
            ctx.SendNode(parenthesizedTypeTree, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(parenthesizedTypeTree, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(parenthesizedTypeTree, v => v.ParenthesizedType, ctx.SendTree);
            return parenthesizedTypeTree;
        }

        public override J VisitIdentifier(J.Identifier identifier, SenderContext ctx)
        {
            ctx.SendValue(identifier, v => v.Id);
            ctx.SendNode(identifier, v => v.Prefix, SendSpace);
            ctx.SendNode(identifier, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(identifier, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendValue(identifier, v => v.SimpleName);
            ctx.SendTypedValue(identifier, v => v.Type);
            ctx.SendTypedValue(identifier, v => v.FieldType);
            return identifier;
        }

        public override J VisitIf(J.If @if, SenderContext ctx)
        {
            ctx.SendValue(@if, v => v.Id);
            ctx.SendNode(@if, v => v.Prefix, SendSpace);
            ctx.SendNode(@if, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@if, v => v.IfCondition, ctx.SendTree);
            ctx.SendNode(@if, v => v.Padding.ThenPart, SendRightPadded);
            ctx.SendNode(@if, v => v.ElsePart, ctx.SendTree);
            return @if;
        }

        public override J VisitElse(J.If.Else @else, SenderContext ctx)
        {
            ctx.SendValue(@else, v => v.Id);
            ctx.SendNode(@else, v => v.Prefix, SendSpace);
            ctx.SendNode(@else, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@else, v => v.Padding.Body, SendRightPadded);
            return @else;
        }

        public override J VisitImport(J.Import import, SenderContext ctx)
        {
            ctx.SendValue(import, v => v.Id);
            ctx.SendNode(import, v => v.Prefix, SendSpace);
            ctx.SendNode(import, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(import, v => v.Padding.Static, SendLeftPadded);
            ctx.SendNode(import, v => v.Qualid, ctx.SendTree);
            ctx.SendNode(import, v => v.Padding.Alias, SendLeftPadded);
            return import;
        }

        public override J VisitInstanceOf(J.InstanceOf instanceOf, SenderContext ctx)
        {
            ctx.SendValue(instanceOf, v => v.Id);
            ctx.SendNode(instanceOf, v => v.Prefix, SendSpace);
            ctx.SendNode(instanceOf, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(instanceOf, v => v.Padding.Expression, SendRightPadded);
            ctx.SendNode(instanceOf, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(instanceOf, v => v.Pattern, ctx.SendTree);
            ctx.SendTypedValue(instanceOf, v => v.Type);
            return instanceOf;
        }

        public override J VisitIntersectionType(J.IntersectionType intersectionType, SenderContext ctx)
        {
            ctx.SendValue(intersectionType, v => v.Id);
            ctx.SendNode(intersectionType, v => v.Prefix, SendSpace);
            ctx.SendNode(intersectionType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(intersectionType, v => v.Padding.Bounds, SendContainer);
            return intersectionType;
        }

        public override J VisitLabel(J.Label label, SenderContext ctx)
        {
            ctx.SendValue(label, v => v.Id);
            ctx.SendNode(label, v => v.Prefix, SendSpace);
            ctx.SendNode(label, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(label, v => v.Padding.Name, SendRightPadded);
            ctx.SendNode(label, v => v.Statement, ctx.SendTree);
            return label;
        }

        public override J VisitLambda(J.Lambda lambda, SenderContext ctx)
        {
            ctx.SendValue(lambda, v => v.Id);
            ctx.SendNode(lambda, v => v.Prefix, SendSpace);
            ctx.SendNode(lambda, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(lambda, v => v.Params, ctx.SendTree);
            ctx.SendNode(lambda, v => v.Arrow, SendSpace);
            ctx.SendNode(lambda, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(lambda, v => v.Type);
            return lambda;
        }

        public override J VisitLambdaParameters(J.Lambda.Parameters parameters, SenderContext ctx)
        {
            ctx.SendValue(parameters, v => v.Id);
            ctx.SendNode(parameters, v => v.Prefix, SendSpace);
            ctx.SendNode(parameters, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(parameters, v => v.Parenthesized);
            ctx.SendNodes(parameters, v => v.Padding.Elements, SendRightPadded, t => t.Element.Id);
            return parameters;
        }

        public override J VisitLiteral(J.Literal literal, SenderContext ctx)
        {
            ctx.SendValue(literal, v => v.Id);
            ctx.SendNode(literal, v => v.Prefix, SendSpace);
            ctx.SendNode(literal, v => v.Markers, ctx.SendMarkers);
            ctx.SendTypedValue(literal, v => v.Value);
            ctx.SendValue(literal, v => v.ValueSource);
            ctx.SendValues(literal, v => v.UnicodeEscapes, x => x);
            ctx.SendValue(literal, v => v.Type);
            return literal;
        }

        public override J VisitMemberReference(J.MemberReference memberReference, SenderContext ctx)
        {
            ctx.SendValue(memberReference, v => v.Id);
            ctx.SendNode(memberReference, v => v.Prefix, SendSpace);
            ctx.SendNode(memberReference, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(memberReference, v => v.Padding.Containing, SendRightPadded);
            ctx.SendNode(memberReference, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(memberReference, v => v.Padding.Reference, SendLeftPadded);
            ctx.SendTypedValue(memberReference, v => v.Type);
            ctx.SendTypedValue(memberReference, v => v.MethodType);
            ctx.SendTypedValue(memberReference, v => v.VariableType);
            return memberReference;
        }

        public override J VisitMethodDeclaration(J.MethodDeclaration methodDeclaration, SenderContext ctx)
        {
            ctx.SendValue(methodDeclaration, v => v.Id);
            ctx.SendNode(methodDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(methodDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(methodDeclaration, v => v.LeadingAnnotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(methodDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(methodDeclaration, v => v.Annotations.TypeParameters, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.ReturnTypeExpression, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.Annotations.Name, SendMethodIdentifierWithAnnotations);
            ctx.SendNode(methodDeclaration, v => v.Padding.Parameters, SendContainer);
            ctx.SendNode(methodDeclaration, v => v.Padding.Throws, SendContainer);
            ctx.SendNode(methodDeclaration, v => v.Body, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.Padding.DefaultValue, SendLeftPadded);
            ctx.SendTypedValue(methodDeclaration, v => v.MethodType);
            return methodDeclaration;
        }

        private void SendMethodIdentifierWithAnnotations(J.MethodDeclaration.IdentifierWithAnnotations identifierWithAnnotations, SenderContext ctx) {
            ctx.SendNode(identifierWithAnnotations, v => v.Identifier, ctx.SendTree);
            ctx.SendNodes(identifierWithAnnotations, v => v.Annotations, ctx.SendTree, t => t.Id);
        }

        public override J VisitMethodInvocation(J.MethodInvocation methodInvocation, SenderContext ctx)
        {
            ctx.SendValue(methodInvocation, v => v.Id);
            ctx.SendNode(methodInvocation, v => v.Prefix, SendSpace);
            ctx.SendNode(methodInvocation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(methodInvocation, v => v.Padding.Select, SendRightPadded);
            ctx.SendNode(methodInvocation, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(methodInvocation, v => v.Name, ctx.SendTree);
            ctx.SendNode(methodInvocation, v => v.Padding.Arguments, SendContainer);
            ctx.SendTypedValue(methodInvocation, v => v.MethodType);
            return methodInvocation;
        }

        public override J VisitModifier(J.Modifier modifier, SenderContext ctx)
        {
            ctx.SendValue(modifier, v => v.Id);
            ctx.SendNode(modifier, v => v.Prefix, SendSpace);
            ctx.SendNode(modifier, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(modifier, v => v.Keyword);
            ctx.SendValue(modifier, v => v.ModifierType);
            ctx.SendNodes(modifier, v => v.Annotations, ctx.SendTree, t => t.Id);
            return modifier;
        }

        public override J VisitMultiCatch(J.MultiCatch multiCatch, SenderContext ctx)
        {
            ctx.SendValue(multiCatch, v => v.Id);
            ctx.SendNode(multiCatch, v => v.Prefix, SendSpace);
            ctx.SendNode(multiCatch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(multiCatch, v => v.Padding.Alternatives, SendRightPadded, t => t.Element.Id);
            return multiCatch;
        }

        public override J VisitNewArray(J.NewArray newArray, SenderContext ctx)
        {
            ctx.SendValue(newArray, v => v.Id);
            ctx.SendNode(newArray, v => v.Prefix, SendSpace);
            ctx.SendNode(newArray, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(newArray, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNodes(newArray, v => v.Dimensions, ctx.SendTree, t => t.Id);
            ctx.SendNode(newArray, v => v.Padding.Initializer, SendContainer);
            ctx.SendTypedValue(newArray, v => v.Type);
            return newArray;
        }

        public override J VisitArrayDimension(J.ArrayDimension arrayDimension, SenderContext ctx)
        {
            ctx.SendValue(arrayDimension, v => v.Id);
            ctx.SendNode(arrayDimension, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayDimension, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayDimension, v => v.Padding.Index, SendRightPadded);
            return arrayDimension;
        }

        public override J VisitNewClass(J.NewClass newClass, SenderContext ctx)
        {
            ctx.SendValue(newClass, v => v.Id);
            ctx.SendNode(newClass, v => v.Prefix, SendSpace);
            ctx.SendNode(newClass, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(newClass, v => v.Padding.Enclosing, SendRightPadded);
            ctx.SendNode(newClass, v => v.New, SendSpace);
            ctx.SendNode(newClass, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(newClass, v => v.Padding.Arguments, SendContainer);
            ctx.SendNode(newClass, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(newClass, v => v.ConstructorType);
            return newClass;
        }

        public override J VisitNullableType(J.NullableType nullableType, SenderContext ctx)
        {
            ctx.SendValue(nullableType, v => v.Id);
            ctx.SendNode(nullableType, v => v.Prefix, SendSpace);
            ctx.SendNode(nullableType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(nullableType, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(nullableType, v => v.Padding.TypeTree, SendRightPadded);
            return nullableType;
        }

        public override J VisitPackage(J.Package package, SenderContext ctx)
        {
            ctx.SendValue(package, v => v.Id);
            ctx.SendNode(package, v => v.Prefix, SendSpace);
            ctx.SendNode(package, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(package, v => v.Expression, ctx.SendTree);
            ctx.SendNodes(package, v => v.Annotations, ctx.SendTree, t => t.Id);
            return package;
        }

        public override J VisitParameterizedType(J.ParameterizedType parameterizedType, SenderContext ctx)
        {
            ctx.SendValue(parameterizedType, v => v.Id);
            ctx.SendNode(parameterizedType, v => v.Prefix, SendSpace);
            ctx.SendNode(parameterizedType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(parameterizedType, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(parameterizedType, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendTypedValue(parameterizedType, v => v.Type);
            return parameterizedType;
        }

        public override J VisitParentheses<J2>(J.Parentheses<J2> parentheses, SenderContext ctx)
        {
            ctx.SendValue(parentheses, v => v.Id);
            ctx.SendNode(parentheses, v => v.Prefix, SendSpace);
            ctx.SendNode(parentheses, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(parentheses, v => v.Padding.Tree, SendRightPadded);
            return parentheses;
        }

        public override J VisitControlParentheses<J2>(J.ControlParentheses<J2> controlParentheses, SenderContext ctx)
        {
            ctx.SendValue(controlParentheses, v => v.Id);
            ctx.SendNode(controlParentheses, v => v.Prefix, SendSpace);
            ctx.SendNode(controlParentheses, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(controlParentheses, v => v.Padding.Tree, SendRightPadded);
            return controlParentheses;
        }

        public override J VisitPrimitive(J.Primitive primitive, SenderContext ctx)
        {
            ctx.SendValue(primitive, v => v.Id);
            ctx.SendNode(primitive, v => v.Prefix, SendSpace);
            ctx.SendNode(primitive, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(primitive, v => v.Type);
            return primitive;
        }

        public override J VisitReturn(J.Return @return, SenderContext ctx)
        {
            ctx.SendValue(@return, v => v.Id);
            ctx.SendNode(@return, v => v.Prefix, SendSpace);
            ctx.SendNode(@return, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@return, v => v.Expression, ctx.SendTree);
            return @return;
        }

        public override J VisitSwitch(J.Switch @switch, SenderContext ctx)
        {
            ctx.SendValue(@switch, v => v.Id);
            ctx.SendNode(@switch, v => v.Prefix, SendSpace);
            ctx.SendNode(@switch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@switch, v => v.Selector, ctx.SendTree);
            ctx.SendNode(@switch, v => v.Cases, ctx.SendTree);
            return @switch;
        }

        public override J VisitSwitchExpression(J.SwitchExpression switchExpression, SenderContext ctx)
        {
            ctx.SendValue(switchExpression, v => v.Id);
            ctx.SendNode(switchExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(switchExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(switchExpression, v => v.Selector, ctx.SendTree);
            ctx.SendNode(switchExpression, v => v.Cases, ctx.SendTree);
            return switchExpression;
        }

        public override J VisitSynchronized(J.Synchronized synchronized, SenderContext ctx)
        {
            ctx.SendValue(synchronized, v => v.Id);
            ctx.SendNode(synchronized, v => v.Prefix, SendSpace);
            ctx.SendNode(synchronized, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(synchronized, v => v.Lock, ctx.SendTree);
            ctx.SendNode(synchronized, v => v.Body, ctx.SendTree);
            return synchronized;
        }

        public override J VisitTernary(J.Ternary ternary, SenderContext ctx)
        {
            ctx.SendValue(ternary, v => v.Id);
            ctx.SendNode(ternary, v => v.Prefix, SendSpace);
            ctx.SendNode(ternary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(ternary, v => v.Condition, ctx.SendTree);
            ctx.SendNode(ternary, v => v.Padding.TruePart, SendLeftPadded);
            ctx.SendNode(ternary, v => v.Padding.FalsePart, SendLeftPadded);
            ctx.SendTypedValue(ternary, v => v.Type);
            return ternary;
        }

        public override J VisitThrow(J.Throw @throw, SenderContext ctx)
        {
            ctx.SendValue(@throw, v => v.Id);
            ctx.SendNode(@throw, v => v.Prefix, SendSpace);
            ctx.SendNode(@throw, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@throw, v => v.Exception, ctx.SendTree);
            return @throw;
        }

        public override J VisitTry(J.Try @try, SenderContext ctx)
        {
            ctx.SendValue(@try, v => v.Id);
            ctx.SendNode(@try, v => v.Prefix, SendSpace);
            ctx.SendNode(@try, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@try, v => v.Padding.Resources, SendContainer);
            ctx.SendNode(@try, v => v.Body, ctx.SendTree);
            ctx.SendNodes(@try, v => v.Catches, ctx.SendTree, t => t.Id);
            ctx.SendNode(@try, v => v.Padding.Finally, SendLeftPadded);
            return @try;
        }

        public override J VisitTryResource(J.Try.Resource resource, SenderContext ctx)
        {
            ctx.SendValue(resource, v => v.Id);
            ctx.SendNode(resource, v => v.Prefix, SendSpace);
            ctx.SendNode(resource, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(resource, v => v.VariableDeclarations, ctx.SendTree);
            ctx.SendValue(resource, v => v.TerminatedWithSemicolon);
            return resource;
        }

        public override J VisitCatch(J.Try.Catch @catch, SenderContext ctx)
        {
            ctx.SendValue(@catch, v => v.Id);
            ctx.SendNode(@catch, v => v.Prefix, SendSpace);
            ctx.SendNode(@catch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@catch, v => v.Parameter, ctx.SendTree);
            ctx.SendNode(@catch, v => v.Body, ctx.SendTree);
            return @catch;
        }

        public override J VisitTypeCast(J.TypeCast typeCast, SenderContext ctx)
        {
            ctx.SendValue(typeCast, v => v.Id);
            ctx.SendNode(typeCast, v => v.Prefix, SendSpace);
            ctx.SendNode(typeCast, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(typeCast, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(typeCast, v => v.Expression, ctx.SendTree);
            return typeCast;
        }

        public override J VisitTypeParameter(J.TypeParameter typeParameter, SenderContext ctx)
        {
            ctx.SendValue(typeParameter, v => v.Id);
            ctx.SendNode(typeParameter, v => v.Prefix, SendSpace);
            ctx.SendNode(typeParameter, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(typeParameter, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(typeParameter, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(typeParameter, v => v.Name, ctx.SendTree);
            ctx.SendNode(typeParameter, v => v.Padding.Bounds, SendContainer);
            return typeParameter;
        }

        public override J VisitTypeParameters(J.TypeParameters typeParameters, SenderContext ctx)
        {
            ctx.SendValue(typeParameters, v => v.Id);
            ctx.SendNode(typeParameters, v => v.Prefix, SendSpace);
            ctx.SendNode(typeParameters, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(typeParameters, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(typeParameters, v => v.Padding.Parameters, SendRightPadded, t => t.Element.Id);
            return typeParameters;
        }

        public override J VisitUnary(J.Unary unary, SenderContext ctx)
        {
            ctx.SendValue(unary, v => v.Id);
            ctx.SendNode(unary, v => v.Prefix, SendSpace);
            ctx.SendNode(unary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unary, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(unary, v => v.Expression, ctx.SendTree);
            ctx.SendTypedValue(unary, v => v.Type);
            return unary;
        }

        public override J VisitVariableDeclarations(J.VariableDeclarations variableDeclarations, SenderContext ctx)
        {
            ctx.SendValue(variableDeclarations, v => v.Id);
            ctx.SendNode(variableDeclarations, v => v.Prefix, SendSpace);
            ctx.SendNode(variableDeclarations, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(variableDeclarations, v => v.LeadingAnnotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(variableDeclarations, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(variableDeclarations, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNode(variableDeclarations, v => v.Varargs, SendSpace);
            ctx.SendNodes(variableDeclarations, v => v.DimensionsBeforeName, SendLeftPadded, t => t);
            ctx.SendNodes(variableDeclarations, v => v.Padding.Variables, SendRightPadded, t => t.Element.Id);
            return variableDeclarations;
        }

        public override J VisitVariable(J.VariableDeclarations.NamedVariable namedVariable, SenderContext ctx)
        {
            ctx.SendValue(namedVariable, v => v.Id);
            ctx.SendNode(namedVariable, v => v.Prefix, SendSpace);
            ctx.SendNode(namedVariable, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(namedVariable, v => v.Name, ctx.SendTree);
            ctx.SendNodes(namedVariable, v => v.DimensionsAfterName, SendLeftPadded, t => t);
            ctx.SendNode(namedVariable, v => v.Padding.Initializer, SendLeftPadded);
            ctx.SendTypedValue(namedVariable, v => v.VariableType);
            return namedVariable;
        }

        public override J VisitWhileLoop(J.WhileLoop whileLoop, SenderContext ctx)
        {
            ctx.SendValue(whileLoop, v => v.Id);
            ctx.SendNode(whileLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(whileLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(whileLoop, v => v.Condition, ctx.SendTree);
            ctx.SendNode(whileLoop, v => v.Padding.Body, SendRightPadded);
            return whileLoop;
        }

        public override J VisitWildcard(J.Wildcard wildcard, SenderContext ctx)
        {
            ctx.SendValue(wildcard, v => v.Id);
            ctx.SendNode(wildcard, v => v.Prefix, SendSpace);
            ctx.SendNode(wildcard, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(wildcard, v => v.Padding.WildcardBound, SendLeftPadded);
            ctx.SendNode(wildcard, v => v.BoundedType, ctx.SendTree);
            return wildcard;
        }

        public override J VisitYield(J.Yield yield, SenderContext ctx)
        {
            ctx.SendValue(yield, v => v.Id);
            ctx.SendNode(yield, v => v.Prefix, SendSpace);
            ctx.SendNode(yield, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(yield, v => v.Implicit);
            ctx.SendNode(yield, v => v.Value, ctx.SendTree);
            return yield;
        }

        public override J VisitUnknown(J.Unknown unknown, SenderContext ctx)
        {
            ctx.SendValue(unknown, v => v.Id);
            ctx.SendNode(unknown, v => v.Prefix, SendSpace);
            ctx.SendNode(unknown, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unknown, v => v.UnknownSource, ctx.SendTree);
            return unknown;
        }

        public override J VisitUnknownSource(J.Unknown.Source source, SenderContext ctx)
        {
            ctx.SendValue(source, v => v.Id);
            ctx.SendNode(source, v => v.Prefix, SendSpace);
            ctx.SendNode(source, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(source, v => v.Text);
            return source;
        }

        private static void SendContainer<T>(JContainer<T> container, SenderContext ctx)
        where T : J
        {
            ctx.SendNode(container, v => v.Before, SendSpace);
            ctx.SendNodes(container, v => v.Padding.Elements, SendRightPadded, e => e.Element.Id);
            ctx.SendNode(container, v => v.Markers, ctx.SendMarkers);
        }

        private static void SendLeftPadded<T>(JLeftPadded<T> leftPadded, SenderContext ctx)
        {
            ctx.SendNode(leftPadded, v => v.Before, SendSpace);
            switch (leftPadded.Element)
            {
                case J:
                    ctx.SendNode(leftPadded, e => e.Element as J, ctx.SendTree);
                    break;
                case Space:
                    ctx.SendNode(leftPadded, e => e.Element as Space, SendSpace!);
                    break;
                default:
                    ctx.SendValue(leftPadded, e => e.Element);
                    break;
            }
            ctx.SendNode(leftPadded, v => v.Markers, ctx.SendMarkers);
        }

        private static void SendRightPadded<T>(JRightPadded<T> rightPadded, SenderContext ctx)
        {
            switch (rightPadded.Element)
            {
                case J:
                    ctx.SendNode(rightPadded, e => e.Element as J, ctx.SendTree);
                    break;
                case Space:
                    ctx.SendNode(rightPadded, e => e.Element as Space, SendSpace!);
                    break;
                default:
                    ctx.SendValue(rightPadded, e => e.Element);
                    break;
            }
            ctx.SendNode(rightPadded, v => v.After, SendSpace);
            ctx.SendNode(rightPadded, v => v.Markers, ctx.SendMarkers);
        }

        private static void SendSpace(Space space, SenderContext ctx)
        {
            ctx.SendNodes(space, v => v.Comments, SendComment, x => x);
            ctx.SendValue(space, v => v.Whitespace);
        }

        private static void SendComment(Comment comment, SenderContext ctx)
        {
            ctx.SendValue(comment, v => v.Multiline);
            if (comment is TextComment textComment) {
                ctx.SendValue(textComment, v => v.Text);
            } else {
                // FIXME add support for Javadoc
                ctx.SendValue(comment, v => "");
            }
            ctx.SendValue(comment, v => v.Suffix);
            ctx.SendNode(comment, v => v.Markers, ctx.SendMarkers);
        }

    }
}
