//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    /// <summary>
    /// Represents a Java lambda expression.
    /// <br/>Example:
    /// <code>{@code
    /// x -&gt; x.toString()
    /// }</code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Lambda(
    Guid id,
    Space prefix,
    Markers markers,
    Lambda.Parameters @params,
    Space arrow,
    J body,
    JavaType? type
    ) : J,Statement,Expression,TypedTree    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitLambda(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Lambda WithId(Guid newId)
        {
            return newId == Id ? this : new Lambda(newId, Prefix, Markers, Params, Arrow, Body, Type);
        }
        public Space Prefix { get;  set; } = prefix;

        public Lambda WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Lambda(Id, newPrefix, Markers, Params, Arrow, Body, Type);
        }
        public Markers Markers { get;  set; } = markers;

        public Lambda WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Lambda(Id, Prefix, newMarkers, Params, Arrow, Body, Type);
        }
        public Parameters Params { get;  set; } = @params;

        public Lambda WithParams(Parameters newParams)
        {
            return ReferenceEquals(newParams, Params) ? this : new Lambda(Id, Prefix, Markers, newParams, Arrow, Body, Type);
        }
        public Space Arrow { get;  set; } = arrow;

        public Lambda WithArrow(Space newArrow)
        {
            return newArrow == Arrow ? this : new Lambda(Id, Prefix, Markers, Params, newArrow, Body, Type);
        }
        public J Body { get;  set; } = body;

        public Lambda WithBody(J newBody)
        {
            return ReferenceEquals(newBody, Body) ? this : new Lambda(Id, Prefix, Markers, Params, Arrow, newBody, Type);
        }
        public JavaType? Type { get;  set; } = type;

        public Lambda WithType(JavaType? newType)
        {
            return newType == Type ? this : new Lambda(Id, Prefix, Markers, Params, Arrow, Body, newType);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class Parameters(
    Guid id,
    Space prefix,
    Markers markers,
    bool parenthesized,
    IList<JRightPadded<J>> elements
        ) : J, MutableTree
        {
            [NonSerialized] private WeakReference<PaddingHelper>? _padding;

            public PaddingHelper Padding
            {
                get
                {
                    PaddingHelper? p;
                    if (_padding == null)
                    {
                        p = new PaddingHelper(this);
                        _padding = new WeakReference<PaddingHelper>(p);
                    }
                    else
                    {
                        _padding.TryGetTarget(out p);
                        if (p == null || p.T != this)
                        {
                            p = new PaddingHelper(this);
                            _padding.SetTarget(p);
                        }
                    }
                    return p;
                }
            }

            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitLambdaParameters(this, p);
            }

            public Guid Id { get;  set; } = id;

            public Parameters WithId(Guid newId)
            {
                return newId == Id ? this : new Parameters(newId, Prefix, Markers, Parenthesized, _elements);
            }
            public Space Prefix { get;  set; } = prefix;

            public Parameters WithPrefix(Space newPrefix)
            {
                return newPrefix == Prefix ? this : new Parameters(Id, newPrefix, Markers, Parenthesized, _elements);
            }
            public Markers Markers { get;  set; } = markers;

            public Parameters WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, Markers) ? this : new Parameters(Id, Prefix, newMarkers, Parenthesized, _elements);
            }
            public bool Parenthesized { get;  set; } = parenthesized;

            public Parameters WithParenthesized(bool newParenthesized)
            {
                return newParenthesized == Parenthesized ? this : new Parameters(Id, Prefix, Markers, newParenthesized, _elements);
            }
            private IList<JRightPadded<J>> _elements = elements;
            public IList<J> Elements => _elements.Elements();

            public Parameters WithElements(IList<J> newElements)
            {
                return Padding.WithElements(_elements.WithElements(newElements));
            }
            public sealed record PaddingHelper(J.Lambda.Parameters T)
            {
                public IList<JRightPadded<J>> Elements { get => T._elements;  set => T._elements = value; }

                public J.Lambda.Parameters WithElements(IList<JRightPadded<J>> newElements)
                {
                    return Elements == newElements ? T : new J.Lambda.Parameters(T.Id, T.Prefix, T.Markers, T.Parenthesized, newElements);
                }

            }

            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Parameters && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Lambda && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}