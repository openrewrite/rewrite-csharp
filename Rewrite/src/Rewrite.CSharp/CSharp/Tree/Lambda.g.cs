//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Lambda(
    Guid id,
    Space prefix,
    Markers markers,
    J.Lambda lambdaExpression,
    TypeTree? returnType,
    IList<J.Modifier> modifiers
    ) : Cs, Statement, Expression, Expression<Lambda>, J<Lambda>, MutableTree<Lambda>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitLambda(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Lambda WithId(Guid newId)
        {
            return newId == Id ? this : new Lambda(newId, Prefix, Markers, LambdaExpression, ReturnType, Modifiers);
        }
        public Space Prefix { get;  set; } = prefix;

        public Lambda WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Lambda(Id, newPrefix, Markers, LambdaExpression, ReturnType, Modifiers);
        }
        public Markers Markers { get;  set; } = markers;

        public Lambda WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Lambda(Id, Prefix, newMarkers, LambdaExpression, ReturnType, Modifiers);
        }
        public J.Lambda LambdaExpression { get;  set; } = lambdaExpression;

        public Lambda WithLambdaExpression(J.Lambda newLambdaExpression)
        {
            return ReferenceEquals(newLambdaExpression, LambdaExpression) ? this : new Lambda(Id, Prefix, Markers, newLambdaExpression, ReturnType, Modifiers);
        }
        public TypeTree? ReturnType { get;  set; } = returnType;

        public Lambda WithReturnType(TypeTree? newReturnType)
        {
            return ReferenceEquals(newReturnType, ReturnType) ? this : new Lambda(Id, Prefix, Markers, LambdaExpression, newReturnType, Modifiers);
        }
        public IList<J.Modifier> Modifiers { get;  set; } = modifiers;

        public Lambda WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == Modifiers ? this : new Lambda(Id, Prefix, Markers, LambdaExpression, ReturnType, newModifiers);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Lambda && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}