//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class TypeParameter(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> annotations,
    IList<Modifier> modifiers,
    Expression name,
    JContainer<TypeTree>? bounds
    ) : J, J<TypeParameter>, MutableTree<TypeParameter>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitTypeParameter(this, p);
        }

        public Guid Id { get;  set; } = id;

        public TypeParameter WithId(Guid newId)
        {
            return newId == Id ? this : new TypeParameter(newId, Prefix, Markers, Annotations, Modifiers, Name, _bounds);
        }
        public Space Prefix { get;  set; } = prefix;

        public TypeParameter WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new TypeParameter(Id, newPrefix, Markers, Annotations, Modifiers, Name, _bounds);
        }
        public Markers Markers { get;  set; } = markers;

        public TypeParameter WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new TypeParameter(Id, Prefix, newMarkers, Annotations, Modifiers, Name, _bounds);
        }
        public IList<J.Annotation> Annotations { get;  set; } = annotations;

        public TypeParameter WithAnnotations(IList<J.Annotation> newAnnotations)
        {
            return newAnnotations == Annotations ? this : new TypeParameter(Id, Prefix, Markers, newAnnotations, Modifiers, Name, _bounds);
        }
        public IList<J.Modifier> Modifiers { get;  set; } = modifiers;

        public TypeParameter WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == Modifiers ? this : new TypeParameter(Id, Prefix, Markers, Annotations, newModifiers, Name, _bounds);
        }
        public Expression Name { get;  set; } = name;

        public TypeParameter WithName(Expression newName)
        {
            return ReferenceEquals(newName, Name) ? this : new TypeParameter(Id, Prefix, Markers, Annotations, Modifiers, newName, _bounds);
        }
        private JContainer<TypeTree>? _bounds = bounds;
        public IList<TypeTree>? Bounds => _bounds?.GetElements();

        public TypeParameter WithBounds(IList<TypeTree>? newBounds)
        {
            return Padding.WithBounds(JContainer<TypeTree>.WithElementsNullable(_bounds, newBounds));
        }
        public sealed record PaddingHelper(J.TypeParameter T)
        {
            public JContainer<TypeTree>? Bounds { get => T._bounds;  set => T._bounds = value; }

            public J.TypeParameter WithBounds(JContainer<TypeTree>? newBounds)
            {
                return Bounds == newBounds ? T : new J.TypeParameter(T.Id, T.Prefix, T.Markers, T.Annotations, T.Modifiers, T.Name, newBounds);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is TypeParameter && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}