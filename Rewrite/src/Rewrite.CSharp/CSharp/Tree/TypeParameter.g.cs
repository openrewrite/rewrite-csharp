//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# type parameter in generic type declarations, including optional variance and constraints.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple type parameter
    ///     class Container&lt;T&gt;
    ///     // Type parameter with variance
    ///     interface IEnumerable&lt;out T&gt;
    ///     // Type parameter with attributes
    ///     class Handler&lt;[Category("A")] T&gt;
    ///     // Type parameter with variance and attributes
    ///     interface IComparer&lt;[NotNull] in T&gt;
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class TypeParameter(
    Guid id,
    Space prefix,
    Markers markers,
    IList<AttributeList> attributeLists,
    JLeftPadded<TypeParameter.VarianceKind>? variance,
    J.Identifier name
    ) : Cs    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitTypeParameter(this, p);
        }

        public Guid Id { get;  set; } = id;

        public TypeParameter WithId(Guid newId)
        {
            return newId == Id ? this : new TypeParameter(newId, Prefix, Markers, AttributeLists, _variance, Name);
        }
        public Space Prefix { get;  set; } = prefix;

        public TypeParameter WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new TypeParameter(Id, newPrefix, Markers, AttributeLists, _variance, Name);
        }
        public Markers Markers { get;  set; } = markers;

        public TypeParameter WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new TypeParameter(Id, Prefix, newMarkers, AttributeLists, _variance, Name);
        }
        public IList<Cs.AttributeList> AttributeLists { get;  set; } = attributeLists;

        public TypeParameter WithAttributeLists(IList<Cs.AttributeList> newAttributeLists)
        {
            return newAttributeLists == AttributeLists ? this : new TypeParameter(Id, Prefix, Markers, newAttributeLists, _variance, Name);
        }
        private JLeftPadded<VarianceKind>? _variance = variance;
        public VarianceKind? Variance => _variance?.Element;

        public TypeParameter WithVariance(VarianceKind? newVariance)
        {
            return Padding.WithVariance(newVariance == null ? null : JLeftPadded<VarianceKind>.WithElement(_variance, newVariance.Value));
        }
        public J.Identifier Name { get;  set; } = name;

        public TypeParameter WithName(J.Identifier newName)
        {
            return ReferenceEquals(newName, Name) ? this : new TypeParameter(Id, Prefix, Markers, AttributeLists, _variance, newName);
        }
        public enum VarianceKind
        {
            In,
            Out,
        }
        public sealed record PaddingHelper(Cs.TypeParameter T)
        {
            public JLeftPadded<Cs.TypeParameter.VarianceKind>? Variance { get => T._variance;  set => T._variance = value; }

            public Cs.TypeParameter WithVariance(JLeftPadded<Cs.TypeParameter.VarianceKind>? newVariance)
            {
                return Variance == newVariance ? T : new Cs.TypeParameter(T.Id, T.Prefix, T.Markers, T.AttributeLists, newVariance, T.Name);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is TypeParameter && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}