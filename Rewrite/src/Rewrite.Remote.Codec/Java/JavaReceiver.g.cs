//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using Rewrite.Remote;
using Rewrite.RewriteJava;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.Remote.Codec.Java;

using Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "RedundantSuppressNullableWarningExpression")]
public record JavaReceiver : Receiver
{
    public ReceiverContext Fork(ReceiverContext ctx)
    {
        return ctx.Fork(new Visitor(), new Factory());
    }

    public object Receive<T>(T? before, ReceiverContext ctx) where T : Core.Tree
    {
        var forked = Fork(ctx);
        return forked.Visitor!.Visit(before, forked)!;
    }

    private class Visitor : JavaVisitor<ReceiverContext>
    {
        public override J? Visit(Tree? tree, ReceiverContext ctx)
        {
            Cursor = new Cursor(Cursor, tree!);

            tree = ctx.ReceiveNode((J?)tree, ctx.ReceiveTree);

            Cursor = Cursor.Parent!;
            return (J?)tree;
        }

        public override J VisitAnnotatedType(J.AnnotatedType annotatedType, ReceiverContext ctx)
        {
            annotatedType = annotatedType.WithId(ctx.ReceiveValue(annotatedType.Id)!);
            annotatedType = annotatedType.WithPrefix(ctx.ReceiveNode(annotatedType.Prefix, ReceiveSpace)!);
            annotatedType = annotatedType.WithMarkers(ctx.ReceiveNode(annotatedType.Markers, ctx.ReceiveMarkers)!);
            annotatedType = annotatedType.WithAnnotations(ctx.ReceiveNodes(annotatedType.Annotations, ctx.ReceiveTree)!);
            annotatedType = annotatedType.WithTypeExpression(ctx.ReceiveNode(annotatedType.TypeExpression, ctx.ReceiveTree)!);
            return annotatedType;
        }

        public override J VisitAnnotation(J.Annotation annotation, ReceiverContext ctx)
        {
            annotation = annotation.WithId(ctx.ReceiveValue(annotation.Id)!);
            annotation = annotation.WithPrefix(ctx.ReceiveNode(annotation.Prefix, ReceiveSpace)!);
            annotation = annotation.WithMarkers(ctx.ReceiveNode(annotation.Markers, ctx.ReceiveMarkers)!);
            annotation = annotation.WithAnnotationType(ctx.ReceiveNode(annotation.AnnotationType, ctx.ReceiveTree)!);
            annotation = annotation.Padding.WithArguments(ctx.ReceiveNode(annotation.Padding.Arguments, ReceiveContainer));
            return annotation;
        }

        public override J VisitArrayAccess(J.ArrayAccess arrayAccess, ReceiverContext ctx)
        {
            arrayAccess = arrayAccess.WithId(ctx.ReceiveValue(arrayAccess.Id)!);
            arrayAccess = arrayAccess.WithPrefix(ctx.ReceiveNode(arrayAccess.Prefix, ReceiveSpace)!);
            arrayAccess = arrayAccess.WithMarkers(ctx.ReceiveNode(arrayAccess.Markers, ctx.ReceiveMarkers)!);
            arrayAccess = arrayAccess.WithIndexed(ctx.ReceiveNode(arrayAccess.Indexed, ctx.ReceiveTree)!);
            arrayAccess = arrayAccess.WithDimension(ctx.ReceiveNode(arrayAccess.Dimension, ctx.ReceiveTree)!);
            arrayAccess = arrayAccess.WithType(ctx.ReceiveValue(arrayAccess.Type));
            return arrayAccess;
        }

        public override J VisitArrayType(J.ArrayType arrayType, ReceiverContext ctx)
        {
            arrayType = arrayType.WithId(ctx.ReceiveValue(arrayType.Id)!);
            arrayType = arrayType.WithPrefix(ctx.ReceiveNode(arrayType.Prefix, ReceiveSpace)!);
            arrayType = arrayType.WithMarkers(ctx.ReceiveNode(arrayType.Markers, ctx.ReceiveMarkers)!);
            arrayType = arrayType.WithElementType(ctx.ReceiveNode(arrayType.ElementType, ctx.ReceiveTree)!);
            arrayType = arrayType.WithAnnotations(ctx.ReceiveNodes(arrayType.Annotations, ctx.ReceiveTree));
            arrayType = arrayType.WithDimension(ctx.ReceiveNode(arrayType.Dimension, ReceiveLeftPadded));
            arrayType = arrayType.WithType(ctx.ReceiveValue(arrayType.Type)!);
            return arrayType;
        }

        public override J VisitAssert(J.Assert assert, ReceiverContext ctx)
        {
            assert = assert.WithId(ctx.ReceiveValue(assert.Id)!);
            assert = assert.WithPrefix(ctx.ReceiveNode(assert.Prefix, ReceiveSpace)!);
            assert = assert.WithMarkers(ctx.ReceiveNode(assert.Markers, ctx.ReceiveMarkers)!);
            assert = assert.WithCondition(ctx.ReceiveNode(assert.Condition, ctx.ReceiveTree)!);
            assert = assert.WithDetail(ctx.ReceiveNode(assert.Detail, ReceiveLeftPadded));
            return assert;
        }

        public override J VisitAssignment(J.Assignment assignment, ReceiverContext ctx)
        {
            assignment = assignment.WithId(ctx.ReceiveValue(assignment.Id)!);
            assignment = assignment.WithPrefix(ctx.ReceiveNode(assignment.Prefix, ReceiveSpace)!);
            assignment = assignment.WithMarkers(ctx.ReceiveNode(assignment.Markers, ctx.ReceiveMarkers)!);
            assignment = assignment.WithVariable(ctx.ReceiveNode(assignment.Variable, ctx.ReceiveTree)!);
            assignment = assignment.Padding.WithExpression(ctx.ReceiveNode(assignment.Padding.Expression, ReceiveLeftPadded)!);
            assignment = assignment.WithType(ctx.ReceiveValue(assignment.Type));
            return assignment;
        }

        public override J VisitAssignmentOperation(J.AssignmentOperation assignmentOperation, ReceiverContext ctx)
        {
            assignmentOperation = assignmentOperation.WithId(ctx.ReceiveValue(assignmentOperation.Id)!);
            assignmentOperation = assignmentOperation.WithPrefix(ctx.ReceiveNode(assignmentOperation.Prefix, ReceiveSpace)!);
            assignmentOperation = assignmentOperation.WithMarkers(ctx.ReceiveNode(assignmentOperation.Markers, ctx.ReceiveMarkers)!);
            assignmentOperation = assignmentOperation.WithVariable(ctx.ReceiveNode(assignmentOperation.Variable, ctx.ReceiveTree)!);
            assignmentOperation = assignmentOperation.Padding.WithOperator(ctx.ReceiveNode(assignmentOperation.Padding.Operator, ReceiveLeftPadded)!);
            assignmentOperation = assignmentOperation.WithAssignment(ctx.ReceiveNode(assignmentOperation.Assignment, ctx.ReceiveTree)!);
            assignmentOperation = assignmentOperation.WithType(ctx.ReceiveValue(assignmentOperation.Type));
            return assignmentOperation;
        }

        public override J VisitBinary(J.Binary binary, ReceiverContext ctx)
        {
            binary = binary.WithId(ctx.ReceiveValue(binary.Id)!);
            binary = binary.WithPrefix(ctx.ReceiveNode(binary.Prefix, ReceiveSpace)!);
            binary = binary.WithMarkers(ctx.ReceiveNode(binary.Markers, ctx.ReceiveMarkers)!);
            binary = binary.WithLeft(ctx.ReceiveNode(binary.Left, ctx.ReceiveTree)!);
            binary = binary.Padding.WithOperator(ctx.ReceiveNode(binary.Padding.Operator, ReceiveLeftPadded)!);
            binary = binary.WithRight(ctx.ReceiveNode(binary.Right, ctx.ReceiveTree)!);
            binary = binary.WithType(ctx.ReceiveValue(binary.Type));
            return binary;
        }

        public override J VisitBlock(J.Block block, ReceiverContext ctx)
        {
            block = block.WithId(ctx.ReceiveValue(block.Id)!);
            block = block.WithPrefix(ctx.ReceiveNode(block.Prefix, ReceiveSpace)!);
            block = block.WithMarkers(ctx.ReceiveNode(block.Markers, ctx.ReceiveMarkers)!);
            block = block.Padding.WithStatic(ctx.ReceiveNode(block.Padding.Static, ReceiveRightPadded)!);
            block = block.Padding.WithStatements(ctx.ReceiveNodes(block.Padding.Statements, ReceiveRightPadded)!);
            block = block.WithEnd(ctx.ReceiveNode(block.End, ReceiveSpace)!);
            return block;
        }

        public override J VisitBreak(J.Break @break, ReceiverContext ctx)
        {
            @break = @break.WithId(ctx.ReceiveValue(@break.Id)!);
            @break = @break.WithPrefix(ctx.ReceiveNode(@break.Prefix, ReceiveSpace)!);
            @break = @break.WithMarkers(ctx.ReceiveNode(@break.Markers, ctx.ReceiveMarkers)!);
            @break = @break.WithLabel(ctx.ReceiveNode(@break.Label, ctx.ReceiveTree));
            return @break;
        }

        public override J VisitCase(J.Case @case, ReceiverContext ctx)
        {
            @case = @case.WithId(ctx.ReceiveValue(@case.Id)!);
            @case = @case.WithPrefix(ctx.ReceiveNode(@case.Prefix, ReceiveSpace)!);
            @case = @case.WithMarkers(ctx.ReceiveNode(@case.Markers, ctx.ReceiveMarkers)!);
            @case = @case.WithCaseType(ctx.ReceiveValue(@case.CaseType)!);
            @case = @case.Padding.WithExpressions(ctx.ReceiveNode(@case.Padding.Expressions, ReceiveContainer)!);
            @case = @case.Padding.WithStatements(ctx.ReceiveNode(@case.Padding.Statements, ReceiveContainer)!);
            @case = @case.Padding.WithBody(ctx.ReceiveNode(@case.Padding.Body, ReceiveRightPadded));
            return @case;
        }

        public override J VisitClassDeclaration(J.ClassDeclaration classDeclaration, ReceiverContext ctx)
        {
            classDeclaration = classDeclaration.WithId(ctx.ReceiveValue(classDeclaration.Id)!);
            classDeclaration = classDeclaration.WithPrefix(ctx.ReceiveNode(classDeclaration.Prefix, ReceiveSpace)!);
            classDeclaration = classDeclaration.WithMarkers(ctx.ReceiveNode(classDeclaration.Markers, ctx.ReceiveMarkers)!);
            classDeclaration = classDeclaration.WithLeadingAnnotations(ctx.ReceiveNodes(classDeclaration.LeadingAnnotations, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithModifiers(ctx.ReceiveNodes(classDeclaration.Modifiers, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.Padding.WithDeclarationKind(ctx.ReceiveNode(classDeclaration.Padding.DeclarationKind, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithName(ctx.ReceiveNode(classDeclaration.Name, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.Padding.WithTypeParameters(ctx.ReceiveNode(classDeclaration.Padding.TypeParameters, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithPrimaryConstructor(ctx.ReceiveNode(classDeclaration.Padding.PrimaryConstructor, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithExtends(ctx.ReceiveNode(classDeclaration.Padding.Extends, ReceiveLeftPadded));
            classDeclaration = classDeclaration.Padding.WithImplements(ctx.ReceiveNode(classDeclaration.Padding.Implements, ReceiveContainer));
            classDeclaration = classDeclaration.Padding.WithPermits(ctx.ReceiveNode(classDeclaration.Padding.Permits, ReceiveContainer));
            classDeclaration = classDeclaration.WithBody(ctx.ReceiveNode(classDeclaration.Body, ctx.ReceiveTree)!);
            classDeclaration = classDeclaration.WithType(ctx.ReceiveValue(classDeclaration.Type));
            return classDeclaration;
        }

        public override J VisitClassDeclarationKind(J.ClassDeclaration.Kind kind, ReceiverContext ctx)
        {
            kind = kind.WithId(ctx.ReceiveValue(kind.Id)!);
            kind = kind.WithPrefix(ctx.ReceiveNode(kind.Prefix, ReceiveSpace)!);
            kind = kind.WithMarkers(ctx.ReceiveNode(kind.Markers, ctx.ReceiveMarkers)!);
            kind = kind.WithAnnotations(ctx.ReceiveNodes(kind.Annotations, ctx.ReceiveTree)!);
            kind = kind.WithKindType(ctx.ReceiveValue(kind.KindType)!);
            return kind;
        }

        public override J VisitCompilationUnit(J.CompilationUnit compilationUnit, ReceiverContext ctx)
        {
            compilationUnit = compilationUnit.WithId(ctx.ReceiveValue(compilationUnit.Id)!);
            compilationUnit = compilationUnit.WithPrefix(ctx.ReceiveNode(compilationUnit.Prefix, ReceiveSpace)!);
            compilationUnit = compilationUnit.WithMarkers(ctx.ReceiveNode(compilationUnit.Markers, ctx.ReceiveMarkers)!);
            compilationUnit = compilationUnit.WithSourcePath(ctx.ReceiveValue(compilationUnit.SourcePath)!);
            compilationUnit = compilationUnit.WithFileAttributes(ctx.ReceiveValue(compilationUnit.FileAttributes));
            compilationUnit = compilationUnit.WithCharsetName(ctx.ReceiveValue(compilationUnit.CharsetName));
            compilationUnit = compilationUnit.WithCharsetBomMarked(ctx.ReceiveValue(compilationUnit.CharsetBomMarked));
            compilationUnit = compilationUnit.WithChecksum(ctx.ReceiveValue(compilationUnit.Checksum));
            compilationUnit = compilationUnit.Padding.WithPackageDeclaration(ctx.ReceiveNode(compilationUnit.Padding.PackageDeclaration, ReceiveRightPadded));
            compilationUnit = compilationUnit.Padding.WithImports(ctx.ReceiveNodes(compilationUnit.Padding.Imports, ReceiveRightPadded)!);
            compilationUnit = compilationUnit.WithClasses(ctx.ReceiveNodes(compilationUnit.Classes, ctx.ReceiveTree)!);
            compilationUnit = compilationUnit.WithEof(ctx.ReceiveNode(compilationUnit.Eof, ReceiveSpace)!);
            return compilationUnit;
        }

        public override J VisitContinue(J.Continue @continue, ReceiverContext ctx)
        {
            @continue = @continue.WithId(ctx.ReceiveValue(@continue.Id)!);
            @continue = @continue.WithPrefix(ctx.ReceiveNode(@continue.Prefix, ReceiveSpace)!);
            @continue = @continue.WithMarkers(ctx.ReceiveNode(@continue.Markers, ctx.ReceiveMarkers)!);
            @continue = @continue.WithLabel(ctx.ReceiveNode(@continue.Label, ctx.ReceiveTree));
            return @continue;
        }

        public override J VisitDoWhileLoop(J.DoWhileLoop doWhileLoop, ReceiverContext ctx)
        {
            doWhileLoop = doWhileLoop.WithId(ctx.ReceiveValue(doWhileLoop.Id)!);
            doWhileLoop = doWhileLoop.WithPrefix(ctx.ReceiveNode(doWhileLoop.Prefix, ReceiveSpace)!);
            doWhileLoop = doWhileLoop.WithMarkers(ctx.ReceiveNode(doWhileLoop.Markers, ctx.ReceiveMarkers)!);
            doWhileLoop = doWhileLoop.Padding.WithBody(ctx.ReceiveNode(doWhileLoop.Padding.Body, ReceiveRightPadded)!);
            doWhileLoop = doWhileLoop.Padding.WithWhileCondition(ctx.ReceiveNode(doWhileLoop.Padding.WhileCondition, ReceiveLeftPadded)!);
            return doWhileLoop;
        }

        public override J VisitEmpty(J.Empty empty, ReceiverContext ctx)
        {
            empty = empty.WithId(ctx.ReceiveValue(empty.Id)!);
            empty = empty.WithPrefix(ctx.ReceiveNode(empty.Prefix, ReceiveSpace)!);
            empty = empty.WithMarkers(ctx.ReceiveNode(empty.Markers, ctx.ReceiveMarkers)!);
            return empty;
        }

        public override J VisitEnumValue(J.EnumValue enumValue, ReceiverContext ctx)
        {
            enumValue = enumValue.WithId(ctx.ReceiveValue(enumValue.Id)!);
            enumValue = enumValue.WithPrefix(ctx.ReceiveNode(enumValue.Prefix, ReceiveSpace)!);
            enumValue = enumValue.WithMarkers(ctx.ReceiveNode(enumValue.Markers, ctx.ReceiveMarkers)!);
            enumValue = enumValue.WithAnnotations(ctx.ReceiveNodes(enumValue.Annotations, ctx.ReceiveTree)!);
            enumValue = enumValue.WithName(ctx.ReceiveNode(enumValue.Name, ctx.ReceiveTree)!);
            enumValue = enumValue.WithInitializer(ctx.ReceiveNode(enumValue.Initializer, ctx.ReceiveTree));
            return enumValue;
        }

        public override J VisitEnumValueSet(J.EnumValueSet enumValueSet, ReceiverContext ctx)
        {
            enumValueSet = enumValueSet.WithId(ctx.ReceiveValue(enumValueSet.Id)!);
            enumValueSet = enumValueSet.WithPrefix(ctx.ReceiveNode(enumValueSet.Prefix, ReceiveSpace)!);
            enumValueSet = enumValueSet.WithMarkers(ctx.ReceiveNode(enumValueSet.Markers, ctx.ReceiveMarkers)!);
            enumValueSet = enumValueSet.Padding.WithEnums(ctx.ReceiveNodes(enumValueSet.Padding.Enums, ReceiveRightPadded)!);
            enumValueSet = enumValueSet.WithTerminatedWithSemicolon(ctx.ReceiveValue(enumValueSet.TerminatedWithSemicolon));
            return enumValueSet;
        }

        public override J VisitFieldAccess(J.FieldAccess fieldAccess, ReceiverContext ctx)
        {
            fieldAccess = fieldAccess.WithId(ctx.ReceiveValue(fieldAccess.Id)!);
            fieldAccess = fieldAccess.WithPrefix(ctx.ReceiveNode(fieldAccess.Prefix, ReceiveSpace)!);
            fieldAccess = fieldAccess.WithMarkers(ctx.ReceiveNode(fieldAccess.Markers, ctx.ReceiveMarkers)!);
            fieldAccess = fieldAccess.WithTarget(ctx.ReceiveNode(fieldAccess.Target, ctx.ReceiveTree)!);
            fieldAccess = fieldAccess.Padding.WithName(ctx.ReceiveNode(fieldAccess.Padding.Name, ReceiveLeftPadded)!);
            fieldAccess = fieldAccess.WithType(ctx.ReceiveValue(fieldAccess.Type));
            return fieldAccess;
        }

        public override J VisitForEachLoop(J.ForEachLoop forEachLoop, ReceiverContext ctx)
        {
            forEachLoop = forEachLoop.WithId(ctx.ReceiveValue(forEachLoop.Id)!);
            forEachLoop = forEachLoop.WithPrefix(ctx.ReceiveNode(forEachLoop.Prefix, ReceiveSpace)!);
            forEachLoop = forEachLoop.WithMarkers(ctx.ReceiveNode(forEachLoop.Markers, ctx.ReceiveMarkers)!);
            forEachLoop = forEachLoop.WithLoopControl(ctx.ReceiveNode(forEachLoop.LoopControl, ctx.ReceiveTree)!);
            forEachLoop = forEachLoop.Padding.WithBody(ctx.ReceiveNode(forEachLoop.Padding.Body, ReceiveRightPadded)!);
            return forEachLoop;
        }

        public override J VisitForEachControl(J.ForEachLoop.Control control, ReceiverContext ctx)
        {
            control = control.WithId(ctx.ReceiveValue(control.Id)!);
            control = control.WithPrefix(ctx.ReceiveNode(control.Prefix, ReceiveSpace)!);
            control = control.WithMarkers(ctx.ReceiveNode(control.Markers, ctx.ReceiveMarkers)!);
            control = control.Padding.WithVariable(ctx.ReceiveNode(control.Padding.Variable, ReceiveRightPadded)!);
            control = control.Padding.WithIterable(ctx.ReceiveNode(control.Padding.Iterable, ReceiveRightPadded)!);
            return control;
        }

        public override J VisitForLoop(J.ForLoop forLoop, ReceiverContext ctx)
        {
            forLoop = forLoop.WithId(ctx.ReceiveValue(forLoop.Id)!);
            forLoop = forLoop.WithPrefix(ctx.ReceiveNode(forLoop.Prefix, ReceiveSpace)!);
            forLoop = forLoop.WithMarkers(ctx.ReceiveNode(forLoop.Markers, ctx.ReceiveMarkers)!);
            forLoop = forLoop.WithLoopControl(ctx.ReceiveNode(forLoop.LoopControl, ctx.ReceiveTree)!);
            forLoop = forLoop.Padding.WithBody(ctx.ReceiveNode(forLoop.Padding.Body, ReceiveRightPadded)!);
            return forLoop;
        }

        public override J VisitForControl(J.ForLoop.Control control, ReceiverContext ctx)
        {
            control = control.WithId(ctx.ReceiveValue(control.Id)!);
            control = control.WithPrefix(ctx.ReceiveNode(control.Prefix, ReceiveSpace)!);
            control = control.WithMarkers(ctx.ReceiveNode(control.Markers, ctx.ReceiveMarkers)!);
            control = control.Padding.WithInit(ctx.ReceiveNodes(control.Padding.Init, ReceiveRightPadded)!);
            control = control.Padding.WithCondition(ctx.ReceiveNode(control.Padding.Condition, ReceiveRightPadded)!);
            control = control.Padding.WithUpdate(ctx.ReceiveNodes(control.Padding.Update, ReceiveRightPadded)!);
            return control;
        }

        public override J VisitParenthesizedTypeTree(J.ParenthesizedTypeTree parenthesizedTypeTree, ReceiverContext ctx)
        {
            parenthesizedTypeTree = parenthesizedTypeTree.WithId(ctx.ReceiveValue(parenthesizedTypeTree.Id)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithPrefix(ctx.ReceiveNode(parenthesizedTypeTree.Prefix, ReceiveSpace)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithMarkers(ctx.ReceiveNode(parenthesizedTypeTree.Markers, ctx.ReceiveMarkers)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithAnnotations(ctx.ReceiveNodes(parenthesizedTypeTree.Annotations, ctx.ReceiveTree)!);
            parenthesizedTypeTree = parenthesizedTypeTree.WithParenthesizedType(ctx.ReceiveNode(parenthesizedTypeTree.ParenthesizedType, ctx.ReceiveTree)!);
            return parenthesizedTypeTree;
        }

        public override J VisitIdentifier(J.Identifier identifier, ReceiverContext ctx)
        {
            identifier = identifier.WithId(ctx.ReceiveValue(identifier.Id)!);
            identifier = identifier.WithPrefix(ctx.ReceiveNode(identifier.Prefix, ReceiveSpace)!);
            identifier = identifier.WithMarkers(ctx.ReceiveNode(identifier.Markers, ctx.ReceiveMarkers)!);
            identifier = identifier.WithAnnotations(ctx.ReceiveNodes(identifier.Annotations, ctx.ReceiveTree)!);
            identifier = identifier.WithSimpleName(ctx.ReceiveValue(identifier.SimpleName)!);
            identifier = identifier.WithType(ctx.ReceiveValue(identifier.Type));
            identifier = identifier.WithFieldType(ctx.ReceiveValue(identifier.FieldType));
            return identifier;
        }

        public override J VisitIf(J.If @if, ReceiverContext ctx)
        {
            @if = @if.WithId(ctx.ReceiveValue(@if.Id)!);
            @if = @if.WithPrefix(ctx.ReceiveNode(@if.Prefix, ReceiveSpace)!);
            @if = @if.WithMarkers(ctx.ReceiveNode(@if.Markers, ctx.ReceiveMarkers)!);
            @if = @if.WithIfCondition(ctx.ReceiveNode(@if.IfCondition, ReceiveControlParentheses)!);
            @if = @if.Padding.WithThenPart(ctx.ReceiveNode(@if.Padding.ThenPart, ReceiveRightPadded)!);
            @if = @if.WithElsePart(ctx.ReceiveNode(@if.ElsePart, ctx.ReceiveTree));
            return @if;
        }

        public override J VisitElse(J.If.Else @else, ReceiverContext ctx)
        {
            @else = @else.WithId(ctx.ReceiveValue(@else.Id)!);
            @else = @else.WithPrefix(ctx.ReceiveNode(@else.Prefix, ReceiveSpace)!);
            @else = @else.WithMarkers(ctx.ReceiveNode(@else.Markers, ctx.ReceiveMarkers)!);
            @else = @else.Padding.WithBody(ctx.ReceiveNode(@else.Padding.Body, ReceiveRightPadded)!);
            return @else;
        }

        public override J VisitImport(J.Import import, ReceiverContext ctx)
        {
            import = import.WithId(ctx.ReceiveValue(import.Id)!);
            import = import.WithPrefix(ctx.ReceiveNode(import.Prefix, ReceiveSpace)!);
            import = import.WithMarkers(ctx.ReceiveNode(import.Markers, ctx.ReceiveMarkers)!);
            import = import.Padding.WithStatic(ctx.ReceiveNode(import.Padding.Static, ReceiveLeftPadded)!);
            import = import.WithQualid(ctx.ReceiveNode(import.Qualid, ctx.ReceiveTree)!);
            import = import.Padding.WithAlias(ctx.ReceiveNode(import.Padding.Alias, ReceiveLeftPadded));
            return import;
        }

        public override J VisitInstanceOf(J.InstanceOf instanceOf, ReceiverContext ctx)
        {
            instanceOf = instanceOf.WithId(ctx.ReceiveValue(instanceOf.Id)!);
            instanceOf = instanceOf.WithPrefix(ctx.ReceiveNode(instanceOf.Prefix, ReceiveSpace)!);
            instanceOf = instanceOf.WithMarkers(ctx.ReceiveNode(instanceOf.Markers, ctx.ReceiveMarkers)!);
            instanceOf = instanceOf.Padding.WithExpression(ctx.ReceiveNode(instanceOf.Padding.Expression, ReceiveRightPadded)!);
            instanceOf = instanceOf.WithClazz(ctx.ReceiveNode(instanceOf.Clazz, ctx.ReceiveTree)!);
            instanceOf = instanceOf.WithPattern(ctx.ReceiveNode(instanceOf.Pattern, ctx.ReceiveTree));
            instanceOf = instanceOf.WithType(ctx.ReceiveValue(instanceOf.Type));
            return instanceOf;
        }

        public override J VisitIntersectionType(J.IntersectionType intersectionType, ReceiverContext ctx)
        {
            intersectionType = intersectionType.WithId(ctx.ReceiveValue(intersectionType.Id)!);
            intersectionType = intersectionType.WithPrefix(ctx.ReceiveNode(intersectionType.Prefix, ReceiveSpace)!);
            intersectionType = intersectionType.WithMarkers(ctx.ReceiveNode(intersectionType.Markers, ctx.ReceiveMarkers)!);
            intersectionType = intersectionType.Padding.WithBounds(ctx.ReceiveNode(intersectionType.Padding.Bounds, ReceiveContainer)!);
            return intersectionType;
        }

        public override J VisitLabel(J.Label label, ReceiverContext ctx)
        {
            label = label.WithId(ctx.ReceiveValue(label.Id)!);
            label = label.WithPrefix(ctx.ReceiveNode(label.Prefix, ReceiveSpace)!);
            label = label.WithMarkers(ctx.ReceiveNode(label.Markers, ctx.ReceiveMarkers)!);
            label = label.Padding.WithName(ctx.ReceiveNode(label.Padding.Name, ReceiveRightPadded)!);
            label = label.WithStatement(ctx.ReceiveNode(label.Statement, ctx.ReceiveTree)!);
            return label;
        }

        public override J VisitLambda(J.Lambda lambda, ReceiverContext ctx)
        {
            lambda = lambda.WithId(ctx.ReceiveValue(lambda.Id)!);
            lambda = lambda.WithPrefix(ctx.ReceiveNode(lambda.Prefix, ReceiveSpace)!);
            lambda = lambda.WithMarkers(ctx.ReceiveNode(lambda.Markers, ctx.ReceiveMarkers)!);
            lambda = lambda.WithParams(ctx.ReceiveNode(lambda.Params, ctx.ReceiveTree)!);
            lambda = lambda.WithArrow(ctx.ReceiveNode(lambda.Arrow, ReceiveSpace)!);
            lambda = lambda.WithBody(ctx.ReceiveNode(lambda.Body, ctx.ReceiveTree)!);
            lambda = lambda.WithType(ctx.ReceiveValue(lambda.Type));
            return lambda;
        }

        public override J VisitLambdaParameters(J.Lambda.Parameters parameters, ReceiverContext ctx)
        {
            parameters = parameters.WithId(ctx.ReceiveValue(parameters.Id)!);
            parameters = parameters.WithPrefix(ctx.ReceiveNode(parameters.Prefix, ReceiveSpace)!);
            parameters = parameters.WithMarkers(ctx.ReceiveNode(parameters.Markers, ctx.ReceiveMarkers)!);
            parameters = parameters.WithParenthesized(ctx.ReceiveValue(parameters.Parenthesized));
            parameters = parameters.Padding.WithElements(ctx.ReceiveNodes(parameters.Padding.Elements, ReceiveRightPadded)!);
            return parameters;
        }

        public override J VisitLiteral(J.Literal literal, ReceiverContext ctx)
        {
            literal = literal.WithId(ctx.ReceiveValue(literal.Id)!);
            literal = literal.WithPrefix(ctx.ReceiveNode(literal.Prefix, ReceiveSpace)!);
            literal = literal.WithMarkers(ctx.ReceiveNode(literal.Markers, ctx.ReceiveMarkers)!);
            literal = literal.WithValue(ctx.ReceiveValue(literal.Value));
            literal = literal.WithValueSource(ctx.ReceiveValue(literal.ValueSource));
            literal = literal.WithUnicodeEscapes(ctx.ReceiveValues(literal.UnicodeEscapes));
            literal = literal.WithType(ctx.ReceiveValue(literal.Type)!);
            return literal;
        }

        public override J VisitMemberReference(J.MemberReference memberReference, ReceiverContext ctx)
        {
            memberReference = memberReference.WithId(ctx.ReceiveValue(memberReference.Id)!);
            memberReference = memberReference.WithPrefix(ctx.ReceiveNode(memberReference.Prefix, ReceiveSpace)!);
            memberReference = memberReference.WithMarkers(ctx.ReceiveNode(memberReference.Markers, ctx.ReceiveMarkers)!);
            memberReference = memberReference.Padding.WithContaining(ctx.ReceiveNode(memberReference.Padding.Containing, ReceiveRightPadded)!);
            memberReference = memberReference.Padding.WithTypeParameters(ctx.ReceiveNode(memberReference.Padding.TypeParameters, ReceiveContainer));
            memberReference = memberReference.Padding.WithReference(ctx.ReceiveNode(memberReference.Padding.Reference, ReceiveLeftPadded)!);
            memberReference = memberReference.WithType(ctx.ReceiveValue(memberReference.Type));
            memberReference = memberReference.WithMethodType(ctx.ReceiveValue(memberReference.MethodType));
            memberReference = memberReference.WithVariableType(ctx.ReceiveValue(memberReference.VariableType));
            return memberReference;
        }

        public override J VisitMethodDeclaration(J.MethodDeclaration methodDeclaration, ReceiverContext ctx)
        {
            methodDeclaration = methodDeclaration.WithId(ctx.ReceiveValue(methodDeclaration.Id)!);
            methodDeclaration = methodDeclaration.WithPrefix(ctx.ReceiveNode(methodDeclaration.Prefix, ReceiveSpace)!);
            methodDeclaration = methodDeclaration.WithMarkers(ctx.ReceiveNode(methodDeclaration.Markers, ctx.ReceiveMarkers)!);
            methodDeclaration = methodDeclaration.WithLeadingAnnotations(ctx.ReceiveNodes(methodDeclaration.LeadingAnnotations, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.WithModifiers(ctx.ReceiveNodes(methodDeclaration.Modifiers, ctx.ReceiveTree)!);
            methodDeclaration = methodDeclaration.Annotations.WithTypeParameters(ctx.ReceiveNode(methodDeclaration.Annotations.TypeParameters, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.WithReturnTypeExpression(ctx.ReceiveNode(methodDeclaration.ReturnTypeExpression, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.Annotations.WithName(ctx.ReceiveNode(methodDeclaration.Annotations.Name, ReceiveMethodIdentifierWithAnnotations)!);
            methodDeclaration = methodDeclaration.Padding.WithParameters(ctx.ReceiveNode(methodDeclaration.Padding.Parameters, ReceiveContainer)!);
            methodDeclaration = methodDeclaration.Padding.WithThrows(ctx.ReceiveNode(methodDeclaration.Padding.Throws, ReceiveContainer));
            methodDeclaration = methodDeclaration.WithBody(ctx.ReceiveNode(methodDeclaration.Body, ctx.ReceiveTree));
            methodDeclaration = methodDeclaration.Padding.WithDefaultValue(ctx.ReceiveNode(methodDeclaration.Padding.DefaultValue, ReceiveLeftPadded));
            methodDeclaration = methodDeclaration.WithMethodType(ctx.ReceiveValue(methodDeclaration.MethodType));
            return methodDeclaration;
        }

        public override J VisitMethodInvocation(J.MethodInvocation methodInvocation, ReceiverContext ctx)
        {
            methodInvocation = methodInvocation.WithId(ctx.ReceiveValue(methodInvocation.Id)!);
            methodInvocation = methodInvocation.WithPrefix(ctx.ReceiveNode(methodInvocation.Prefix, ReceiveSpace)!);
            methodInvocation = methodInvocation.WithMarkers(ctx.ReceiveNode(methodInvocation.Markers, ctx.ReceiveMarkers)!);
            methodInvocation = methodInvocation.Padding.WithSelect(ctx.ReceiveNode(methodInvocation.Padding.Select, ReceiveRightPadded));
            methodInvocation = methodInvocation.Padding.WithTypeParameters(ctx.ReceiveNode(methodInvocation.Padding.TypeParameters, ReceiveContainer));
            methodInvocation = methodInvocation.WithName(ctx.ReceiveNode(methodInvocation.Name, ctx.ReceiveTree)!);
            methodInvocation = methodInvocation.Padding.WithArguments(ctx.ReceiveNode(methodInvocation.Padding.Arguments, ReceiveContainer)!);
            methodInvocation = methodInvocation.WithMethodType(ctx.ReceiveValue(methodInvocation.MethodType));
            return methodInvocation;
        }

        public override J VisitModifier(J.Modifier modifier, ReceiverContext ctx)
        {
            modifier = modifier.WithId(ctx.ReceiveValue(modifier.Id)!);
            modifier = modifier.WithPrefix(ctx.ReceiveNode(modifier.Prefix, ReceiveSpace)!);
            modifier = modifier.WithMarkers(ctx.ReceiveNode(modifier.Markers, ctx.ReceiveMarkers)!);
            modifier = modifier.WithKeyword(ctx.ReceiveValue(modifier.Keyword));
            modifier = modifier.WithModifierType(ctx.ReceiveValue(modifier.ModifierType)!);
            modifier = modifier.WithAnnotations(ctx.ReceiveNodes(modifier.Annotations, ctx.ReceiveTree)!);
            return modifier;
        }

        public override J VisitMultiCatch(J.MultiCatch multiCatch, ReceiverContext ctx)
        {
            multiCatch = multiCatch.WithId(ctx.ReceiveValue(multiCatch.Id)!);
            multiCatch = multiCatch.WithPrefix(ctx.ReceiveNode(multiCatch.Prefix, ReceiveSpace)!);
            multiCatch = multiCatch.WithMarkers(ctx.ReceiveNode(multiCatch.Markers, ctx.ReceiveMarkers)!);
            multiCatch = multiCatch.Padding.WithAlternatives(ctx.ReceiveNodes(multiCatch.Padding.Alternatives, ReceiveRightPadded)!);
            return multiCatch;
        }

        public override J VisitNewArray(J.NewArray newArray, ReceiverContext ctx)
        {
            newArray = newArray.WithId(ctx.ReceiveValue(newArray.Id)!);
            newArray = newArray.WithPrefix(ctx.ReceiveNode(newArray.Prefix, ReceiveSpace)!);
            newArray = newArray.WithMarkers(ctx.ReceiveNode(newArray.Markers, ctx.ReceiveMarkers)!);
            newArray = newArray.WithTypeExpression(ctx.ReceiveNode(newArray.TypeExpression, ctx.ReceiveTree));
            newArray = newArray.WithDimensions(ctx.ReceiveNodes(newArray.Dimensions, ctx.ReceiveTree)!);
            newArray = newArray.Padding.WithInitializer(ctx.ReceiveNode(newArray.Padding.Initializer, ReceiveContainer));
            newArray = newArray.WithType(ctx.ReceiveValue(newArray.Type));
            return newArray;
        }

        public override J VisitArrayDimension(J.ArrayDimension arrayDimension, ReceiverContext ctx)
        {
            arrayDimension = arrayDimension.WithId(ctx.ReceiveValue(arrayDimension.Id)!);
            arrayDimension = arrayDimension.WithPrefix(ctx.ReceiveNode(arrayDimension.Prefix, ReceiveSpace)!);
            arrayDimension = arrayDimension.WithMarkers(ctx.ReceiveNode(arrayDimension.Markers, ctx.ReceiveMarkers)!);
            arrayDimension = arrayDimension.Padding.WithIndex(ctx.ReceiveNode(arrayDimension.Padding.Index, ReceiveRightPadded)!);
            return arrayDimension;
        }

        public override J VisitNewClass(J.NewClass newClass, ReceiverContext ctx)
        {
            newClass = newClass.WithId(ctx.ReceiveValue(newClass.Id)!);
            newClass = newClass.WithPrefix(ctx.ReceiveNode(newClass.Prefix, ReceiveSpace)!);
            newClass = newClass.WithMarkers(ctx.ReceiveNode(newClass.Markers, ctx.ReceiveMarkers)!);
            newClass = newClass.Padding.WithEnclosing(ctx.ReceiveNode(newClass.Padding.Enclosing, ReceiveRightPadded));
            newClass = newClass.WithNew(ctx.ReceiveNode(newClass.New, ReceiveSpace)!);
            newClass = newClass.WithClazz(ctx.ReceiveNode(newClass.Clazz, ctx.ReceiveTree));
            newClass = newClass.Padding.WithArguments(ctx.ReceiveNode(newClass.Padding.Arguments, ReceiveContainer)!);
            newClass = newClass.WithBody(ctx.ReceiveNode(newClass.Body, ctx.ReceiveTree));
            newClass = newClass.WithConstructorType(ctx.ReceiveValue(newClass.ConstructorType));
            return newClass;
        }

        public override J VisitNullableType(J.NullableType nullableType, ReceiverContext ctx)
        {
            nullableType = nullableType.WithId(ctx.ReceiveValue(nullableType.Id)!);
            nullableType = nullableType.WithPrefix(ctx.ReceiveNode(nullableType.Prefix, ReceiveSpace)!);
            nullableType = nullableType.WithMarkers(ctx.ReceiveNode(nullableType.Markers, ctx.ReceiveMarkers)!);
            nullableType = nullableType.WithAnnotations(ctx.ReceiveNodes(nullableType.Annotations, ctx.ReceiveTree)!);
            nullableType = nullableType.Padding.WithTypeTree(ctx.ReceiveNode(nullableType.Padding.TypeTree, ReceiveRightPadded)!);
            return nullableType;
        }

        public override J VisitPackage(J.Package package, ReceiverContext ctx)
        {
            package = package.WithId(ctx.ReceiveValue(package.Id)!);
            package = package.WithPrefix(ctx.ReceiveNode(package.Prefix, ReceiveSpace)!);
            package = package.WithMarkers(ctx.ReceiveNode(package.Markers, ctx.ReceiveMarkers)!);
            package = package.WithExpression(ctx.ReceiveNode(package.Expression, ctx.ReceiveTree)!);
            package = package.WithAnnotations(ctx.ReceiveNodes(package.Annotations, ctx.ReceiveTree)!);
            return package;
        }

        public override J VisitParameterizedType(J.ParameterizedType parameterizedType, ReceiverContext ctx)
        {
            parameterizedType = parameterizedType.WithId(ctx.ReceiveValue(parameterizedType.Id)!);
            parameterizedType = parameterizedType.WithPrefix(ctx.ReceiveNode(parameterizedType.Prefix, ReceiveSpace)!);
            parameterizedType = parameterizedType.WithMarkers(ctx.ReceiveNode(parameterizedType.Markers, ctx.ReceiveMarkers)!);
            parameterizedType = parameterizedType.WithClazz(ctx.ReceiveNode(parameterizedType.Clazz, ctx.ReceiveTree)!);
            parameterizedType = parameterizedType.Padding.WithTypeParameters(ctx.ReceiveNode(parameterizedType.Padding.TypeParameters, ReceiveContainer));
            parameterizedType = parameterizedType.WithType(ctx.ReceiveValue(parameterizedType.Type));
            return parameterizedType;
        }

        public override J VisitParentheses<J2>(J.Parentheses<J2> parentheses, ReceiverContext ctx)
        {
            parentheses = parentheses.WithId(ctx.ReceiveValue(parentheses.Id)!);
            parentheses = parentheses.WithPrefix(ctx.ReceiveNode(parentheses.Prefix, ReceiveSpace)!);
            parentheses = parentheses.WithMarkers(ctx.ReceiveNode(parentheses.Markers, ctx.ReceiveMarkers)!);
            parentheses = parentheses.Padding.WithTree(ctx.ReceiveNode(parentheses.Padding.Tree, ReceiveRightPadded)!);
            return parentheses;
        }

        public override J VisitPrimitive(J.Primitive primitive, ReceiverContext ctx)
        {
            primitive = primitive.WithId(ctx.ReceiveValue(primitive.Id)!);
            primitive = primitive.WithPrefix(ctx.ReceiveNode(primitive.Prefix, ReceiveSpace)!);
            primitive = primitive.WithMarkers(ctx.ReceiveNode(primitive.Markers, ctx.ReceiveMarkers)!);
            primitive = primitive.WithType(ctx.ReceiveValue(primitive.Type)!);
            return primitive;
        }

        public override J VisitReturn(J.Return @return, ReceiverContext ctx)
        {
            @return = @return.WithId(ctx.ReceiveValue(@return.Id)!);
            @return = @return.WithPrefix(ctx.ReceiveNode(@return.Prefix, ReceiveSpace)!);
            @return = @return.WithMarkers(ctx.ReceiveNode(@return.Markers, ctx.ReceiveMarkers)!);
            @return = @return.WithExpression(ctx.ReceiveNode(@return.Expression, ctx.ReceiveTree));
            return @return;
        }

        public override J VisitSwitch(J.Switch @switch, ReceiverContext ctx)
        {
            @switch = @switch.WithId(ctx.ReceiveValue(@switch.Id)!);
            @switch = @switch.WithPrefix(ctx.ReceiveNode(@switch.Prefix, ReceiveSpace)!);
            @switch = @switch.WithMarkers(ctx.ReceiveNode(@switch.Markers, ctx.ReceiveMarkers)!);
            @switch = @switch.WithSelector(ctx.ReceiveNode(@switch.Selector, ReceiveControlParentheses)!);
            @switch = @switch.WithCases(ctx.ReceiveNode(@switch.Cases, ctx.ReceiveTree)!);
            return @switch;
        }

        public override J VisitSwitchExpression(J.SwitchExpression switchExpression, ReceiverContext ctx)
        {
            switchExpression = switchExpression.WithId(ctx.ReceiveValue(switchExpression.Id)!);
            switchExpression = switchExpression.WithPrefix(ctx.ReceiveNode(switchExpression.Prefix, ReceiveSpace)!);
            switchExpression = switchExpression.WithMarkers(ctx.ReceiveNode(switchExpression.Markers, ctx.ReceiveMarkers)!);
            switchExpression = switchExpression.WithSelector(ctx.ReceiveNode(switchExpression.Selector, ReceiveControlParentheses)!);
            switchExpression = switchExpression.WithCases(ctx.ReceiveNode(switchExpression.Cases, ctx.ReceiveTree)!);
            return switchExpression;
        }

        public override J VisitSynchronized(J.Synchronized synchronized, ReceiverContext ctx)
        {
            synchronized = synchronized.WithId(ctx.ReceiveValue(synchronized.Id)!);
            synchronized = synchronized.WithPrefix(ctx.ReceiveNode(synchronized.Prefix, ReceiveSpace)!);
            synchronized = synchronized.WithMarkers(ctx.ReceiveNode(synchronized.Markers, ctx.ReceiveMarkers)!);
            synchronized = synchronized.WithLock(ctx.ReceiveNode(synchronized.Lock, ReceiveControlParentheses)!);
            synchronized = synchronized.WithBody(ctx.ReceiveNode(synchronized.Body, ctx.ReceiveTree)!);
            return synchronized;
        }

        public override J VisitTernary(J.Ternary ternary, ReceiverContext ctx)
        {
            ternary = ternary.WithId(ctx.ReceiveValue(ternary.Id)!);
            ternary = ternary.WithPrefix(ctx.ReceiveNode(ternary.Prefix, ReceiveSpace)!);
            ternary = ternary.WithMarkers(ctx.ReceiveNode(ternary.Markers, ctx.ReceiveMarkers)!);
            ternary = ternary.WithCondition(ctx.ReceiveNode(ternary.Condition, ctx.ReceiveTree)!);
            ternary = ternary.Padding.WithTruePart(ctx.ReceiveNode(ternary.Padding.TruePart, ReceiveLeftPadded)!);
            ternary = ternary.Padding.WithFalsePart(ctx.ReceiveNode(ternary.Padding.FalsePart, ReceiveLeftPadded)!);
            ternary = ternary.WithType(ctx.ReceiveValue(ternary.Type));
            return ternary;
        }

        public override J VisitThrow(J.Throw @throw, ReceiverContext ctx)
        {
            @throw = @throw.WithId(ctx.ReceiveValue(@throw.Id)!);
            @throw = @throw.WithPrefix(ctx.ReceiveNode(@throw.Prefix, ReceiveSpace)!);
            @throw = @throw.WithMarkers(ctx.ReceiveNode(@throw.Markers, ctx.ReceiveMarkers)!);
            @throw = @throw.WithException(ctx.ReceiveNode(@throw.Exception, ctx.ReceiveTree)!);
            return @throw;
        }

        public override J VisitTry(J.Try @try, ReceiverContext ctx)
        {
            @try = @try.WithId(ctx.ReceiveValue(@try.Id)!);
            @try = @try.WithPrefix(ctx.ReceiveNode(@try.Prefix, ReceiveSpace)!);
            @try = @try.WithMarkers(ctx.ReceiveNode(@try.Markers, ctx.ReceiveMarkers)!);
            @try = @try.Padding.WithResources(ctx.ReceiveNode(@try.Padding.Resources, ReceiveContainer));
            @try = @try.WithBody(ctx.ReceiveNode(@try.Body, ctx.ReceiveTree)!);
            @try = @try.WithCatches(ctx.ReceiveNodes(@try.Catches, ctx.ReceiveTree)!);
            @try = @try.Padding.WithFinally(ctx.ReceiveNode(@try.Padding.Finally, ReceiveLeftPadded));
            return @try;
        }

        public override J VisitTryResource(J.Try.Resource resource, ReceiverContext ctx)
        {
            resource = resource.WithId(ctx.ReceiveValue(resource.Id)!);
            resource = resource.WithPrefix(ctx.ReceiveNode(resource.Prefix, ReceiveSpace)!);
            resource = resource.WithMarkers(ctx.ReceiveNode(resource.Markers, ctx.ReceiveMarkers)!);
            resource = resource.WithVariableDeclarations(ctx.ReceiveNode(resource.VariableDeclarations, ctx.ReceiveTree)!);
            resource = resource.WithTerminatedWithSemicolon(ctx.ReceiveValue(resource.TerminatedWithSemicolon));
            return resource;
        }

        public override J VisitCatch(J.Try.Catch @catch, ReceiverContext ctx)
        {
            @catch = @catch.WithId(ctx.ReceiveValue(@catch.Id)!);
            @catch = @catch.WithPrefix(ctx.ReceiveNode(@catch.Prefix, ReceiveSpace)!);
            @catch = @catch.WithMarkers(ctx.ReceiveNode(@catch.Markers, ctx.ReceiveMarkers)!);
            @catch = @catch.WithParameter(ctx.ReceiveNode(@catch.Parameter, ReceiveControlParentheses)!);
            @catch = @catch.WithBody(ctx.ReceiveNode(@catch.Body, ctx.ReceiveTree)!);
            return @catch;
        }

        public override J VisitTypeCast(J.TypeCast typeCast, ReceiverContext ctx)
        {
            typeCast = typeCast.WithId(ctx.ReceiveValue(typeCast.Id)!);
            typeCast = typeCast.WithPrefix(ctx.ReceiveNode(typeCast.Prefix, ReceiveSpace)!);
            typeCast = typeCast.WithMarkers(ctx.ReceiveNode(typeCast.Markers, ctx.ReceiveMarkers)!);
            typeCast = typeCast.WithClazz(ctx.ReceiveNode(typeCast.Clazz, ReceiveControlParentheses)!);
            typeCast = typeCast.WithExpression(ctx.ReceiveNode(typeCast.Expression, ctx.ReceiveTree)!);
            return typeCast;
        }

        public override J VisitTypeParameter(J.TypeParameter typeParameter, ReceiverContext ctx)
        {
            typeParameter = typeParameter.WithId(ctx.ReceiveValue(typeParameter.Id)!);
            typeParameter = typeParameter.WithPrefix(ctx.ReceiveNode(typeParameter.Prefix, ReceiveSpace)!);
            typeParameter = typeParameter.WithMarkers(ctx.ReceiveNode(typeParameter.Markers, ctx.ReceiveMarkers)!);
            typeParameter = typeParameter.WithAnnotations(ctx.ReceiveNodes(typeParameter.Annotations, ctx.ReceiveTree)!);
            typeParameter = typeParameter.WithModifiers(ctx.ReceiveNodes(typeParameter.Modifiers, ctx.ReceiveTree)!);
            typeParameter = typeParameter.WithName(ctx.ReceiveNode(typeParameter.Name, ctx.ReceiveTree)!);
            typeParameter = typeParameter.Padding.WithBounds(ctx.ReceiveNode(typeParameter.Padding.Bounds, ReceiveContainer));
            return typeParameter;
        }

        public override J VisitTypeParameters(J.TypeParameters typeParameters, ReceiverContext ctx)
        {
            typeParameters = typeParameters.WithId(ctx.ReceiveValue(typeParameters.Id)!);
            typeParameters = typeParameters.WithPrefix(ctx.ReceiveNode(typeParameters.Prefix, ReceiveSpace)!);
            typeParameters = typeParameters.WithMarkers(ctx.ReceiveNode(typeParameters.Markers, ctx.ReceiveMarkers)!);
            typeParameters = typeParameters.WithAnnotations(ctx.ReceiveNodes(typeParameters.Annotations, ctx.ReceiveTree)!);
            typeParameters = typeParameters.Padding.WithParameters(ctx.ReceiveNodes(typeParameters.Padding.Parameters, ReceiveRightPadded)!);
            return typeParameters;
        }

        public override J VisitUnary(J.Unary unary, ReceiverContext ctx)
        {
            unary = unary.WithId(ctx.ReceiveValue(unary.Id)!);
            unary = unary.WithPrefix(ctx.ReceiveNode(unary.Prefix, ReceiveSpace)!);
            unary = unary.WithMarkers(ctx.ReceiveNode(unary.Markers, ctx.ReceiveMarkers)!);
            unary = unary.Padding.WithOperator(ctx.ReceiveNode(unary.Padding.Operator, ReceiveLeftPadded)!);
            unary = unary.WithExpression(ctx.ReceiveNode(unary.Expression, ctx.ReceiveTree)!);
            unary = unary.WithType(ctx.ReceiveValue(unary.Type));
            return unary;
        }

        public override J VisitVariableDeclarations(J.VariableDeclarations variableDeclarations, ReceiverContext ctx)
        {
            variableDeclarations = variableDeclarations.WithId(ctx.ReceiveValue(variableDeclarations.Id)!);
            variableDeclarations = variableDeclarations.WithPrefix(ctx.ReceiveNode(variableDeclarations.Prefix, ReceiveSpace)!);
            variableDeclarations = variableDeclarations.WithMarkers(ctx.ReceiveNode(variableDeclarations.Markers, ctx.ReceiveMarkers)!);
            variableDeclarations = variableDeclarations.WithLeadingAnnotations(ctx.ReceiveNodes(variableDeclarations.LeadingAnnotations, ctx.ReceiveTree)!);
            variableDeclarations = variableDeclarations.WithModifiers(ctx.ReceiveNodes(variableDeclarations.Modifiers, ctx.ReceiveTree)!);
            variableDeclarations = variableDeclarations.WithTypeExpression(ctx.ReceiveNode(variableDeclarations.TypeExpression, ctx.ReceiveTree));
            variableDeclarations = variableDeclarations.WithVarargs(ctx.ReceiveNode(variableDeclarations.Varargs, ReceiveSpace));
            variableDeclarations = variableDeclarations.WithDimensionsBeforeName(ctx.ReceiveNodes(variableDeclarations.DimensionsBeforeName, ReceiveLeftPadded)!);
            variableDeclarations = variableDeclarations.Padding.WithVariables(ctx.ReceiveNodes(variableDeclarations.Padding.Variables, ReceiveRightPadded)!);
            return variableDeclarations;
        }

        public override J VisitVariable(J.VariableDeclarations.NamedVariable namedVariable, ReceiverContext ctx)
        {
            namedVariable = namedVariable.WithId(ctx.ReceiveValue(namedVariable.Id)!);
            namedVariable = namedVariable.WithPrefix(ctx.ReceiveNode(namedVariable.Prefix, ReceiveSpace)!);
            namedVariable = namedVariable.WithMarkers(ctx.ReceiveNode(namedVariable.Markers, ctx.ReceiveMarkers)!);
            namedVariable = namedVariable.WithName(ctx.ReceiveNode(namedVariable.Name, ctx.ReceiveTree)!);
            namedVariable = namedVariable.WithDimensionsAfterName(ctx.ReceiveNodes(namedVariable.DimensionsAfterName, ReceiveLeftPadded)!);
            namedVariable = namedVariable.Padding.WithInitializer(ctx.ReceiveNode(namedVariable.Padding.Initializer, ReceiveLeftPadded));
            namedVariable = namedVariable.WithVariableType(ctx.ReceiveValue(namedVariable.VariableType));
            return namedVariable;
        }

        public override J VisitWhileLoop(J.WhileLoop whileLoop, ReceiverContext ctx)
        {
            whileLoop = whileLoop.WithId(ctx.ReceiveValue(whileLoop.Id)!);
            whileLoop = whileLoop.WithPrefix(ctx.ReceiveNode(whileLoop.Prefix, ReceiveSpace)!);
            whileLoop = whileLoop.WithMarkers(ctx.ReceiveNode(whileLoop.Markers, ctx.ReceiveMarkers)!);
            whileLoop = whileLoop.WithCondition(ctx.ReceiveNode(whileLoop.Condition, ReceiveControlParentheses)!);
            whileLoop = whileLoop.Padding.WithBody(ctx.ReceiveNode(whileLoop.Padding.Body, ReceiveRightPadded)!);
            return whileLoop;
        }

        public override J VisitWildcard(J.Wildcard wildcard, ReceiverContext ctx)
        {
            wildcard = wildcard.WithId(ctx.ReceiveValue(wildcard.Id)!);
            wildcard = wildcard.WithPrefix(ctx.ReceiveNode(wildcard.Prefix, ReceiveSpace)!);
            wildcard = wildcard.WithMarkers(ctx.ReceiveNode(wildcard.Markers, ctx.ReceiveMarkers)!);
            wildcard = wildcard.Padding.WithWildcardBound(ctx.ReceiveNode(wildcard.Padding.WildcardBound, ReceiveLeftPadded));
            wildcard = wildcard.WithBoundedType(ctx.ReceiveNode(wildcard.BoundedType, ctx.ReceiveTree));
            return wildcard;
        }

        public override J VisitYield(J.Yield yield, ReceiverContext ctx)
        {
            yield = yield.WithId(ctx.ReceiveValue(yield.Id)!);
            yield = yield.WithPrefix(ctx.ReceiveNode(yield.Prefix, ReceiveSpace)!);
            yield = yield.WithMarkers(ctx.ReceiveNode(yield.Markers, ctx.ReceiveMarkers)!);
            yield = yield.WithImplicit(ctx.ReceiveValue(yield.Implicit));
            yield = yield.WithValue(ctx.ReceiveNode(yield.Value, ctx.ReceiveTree)!);
            return yield;
        }

        public override J VisitUnknown(J.Unknown unknown, ReceiverContext ctx)
        {
            unknown = unknown.WithId(ctx.ReceiveValue(unknown.Id)!);
            unknown = unknown.WithPrefix(ctx.ReceiveNode(unknown.Prefix, ReceiveSpace)!);
            unknown = unknown.WithMarkers(ctx.ReceiveNode(unknown.Markers, ctx.ReceiveMarkers)!);
            unknown = unknown.WithUnknownSource(ctx.ReceiveNode(unknown.UnknownSource, ctx.ReceiveTree)!);
            return unknown;
        }

        public override J VisitUnknownSource(J.Unknown.Source source, ReceiverContext ctx)
        {
            source = source.WithId(ctx.ReceiveValue(source.Id)!);
            source = source.WithPrefix(ctx.ReceiveNode(source.Prefix, ReceiveSpace)!);
            source = source.WithMarkers(ctx.ReceiveNode(source.Markers, ctx.ReceiveMarkers)!);
            source = source.WithText(ctx.ReceiveValue(source.Text)!);
            return source;
        }

    }

    private class Factory : ReceiverFactory
    {
        public Rewrite.Core.Tree Create<T>(string type, ReceiverContext ctx) where T : Rewrite.Core.Tree
        {
            if (type is "Rewrite.RewriteJava.Tree.J.AnnotatedType" or "org.openrewrite.java.tree.J$AnnotatedType")
            {
                return new J.AnnotatedType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Annotation" or "org.openrewrite.java.tree.J$Annotation")
            {
                return new J.Annotation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(NameTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ArrayAccess" or "org.openrewrite.java.tree.J$ArrayAccess")
            {
                return new J.ArrayAccess(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.ArrayDimension), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ArrayType" or "org.openrewrite.java.tree.J$ArrayType")
            {
                return new J.ArrayType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree),
                    ctx.ReceiveNode(default(JLeftPadded<Space>), ReceiveLeftPadded),
                    ctx.ReceiveValue(default(JavaType))!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Assert" or "org.openrewrite.java.tree.J$Assert")
            {
                return new J.Assert(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Assignment" or "org.openrewrite.java.tree.J$Assignment")
            {
                return new J.Assignment(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.AssignmentOperation" or "org.openrewrite.java.tree.J$AssignmentOperation")
            {
                return new J.AssignmentOperation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.AssignmentOperation.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Binary" or "org.openrewrite.java.tree.J$Binary")
            {
                return new J.Binary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Binary.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Block" or "org.openrewrite.java.tree.J$Block")
            {
                return new J.Block(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<bool>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Break" or "org.openrewrite.java.tree.J$Break")
            {
                return new J.Break(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Case" or "org.openrewrite.java.tree.J$Case")
            {
                return new J.Case(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(J.Case.Types))!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JRightPadded<J>), ReceiveRightPadded)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ClassDeclaration" or "org.openrewrite.java.tree.J$ClassDeclaration")
            {
                return new J.ClassDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.ClassDeclaration.Kind), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<J.TypeParameter>), ReceiveContainer),
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer),
                    ctx.ReceiveNode(default(JLeftPadded<TypeTree>), ReceiveLeftPadded),
                    ctx.ReceiveNode(default(JContainer<TypeTree>), ReceiveContainer),
                    ctx.ReceiveNode(default(JContainer<TypeTree>), ReceiveContainer),
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType.FullyQualified))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ClassDeclaration.Kind" or "org.openrewrite.java.tree.J$ClassDeclaration$Kind")
            {
                return new J.ClassDeclaration.Kind(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(J.ClassDeclaration.Kind.Types))!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.CompilationUnit" or "org.openrewrite.java.tree.J$CompilationUnit")
            {
                return new J.CompilationUnit(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string))!,
                    ctx.ReceiveValue(default(FileAttributes)),
                    ctx.ReceiveValue(default(string)),
                    ctx.ReceiveValue(default(bool)),
                    ctx.ReceiveValue(default(Checksum)),
                    ctx.ReceiveNode(default(JRightPadded<J.Package>), ReceiveRightPadded),
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.Import>>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<J.ClassDeclaration>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Continue" or "org.openrewrite.java.tree.J$Continue")
            {
                return new J.Continue(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.DoWhileLoop" or "org.openrewrite.java.tree.J$DoWhileLoop")
            {
                return new J.DoWhileLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.ControlParentheses<Expression>>), ReceiveLeftPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Empty" or "org.openrewrite.java.tree.J$Empty")
            {
                return new J.Empty(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.EnumValue" or "org.openrewrite.java.tree.J$EnumValue")
            {
                return new J.EnumValue(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.NewClass), ctx.ReceiveTree)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.EnumValueSet" or "org.openrewrite.java.tree.J$EnumValueSet")
            {
                return new J.EnumValueSet(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.EnumValue>>), ReceiveRightPadded)!,
                    ctx.ReceiveValue(default(bool))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.FieldAccess" or "org.openrewrite.java.tree.J$FieldAccess")
            {
                return new J.FieldAccess(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ForEachLoop" or "org.openrewrite.java.tree.J$ForEachLoop")
            {
                return new J.ForEachLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ForEachLoop.Control), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ForEachLoop.Control" or "org.openrewrite.java.tree.J$ForEachLoop$Control")
            {
                return new J.ForEachLoop.Control(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.VariableDeclarations>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ForLoop" or "org.openrewrite.java.tree.J$ForLoop")
            {
                return new J.ForLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ForLoop.Control), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ForLoop.Control" or "org.openrewrite.java.tree.J$ForLoop$Control")
            {
                return new J.ForLoop.Control(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<Statement>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ParenthesizedTypeTree" or "org.openrewrite.java.tree.J$ParenthesizedTypeTree")
            {
                return new J.ParenthesizedTypeTree(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.Parentheses<TypeTree>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Identifier" or "org.openrewrite.java.tree.J$Identifier")
            {
                return new J.Identifier(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(string))!,
                    ctx.ReceiveValue(default(JavaType)),
                    ctx.ReceiveValue(default(JavaType.Variable))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.If" or "org.openrewrite.java.tree.J$If")
            {
                return new J.If(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J.If.Else), ctx.ReceiveTree)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.If.Else" or "org.openrewrite.java.tree.J$If$Else")
            {
                return new J.If.Else(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Import" or "org.openrewrite.java.tree.J$Import")
            {
                return new J.Import(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<bool>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(J.FieldAccess), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.InstanceOf" or "org.openrewrite.java.tree.J$InstanceOf")
            {
                return new J.InstanceOf(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(J), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J), ctx.ReceiveTree),
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.IntersectionType" or "org.openrewrite.java.tree.J$IntersectionType")
            {
                return new J.IntersectionType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>), ReceiveContainer)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Label" or "org.openrewrite.java.tree.J$Label")
            {
                return new J.Label(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J.Identifier>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(Statement), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Lambda" or "org.openrewrite.java.tree.J$Lambda")
            {
                return new J.Lambda(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Lambda.Parameters), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(J), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Lambda.Parameters" or "org.openrewrite.java.tree.J$Lambda$Parameters")
            {
                return new J.Lambda.Parameters(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(bool)),
                    ctx.ReceiveNodes(default(IList<JRightPadded<J>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Literal" or "org.openrewrite.java.tree.J$Literal")
            {
                return new J.Literal(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(object)),
                    ctx.ReceiveValue(default(string)),
                    ctx.ReceiveValues(default(IList<J.Literal.UnicodeEscape>)),
                    ctx.ReceiveValue(default(JavaType.Primitive))!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.MemberReference" or "org.openrewrite.java.tree.J$MemberReference")
            {
                return new J.MemberReference(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer),
                    ctx.ReceiveNode(default(JLeftPadded<J.Identifier>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType)),
                    ctx.ReceiveValue(default(JavaType.Method)),
                    ctx.ReceiveValue(default(JavaType.Variable))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.MethodDeclaration" or "org.openrewrite.java.tree.J$MethodDeclaration")
            {
                return new J.MethodDeclaration(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(J.TypeParameters), ctx.ReceiveTree),
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree),
                    ctx.ReceiveNode(default(J.MethodDeclaration.IdentifierWithAnnotations), ReceiveMethodIdentifierWithAnnotations)!,
                    ctx.ReceiveNode(default(JContainer<Statement>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(JContainer<NameTree>), ReceiveContainer),
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree),
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded),
                    ctx.ReceiveValue(default(JavaType.Method))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.MethodInvocation" or "org.openrewrite.java.tree.J$MethodInvocation")
            {
                return new J.MethodInvocation(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded),
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer),
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveValue(default(JavaType.Method))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Modifier" or "org.openrewrite.java.tree.J$Modifier")
            {
                return new J.Modifier(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string)),
                    ctx.ReceiveValue(default(J.Modifier.Types))!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.MultiCatch" or "org.openrewrite.java.tree.J$MultiCatch")
            {
                return new J.MultiCatch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<NameTree>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.NewArray" or "org.openrewrite.java.tree.J$NewArray")
            {
                return new J.NewArray(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree),
                    ctx.ReceiveNodes(default(IList<J.ArrayDimension>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer),
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ArrayDimension" or "org.openrewrite.java.tree.J$ArrayDimension")
            {
                return new J.ArrayDimension(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.NewClass" or "org.openrewrite.java.tree.J$NewClass")
            {
                return new J.NewClass(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<Expression>), ReceiveRightPadded),
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree),
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree),
                    ctx.ReceiveValue(default(JavaType.Method))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.NullableType" or "org.openrewrite.java.tree.J$NullableType")
            {
                return new J.NullableType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JRightPadded<TypeTree>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Package" or "org.openrewrite.java.tree.J$Package")
            {
                return new J.Package(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ParameterizedType" or "org.openrewrite.java.tree.J$ParameterizedType")
            {
                return new J.ParameterizedType(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(NameTree), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<Expression>), ReceiveContainer),
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Parentheses" or "org.openrewrite.java.tree.J$Parentheses")
            {
                return new J.Parentheses<J>(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.ControlParentheses" or "org.openrewrite.java.tree.J$ControlParentheses")
            {
                return new J.ControlParentheses<J>(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JRightPadded<J>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Primitive" or "org.openrewrite.java.tree.J$Primitive")
            {
                return new J.Primitive(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(JavaType.Primitive))!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Return" or "org.openrewrite.java.tree.J$Return")
            {
                return new J.Return(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Switch" or "org.openrewrite.java.tree.J$Switch")
            {
                return new J.Switch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.SwitchExpression" or "org.openrewrite.java.tree.J$SwitchExpression")
            {
                return new J.SwitchExpression(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Synchronized" or "org.openrewrite.java.tree.J$Synchronized")
            {
                return new J.Synchronized(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Ternary" or "org.openrewrite.java.tree.J$Ternary")
            {
                return new J.Ternary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Throw" or "org.openrewrite.java.tree.J$Throw")
            {
                return new J.Throw(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Try" or "org.openrewrite.java.tree.J$Try")
            {
                return new J.Try(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JContainer<J.Try.Resource>), ReceiveContainer),
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Try.Catch>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Block>), ReceiveLeftPadded)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Try.Resource" or "org.openrewrite.java.tree.J$Try$Resource")
            {
                return new J.Try.Resource(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(TypedTree), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(bool))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Try.Catch" or "org.openrewrite.java.tree.J$Try$Catch")
            {
                return new J.Try.Catch(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<J.VariableDeclarations>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(J.Block), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.TypeCast" or "org.openrewrite.java.tree.J$TypeCast")
            {
                return new J.TypeCast(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<TypeTree>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.TypeParameter" or "org.openrewrite.java.tree.J$TypeParameter")
            {
                return new J.TypeParameter(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(JContainer<TypeTree>), ReceiveContainer)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.TypeParameters" or "org.openrewrite.java.tree.J$TypeParameters")
            {
                return new J.TypeParameters(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.TypeParameter>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Unary" or "org.openrewrite.java.tree.J$Unary")
            {
                return new J.Unary(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Unary.Types>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!,
                    ctx.ReceiveValue(default(JavaType))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.VariableDeclarations" or "org.openrewrite.java.tree.J$VariableDeclarations")
            {
                return new J.VariableDeclarations(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNodes(default(IList<J.Annotation>), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<J.Modifier>), ctx.ReceiveTree)!,
                    ctx.ReceiveNode(default(TypeTree), ctx.ReceiveTree),
                    ctx.ReceiveNode(default(Space), ReceiveSpace),
                    ctx.ReceiveNodes(default(IList<JLeftPadded<Space>>), ReceiveLeftPadded)!,
                    ctx.ReceiveNodes(default(IList<JRightPadded<J.VariableDeclarations.NamedVariable>>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.VariableDeclarations.NamedVariable" or "org.openrewrite.java.tree.J$VariableDeclarations$NamedVariable")
            {
                return new J.VariableDeclarations.NamedVariable(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Identifier), ctx.ReceiveTree)!,
                    ctx.ReceiveNodes(default(IList<JLeftPadded<Space>>), ReceiveLeftPadded)!,
                    ctx.ReceiveNode(default(JLeftPadded<Expression>), ReceiveLeftPadded),
                    ctx.ReceiveValue(default(JavaType.Variable))
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.WhileLoop" or "org.openrewrite.java.tree.J$WhileLoop")
            {
                return new J.WhileLoop(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.ControlParentheses<Expression>), ReceiveControlParentheses)!,
                    ctx.ReceiveNode(default(JRightPadded<Statement>), ReceiveRightPadded)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Wildcard" or "org.openrewrite.java.tree.J$Wildcard")
            {
                return new J.Wildcard(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(JLeftPadded<J.Wildcard.Bound>), ReceiveLeftPadded),
                    ctx.ReceiveNode(default(NameTree), ctx.ReceiveTree)
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Yield" or "org.openrewrite.java.tree.J$Yield")
            {
                return new J.Yield(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(bool)),
                    ctx.ReceiveNode(default(Expression), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Unknown" or "org.openrewrite.java.tree.J$Unknown")
            {
                return new J.Unknown(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveNode(default(J.Unknown.Source), ctx.ReceiveTree)!
                );
            }

            if (type is "Rewrite.RewriteJava.Tree.J.Unknown.Source" or "org.openrewrite.java.tree.J$Unknown$Source")
            {
                return new J.Unknown.Source(
                    ctx.ReceiveValue(default(Guid))!,
                    ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                    ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                    ctx.ReceiveValue(default(string))!
                );
            }

            throw new NotImplementedException("No factory method for type: " + type);
        }
    }

    private static J.MethodDeclaration.IdentifierWithAnnotations ReceiveMethodIdentifierWithAnnotations(J.MethodDeclaration.IdentifierWithAnnotations? before, string? type, ReceiverContext ctx)
    {
        if (before != null) {
            before = before.WithIdentifier(ctx.ReceiveNode(before.Identifier, ctx.ReceiveTree)!);
            before = before.WithAnnotations(ctx.ReceiveNodes(before.Annotations, ctx.ReceiveTree)!);
        } else {
            before = new J.MethodDeclaration.IdentifierWithAnnotations(
                ctx.ReceiveNode<J.Identifier>(null, ctx.ReceiveTree)!,
                ctx.ReceiveNodes<J.Annotation>(null, ctx.ReceiveTree)!
            );
        }
        return before;
    }

    private static J.ControlParentheses<T> ReceiveControlParentheses<T>(J.ControlParentheses<T>? before, string? type, ReceiverContext ctx)
        where T : J
    {
        if (before != null)
        {
            before = before.WithId(ctx.ReceiveValue(before.Id)!);
            before = before.WithPrefix(ctx.ReceiveNode(before.Prefix, ReceiveSpace)!);
            before = before.WithMarkers(ctx.ReceiveNode(before.Markers, ctx.ReceiveMarkers)!);
            before = before.Padding.WithTree(ctx.ReceiveNode(before.Padding.Tree, ReceiveRightPadded)!);
        }
        else
        {
            before = new J.ControlParentheses<T>(
                ctx.ReceiveValue(default(Guid))!,
                ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!,
                ctx.ReceiveNode(default(JRightPadded<T>), ReceiveRightPadded)!
            );
        }

        return before;
    }

    private static JContainer<T> ReceiveContainer<T>(JContainer<T>? container, string? type, ReceiverContext ctx)
    where T : J
    {
        if (container != null) {
            container = container.WithBefore(ctx.ReceiveNode(container.Before, ReceiveSpace)!);
            container = container.Padding.WithElements(ctx.ReceiveNodes(container.Padding.Elements, ReceiveRightPadded)!);
            container = container.WithMarkers(ctx.ReceiveNode(container.Markers, ctx.ReceiveMarkers)!);
        } else {
            container = JContainer<T>.Build(
                ctx.ReceiveNode(default(Space), ReceiveSpace)!,
                ctx.ReceiveNodes(default(IList<JRightPadded<T>>), ReceiveRightPadded)!,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return container;
    }

    private static JLeftPadded<T> ReceiveLeftPadded<T>(JLeftPadded<T>? leftPadded, string? type, ReceiverContext ctx)
    {
        if (leftPadded != null) {
            leftPadded = leftPadded.WithBefore(ctx.ReceiveNode(leftPadded.Before, ReceiveSpace)!);
            if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                leftPadded = leftPadded.WithElement((T)ctx.ReceiveNode(leftPadded.Element as Core.Tree, ctx.ReceiveTree)!);
            }
            else if (typeof(T) == typeof(Space))
            {
                leftPadded = leftPadded.WithElement((T)(object)ctx.ReceiveNode(leftPadded.Element as Space, ReceiveSpace)!);
            }
            else
            {
                leftPadded = leftPadded.WithElement(ctx.ReceiveValue(leftPadded.Element)!);
            }
            leftPadded = leftPadded.WithMarkers(ctx.ReceiveNode(leftPadded.Markers, ctx.ReceiveMarkers)!);
        } else
        {
            var before = ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            T element;
            if (typeof(T) == typeof(Space))
            {
                element = (T)(object)ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(J.ControlParentheses<Expression>)))
            {
                element = (T)(J)ctx.ReceiveNode<J.ControlParentheses<Expression>>(default, ReceiveControlParentheses)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(J.ControlParentheses<J.VariableDeclarations>)))
            {
                element = (T)(J)ctx.ReceiveNode<J.ControlParentheses<J.VariableDeclarations>>(default, ReceiveControlParentheses)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(J.ControlParentheses<TypeTree>)))
            {
                element = (T)(J)ctx.ReceiveNode<J.ControlParentheses<TypeTree>>(default, ReceiveControlParentheses)!;
            }
            else if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                element = (T)ctx.ReceiveNode(default(Core.Tree), ctx.ReceiveTree)!;
            }
            else
            {
                element = ctx.ReceiveValue(default(T))!;
            }
            leftPadded = new JLeftPadded<T>(
                before,
                element,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return leftPadded;
    }

    private static JRightPadded<T> ReceiveRightPadded<T>(JRightPadded<T>? rightPadded, string? type, ReceiverContext ctx)
    {
        if (rightPadded != null) {
            if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                rightPadded = rightPadded.WithElement((T)ctx.ReceiveNode(rightPadded.Element as Core.Tree, ctx.ReceiveTree)!);
            }
            else if (typeof(T) == typeof(Space))
            {
                rightPadded = rightPadded.WithElement((T)(object)ctx.ReceiveNode(rightPadded.Element as Space, ReceiveSpace)!);
            }
            else
            {
                rightPadded = rightPadded.WithElement(ctx.ReceiveValue(rightPadded.Element)!);
            }
            rightPadded = rightPadded.WithAfter(ctx.ReceiveNode(rightPadded.After, ReceiveSpace)!);
            rightPadded = rightPadded.WithMarkers(ctx.ReceiveNode(rightPadded.Markers, ctx.ReceiveMarkers)!);
        } else
        {
            T element;
            if (typeof(T).IsAssignableTo(typeof(Core.Tree)))
            {
                element = (T)ctx.ReceiveNode(default(Core.Tree), ctx.ReceiveTree)!;
            }
            else if (typeof(T) == typeof(Space))
            {
                element = (T)(object)ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            }
            else
            {
                element = ctx.ReceiveValue(default(T))!;
            }
            var after = ctx.ReceiveNode(default(Space), ReceiveSpace)!;
            rightPadded = new JRightPadded<T>(
                element,
                after,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return rightPadded;
    }

    private static Space ReceiveSpace(Space? space, string? type, ReceiverContext ctx)
    {
        if (space != null) {
            space = space.WithComments(ctx.ReceiveNodes(space.Comments, ReceiveComment));
            space = space.WithWhitespace(ctx.ReceiveValue(space.Whitespace)!);
        } else {
            space = new Space(
                ctx.ReceiveNodes<Comment>(null, ReceiveComment)!,
                ctx.ReceiveValue(default(string))
            );
        }
        return space;
    }

    private static Comment ReceiveComment(Comment? comment, string? type, ReceiverContext ctx)
    {
        if (comment != null)
        {
            comment = ((TextComment)comment).WithMultiline(ctx.ReceiveValue(comment.Multiline))
                .WithText(ctx.ReceiveValue(((TextComment)comment).Text)!)
                .WithSuffix(ctx.ReceiveValue(comment.Suffix) ?? "")
                .WithMarkers(ctx.ReceiveNode(comment.Markers, ctx.ReceiveMarkers)!
            );
        }
        else
        {
            comment = new TextComment(
                ctx.ReceiveValue(default(bool)),
                ctx.ReceiveValue(default(string))!,
                ctx.ReceiveValue(default(string))!,
                ctx.ReceiveNode(default(Markers), ctx.ReceiveMarkers)!
            );
        }
        return comment;
    }

}
