//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents implicit element access in C# which allows accessing elements without specifying the element accessor target.
    /// This is commonly used in object initializers, collection initializers and anonymous object initializers.
    /// <br/>
    /// For example:
    /// <code>
    /// // Collection initializer
    /// new List<Point> {
    ///     { 10, 20 }, // ImplicitElementAccess with two arguments
    ///     { 30, 40 }
    /// }
    /// // Object initializer
    /// new Dictionary<string, string> {
    ///     { "key1", "value1" }, // ImplicitElementAccess wrapping key-value pair arguments
    ///     { "key2", "value2" }
    /// }
    /// </code>
    /// The argumentList field contains the list of arguments wrapped in braces, with whitespace preserved
    /// before the opening brace and between arguments.
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ImplicitElementAccess(
    Guid id,
    Space prefix,
    Markers markers,
    JContainer<Argument> argumentList
    ) : Cs, Expression, Expression<ImplicitElementAccess>, J<ImplicitElementAccess>, MutableTree<ImplicitElementAccess>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitImplicitElementAccess(this, p);
        }

        public Guid Id { get;  set; } = id;

        public ImplicitElementAccess WithId(Guid newId)
        {
            return newId == Id ? this : new ImplicitElementAccess(newId, Prefix, Markers, _argumentList);
        }
        public Space Prefix { get;  set; } = prefix;

        public ImplicitElementAccess WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new ImplicitElementAccess(Id, newPrefix, Markers, _argumentList);
        }
        public Markers Markers { get;  set; } = markers;

        public ImplicitElementAccess WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new ImplicitElementAccess(Id, Prefix, newMarkers, _argumentList);
        }
        private JContainer<Cs.Argument> _argumentList = argumentList;
        public IList<Cs.Argument> ArgumentList => _argumentList.GetElements();

        public ImplicitElementAccess WithArgumentList(IList<Cs.Argument> newArgumentList)
        {
            return Padding.WithArgumentList(JContainer<Cs.Argument>.WithElements(_argumentList, newArgumentList));
        }
        public sealed record PaddingHelper(Cs.ImplicitElementAccess T)
        {
            public JContainer<Cs.Argument> ArgumentList { get => T._argumentList;  set => T._argumentList = value; }

            public Cs.ImplicitElementAccess WithArgumentList(JContainer<Cs.Argument> newArgumentList)
            {
                return ArgumentList == newArgumentList ? T : new Cs.ImplicitElementAccess(T.Id, T.Prefix, T.Markers, newArgumentList);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ImplicitElementAccess && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}