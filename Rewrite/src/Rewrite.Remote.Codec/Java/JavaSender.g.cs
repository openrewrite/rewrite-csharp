//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using Rewrite.Remote;
using Rewrite.RewriteJava;

namespace Rewrite.Remote.Codec.Java;

using Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
public record JavaSender : Sender
{
    public void Send<T>(T after, T? before, SenderContext ctx) where T : Core.Tree {
        var visitor = new Visitor();
        visitor.Visit(after, ctx.Fork(visitor, before));
    }

    private class Visitor : JavaVisitor<SenderContext>
    {
        public override J Visit(Tree? tree, SenderContext ctx)
        {
            Cursor = new Cursor(Cursor, tree ?? throw new InvalidOperationException($"Parameter {nameof(tree)} should not be null"));
            ctx.SendNode(tree, x => x, ctx.SendTree);
            Cursor = Cursor.Parent!;

            return (J) tree;
        }

        public override J VisitAnnotatedType(J.AnnotatedType annotatedType, SenderContext ctx)
        {
            ctx.SendValue(annotatedType, v => v.Id);
            ctx.SendNode(annotatedType, v => v.Prefix, SendSpace);
            ctx.SendNode(annotatedType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(annotatedType, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(annotatedType, v => v.TypeExpression, ctx.SendTree);
            return annotatedType;
        }

        public override J VisitAnnotation(J.Annotation annotation, SenderContext ctx)
        {
            ctx.SendValue(annotation, v => v.Id);
            ctx.SendNode(annotation, v => v.Prefix, SendSpace);
            ctx.SendNode(annotation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(annotation, v => v.AnnotationType, ctx.SendTree);
            ctx.SendNode(annotation, v => v.Padding.Arguments, SendContainer);
            return annotation;
        }

        public override J VisitArrayAccess(J.ArrayAccess arrayAccess, SenderContext ctx)
        {
            ctx.SendValue(arrayAccess, v => v.Id);
            ctx.SendNode(arrayAccess, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayAccess, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayAccess, v => v.Indexed, ctx.SendTree);
            ctx.SendNode(arrayAccess, v => v.Dimension, ctx.SendTree);
            ctx.SendTypedValue(arrayAccess, v => v.Type);
            return arrayAccess;
        }

        public override J VisitArrayType(J.ArrayType arrayType, SenderContext ctx)
        {
            ctx.SendValue(arrayType, v => v.Id);
            ctx.SendNode(arrayType, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayType, v => v.ElementType, ctx.SendTree);
            ctx.SendNodes(arrayType, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(arrayType, v => v.Dimension, SendLeftPadded);
            ctx.SendTypedValue(arrayType, v => v.Type);
            return arrayType;
        }

        public override J VisitAssert(J.Assert assert, SenderContext ctx)
        {
            ctx.SendValue(assert, v => v.Id);
            ctx.SendNode(assert, v => v.Prefix, SendSpace);
            ctx.SendNode(assert, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assert, v => v.Condition, ctx.SendTree);
            ctx.SendNode(assert, v => v.Detail, SendLeftPadded);
            return assert;
        }

        public override J VisitAssignment(J.Assignment assignment, SenderContext ctx)
        {
            ctx.SendValue(assignment, v => v.Id);
            ctx.SendNode(assignment, v => v.Prefix, SendSpace);
            ctx.SendNode(assignment, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assignment, v => v.Variable, ctx.SendTree);
            ctx.SendNode(assignment, v => v.Padding.Expression, SendLeftPadded);
            ctx.SendTypedValue(assignment, v => v.Type);
            return assignment;
        }

        public override J VisitAssignmentOperation(J.AssignmentOperation assignmentOperation, SenderContext ctx)
        {
            ctx.SendValue(assignmentOperation, v => v.Id);
            ctx.SendNode(assignmentOperation, v => v.Prefix, SendSpace);
            ctx.SendNode(assignmentOperation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(assignmentOperation, v => v.Variable, ctx.SendTree);
            ctx.SendNode(assignmentOperation, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(assignmentOperation, v => v.Assignment, ctx.SendTree);
            ctx.SendTypedValue(assignmentOperation, v => v.Type);
            return assignmentOperation;
        }

        public override J VisitBinary(J.Binary binary, SenderContext ctx)
        {
            ctx.SendValue(binary, v => v.Id);
            ctx.SendNode(binary, v => v.Prefix, SendSpace);
            ctx.SendNode(binary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(binary, v => v.Left, ctx.SendTree);
            ctx.SendNode(binary, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(binary, v => v.Right, ctx.SendTree);
            ctx.SendTypedValue(binary, v => v.Type);
            return binary;
        }

        public override J VisitBlock(J.Block block, SenderContext ctx)
        {
            ctx.SendValue(block, v => v.Id);
            ctx.SendNode(block, v => v.Prefix, SendSpace);
            ctx.SendNode(block, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(block, v => v.Padding.Static, SendRightPadded);
            ctx.SendNodes(block, v => v.Padding.Statements, SendRightPadded, t => t.Element.Id);
            ctx.SendNode(block, v => v.End, SendSpace);
            return block;
        }

        public override J VisitBreak(J.Break @break, SenderContext ctx)
        {
            ctx.SendValue(@break, v => v.Id);
            ctx.SendNode(@break, v => v.Prefix, SendSpace);
            ctx.SendNode(@break, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@break, v => v.Label, ctx.SendTree);
            return @break;
        }

        public override J VisitCase(J.Case @case, SenderContext ctx)
        {
            ctx.SendValue(@case, v => v.Id);
            ctx.SendNode(@case, v => v.Prefix, SendSpace);
            ctx.SendNode(@case, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(@case, v => v.CaseType);
            ctx.SendNode(@case, v => v.Padding.CaseLabels, SendContainer);
            ctx.SendNode(@case, v => v.Padding.Statements, SendContainer);
            ctx.SendNode(@case, v => v.Padding.Body, SendRightPadded);
            ctx.SendNode(@case, v => v.Guard, ctx.SendTree);
            return @case;
        }

        public override J VisitClassDeclaration(J.ClassDeclaration classDeclaration, SenderContext ctx)
        {
            ctx.SendValue(classDeclaration, v => v.Id);
            ctx.SendNode(classDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(classDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(classDeclaration, v => v.LeadingAnnotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(classDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(classDeclaration, v => v.Padding.DeclarationKind, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Name, ctx.SendTree);
            ctx.SendNode(classDeclaration, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.PrimaryConstructor, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.Extends, SendLeftPadded);
            ctx.SendNode(classDeclaration, v => v.Padding.Implements, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Padding.Permits, SendContainer);
            ctx.SendNode(classDeclaration, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(classDeclaration, v => v.Type);
            return classDeclaration;
        }

        public override J VisitClassDeclarationKind(J.ClassDeclaration.Kind kind, SenderContext ctx)
        {
            ctx.SendValue(kind, v => v.Id);
            ctx.SendNode(kind, v => v.Prefix, SendSpace);
            ctx.SendNode(kind, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(kind, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendValue(kind, v => v.KindType);
            return kind;
        }

        public override J VisitCompilationUnit(J.CompilationUnit compilationUnit, SenderContext ctx)
        {
            ctx.SendValue(compilationUnit, v => v.Id);
            ctx.SendNode(compilationUnit, v => v.Prefix, SendSpace);
            ctx.SendNode(compilationUnit, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(compilationUnit, v => v.SourcePath);
            ctx.SendTypedValue(compilationUnit, v => v.FileAttributes);
            ctx.SendValue(compilationUnit, v => v.CharsetName);
            ctx.SendValue(compilationUnit, v => v.CharsetBomMarked);
            ctx.SendTypedValue(compilationUnit, v => v.Checksum);
            ctx.SendNode(compilationUnit, v => v.Padding.PackageDeclaration, SendRightPadded);
            ctx.SendNodes(compilationUnit, v => v.Padding.Imports, SendRightPadded, t => t.Element.Id);
            ctx.SendNodes(compilationUnit, v => v.Classes, ctx.SendTree, t => t.Id);
            ctx.SendNode(compilationUnit, v => v.Eof, SendSpace);
            return compilationUnit;
        }

        public override J VisitContinue(J.Continue @continue, SenderContext ctx)
        {
            ctx.SendValue(@continue, v => v.Id);
            ctx.SendNode(@continue, v => v.Prefix, SendSpace);
            ctx.SendNode(@continue, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@continue, v => v.Label, ctx.SendTree);
            return @continue;
        }

        public override J VisitDoWhileLoop(J.DoWhileLoop doWhileLoop, SenderContext ctx)
        {
            ctx.SendValue(doWhileLoop, v => v.Id);
            ctx.SendNode(doWhileLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(doWhileLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(doWhileLoop, v => v.Padding.Body, SendRightPadded);
            ctx.SendNode(doWhileLoop, v => v.Padding.WhileCondition, SendLeftPadded);
            return doWhileLoop;
        }

        public override J VisitEmpty(J.Empty empty, SenderContext ctx)
        {
            ctx.SendValue(empty, v => v.Id);
            ctx.SendNode(empty, v => v.Prefix, SendSpace);
            ctx.SendNode(empty, v => v.Markers, ctx.SendMarkers);
            return empty;
        }

        public override J VisitEnumValue(J.EnumValue enumValue, SenderContext ctx)
        {
            ctx.SendValue(enumValue, v => v.Id);
            ctx.SendNode(enumValue, v => v.Prefix, SendSpace);
            ctx.SendNode(enumValue, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(enumValue, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(enumValue, v => v.Name, ctx.SendTree);
            ctx.SendNode(enumValue, v => v.Initializer, ctx.SendTree);
            return enumValue;
        }

        public override J VisitEnumValueSet(J.EnumValueSet enumValueSet, SenderContext ctx)
        {
            ctx.SendValue(enumValueSet, v => v.Id);
            ctx.SendNode(enumValueSet, v => v.Prefix, SendSpace);
            ctx.SendNode(enumValueSet, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(enumValueSet, v => v.Padding.Enums, SendRightPadded, t => t.Element.Id);
            ctx.SendValue(enumValueSet, v => v.TerminatedWithSemicolon);
            return enumValueSet;
        }

        public override J VisitFieldAccess(J.FieldAccess fieldAccess, SenderContext ctx)
        {
            ctx.SendValue(fieldAccess, v => v.Id);
            ctx.SendNode(fieldAccess, v => v.Prefix, SendSpace);
            ctx.SendNode(fieldAccess, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(fieldAccess, v => v.Target, ctx.SendTree);
            ctx.SendNode(fieldAccess, v => v.Padding.Name, SendLeftPadded);
            ctx.SendTypedValue(fieldAccess, v => v.Type);
            return fieldAccess;
        }

        public override J VisitForEachLoop(J.ForEachLoop forEachLoop, SenderContext ctx)
        {
            ctx.SendValue(forEachLoop, v => v.Id);
            ctx.SendNode(forEachLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(forEachLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(forEachLoop, v => v.LoopControl, ctx.SendTree);
            ctx.SendNode(forEachLoop, v => v.Padding.Body, SendRightPadded);
            return forEachLoop;
        }

        public override J VisitForEachControl(J.ForEachLoop.Control control, SenderContext ctx)
        {
            ctx.SendValue(control, v => v.Id);
            ctx.SendNode(control, v => v.Prefix, SendSpace);
            ctx.SendNode(control, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(control, v => v.Padding.Variable, SendRightPadded);
            ctx.SendNode(control, v => v.Padding.Iterable, SendRightPadded);
            return control;
        }

        public override J VisitForLoop(J.ForLoop forLoop, SenderContext ctx)
        {
            ctx.SendValue(forLoop, v => v.Id);
            ctx.SendNode(forLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(forLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(forLoop, v => v.LoopControl, ctx.SendTree);
            ctx.SendNode(forLoop, v => v.Padding.Body, SendRightPadded);
            return forLoop;
        }

        public override J VisitForControl(J.ForLoop.Control control, SenderContext ctx)
        {
            ctx.SendValue(control, v => v.Id);
            ctx.SendNode(control, v => v.Prefix, SendSpace);
            ctx.SendNode(control, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(control, v => v.Padding.Init, SendRightPadded, t => t.Element.Id);
            ctx.SendNode(control, v => v.Padding.Condition, SendRightPadded);
            ctx.SendNodes(control, v => v.Padding.Update, SendRightPadded, t => t.Element.Id);
            return control;
        }

        public override J VisitParenthesizedTypeTree(J.ParenthesizedTypeTree parenthesizedTypeTree, SenderContext ctx)
        {
            ctx.SendValue(parenthesizedTypeTree, v => v.Id);
            ctx.SendNode(parenthesizedTypeTree, v => v.Prefix, SendSpace);
            ctx.SendNode(parenthesizedTypeTree, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(parenthesizedTypeTree, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(parenthesizedTypeTree, v => v.ParenthesizedType, ctx.SendTree);
            return parenthesizedTypeTree;
        }

        public override J VisitIdentifier(J.Identifier identifier, SenderContext ctx)
        {
            ctx.SendValue(identifier, v => v.Id);
            ctx.SendNode(identifier, v => v.Prefix, SendSpace);
            ctx.SendNode(identifier, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(identifier, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendValue(identifier, v => v.SimpleName);
            ctx.SendTypedValue(identifier, v => v.Type);
            ctx.SendTypedValue(identifier, v => v.FieldType);
            return identifier;
        }

        public override J VisitIf(J.If @if, SenderContext ctx)
        {
            ctx.SendValue(@if, v => v.Id);
            ctx.SendNode(@if, v => v.Prefix, SendSpace);
            ctx.SendNode(@if, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@if, v => v.IfCondition, ctx.SendTree);
            ctx.SendNode(@if, v => v.Padding.ThenPart, SendRightPadded);
            ctx.SendNode(@if, v => v.ElsePart, ctx.SendTree);
            return @if;
        }

        public override J VisitElse(J.If.Else @else, SenderContext ctx)
        {
            ctx.SendValue(@else, v => v.Id);
            ctx.SendNode(@else, v => v.Prefix, SendSpace);
            ctx.SendNode(@else, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@else, v => v.Padding.Body, SendRightPadded);
            return @else;
        }

        public override J VisitImport(J.Import import, SenderContext ctx)
        {
            ctx.SendValue(import, v => v.Id);
            ctx.SendNode(import, v => v.Prefix, SendSpace);
            ctx.SendNode(import, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(import, v => v.Padding.Static, SendLeftPadded);
            ctx.SendNode(import, v => v.Qualid, ctx.SendTree);
            ctx.SendNode(import, v => v.Padding.Alias, SendLeftPadded);
            return import;
        }

        public override J VisitInstanceOf(J.InstanceOf instanceOf, SenderContext ctx)
        {
            ctx.SendValue(instanceOf, v => v.Id);
            ctx.SendNode(instanceOf, v => v.Prefix, SendSpace);
            ctx.SendNode(instanceOf, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(instanceOf, v => v.Padding.Expression, SendRightPadded);
            ctx.SendNode(instanceOf, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(instanceOf, v => v.Pattern, ctx.SendTree);
            ctx.SendTypedValue(instanceOf, v => v.Type);
            return instanceOf;
        }

        public override J VisitIntersectionType(J.IntersectionType intersectionType, SenderContext ctx)
        {
            ctx.SendValue(intersectionType, v => v.Id);
            ctx.SendNode(intersectionType, v => v.Prefix, SendSpace);
            ctx.SendNode(intersectionType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(intersectionType, v => v.Padding.Bounds, SendContainer);
            return intersectionType;
        }

        public override J VisitLabel(J.Label label, SenderContext ctx)
        {
            ctx.SendValue(label, v => v.Id);
            ctx.SendNode(label, v => v.Prefix, SendSpace);
            ctx.SendNode(label, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(label, v => v.Padding.Name, SendRightPadded);
            ctx.SendNode(label, v => v.Statement, ctx.SendTree);
            return label;
        }

        public override J VisitLambda(J.Lambda lambda, SenderContext ctx)
        {
            ctx.SendValue(lambda, v => v.Id);
            ctx.SendNode(lambda, v => v.Prefix, SendSpace);
            ctx.SendNode(lambda, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(lambda, v => v.Params, ctx.SendTree);
            ctx.SendNode(lambda, v => v.Arrow, SendSpace);
            ctx.SendNode(lambda, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(lambda, v => v.Type);
            return lambda;
        }

        public override J VisitLambdaParameters(J.Lambda.Parameters parameters, SenderContext ctx)
        {
            ctx.SendValue(parameters, v => v.Id);
            ctx.SendNode(parameters, v => v.Prefix, SendSpace);
            ctx.SendNode(parameters, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(parameters, v => v.Parenthesized);
            ctx.SendNodes(parameters, v => v.Padding.Elements, SendRightPadded, t => t.Element.Id);
            return parameters;
        }

        public override J VisitLiteral(J.Literal literal, SenderContext ctx)
        {
            ctx.SendValue(literal, v => v.Id);
            ctx.SendNode(literal, v => v.Prefix, SendSpace);
            ctx.SendNode(literal, v => v.Markers, ctx.SendMarkers);
            ctx.SendTypedValue(literal, v => v.Value);
            ctx.SendValue(literal, v => v.ValueSource);
            ctx.SendValues(literal, v => v.UnicodeEscapes, x => x);
            ctx.SendValue(literal, v => v.Type);
            return literal;
        }

        public override J VisitMemberReference(J.MemberReference memberReference, SenderContext ctx)
        {
            ctx.SendValue(memberReference, v => v.Id);
            ctx.SendNode(memberReference, v => v.Prefix, SendSpace);
            ctx.SendNode(memberReference, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(memberReference, v => v.Padding.Containing, SendRightPadded);
            ctx.SendNode(memberReference, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(memberReference, v => v.Padding.Reference, SendLeftPadded);
            ctx.SendTypedValue(memberReference, v => v.Type);
            ctx.SendTypedValue(memberReference, v => v.MethodType);
            ctx.SendTypedValue(memberReference, v => v.VariableType);
            return memberReference;
        }

        public override J VisitMethodDeclaration(J.MethodDeclaration methodDeclaration, SenderContext ctx)
        {
            ctx.SendValue(methodDeclaration, v => v.Id);
            ctx.SendNode(methodDeclaration, v => v.Prefix, SendSpace);
            ctx.SendNode(methodDeclaration, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(methodDeclaration, v => v.LeadingAnnotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(methodDeclaration, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(methodDeclaration, v => v.Annotations.TypeParameters, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.ReturnTypeExpression, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.Annotations.Name, SendMethodIdentifierWithAnnotations);
            ctx.SendNode(methodDeclaration, v => v.Padding.Parameters, SendContainer);
            ctx.SendNode(methodDeclaration, v => v.Padding.Throws, SendContainer);
            ctx.SendNode(methodDeclaration, v => v.Body, ctx.SendTree);
            ctx.SendNode(methodDeclaration, v => v.Padding.DefaultValue, SendLeftPadded);
            ctx.SendTypedValue(methodDeclaration, v => v.MethodType);
            return methodDeclaration;
        }

        private void SendMethodIdentifierWithAnnotations(J.MethodDeclaration.IdentifierWithAnnotations identifierWithAnnotations, SenderContext ctx) {
            ctx.SendNode(identifierWithAnnotations, v => v.Identifier, ctx.SendTree);
            ctx.SendNodes(identifierWithAnnotations, v => v.Annotations, ctx.SendTree, t => t.Id);
        }

        public override J VisitMethodInvocation(J.MethodInvocation methodInvocation, SenderContext ctx)
        {
            ctx.SendValue(methodInvocation, v => v.Id);
            ctx.SendNode(methodInvocation, v => v.Prefix, SendSpace);
            ctx.SendNode(methodInvocation, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(methodInvocation, v => v.Padding.Select, SendRightPadded);
            ctx.SendNode(methodInvocation, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendNode(methodInvocation, v => v.Name, ctx.SendTree);
            ctx.SendNode(methodInvocation, v => v.Padding.Arguments, SendContainer);
            ctx.SendTypedValue(methodInvocation, v => v.MethodType);
            return methodInvocation;
        }

        public override J VisitModifier(J.Modifier modifier, SenderContext ctx)
        {
            ctx.SendValue(modifier, v => v.Id);
            ctx.SendNode(modifier, v => v.Prefix, SendSpace);
            ctx.SendNode(modifier, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(modifier, v => v.Keyword);
            ctx.SendValue(modifier, v => v.ModifierType);
            ctx.SendNodes(modifier, v => v.Annotations, ctx.SendTree, t => t.Id);
            return modifier;
        }

        public override J VisitMultiCatch(J.MultiCatch multiCatch, SenderContext ctx)
        {
            ctx.SendValue(multiCatch, v => v.Id);
            ctx.SendNode(multiCatch, v => v.Prefix, SendSpace);
            ctx.SendNode(multiCatch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(multiCatch, v => v.Padding.Alternatives, SendRightPadded, t => t.Element.Id);
            return multiCatch;
        }

        public override J VisitNewArray(J.NewArray newArray, SenderContext ctx)
        {
            ctx.SendValue(newArray, v => v.Id);
            ctx.SendNode(newArray, v => v.Prefix, SendSpace);
            ctx.SendNode(newArray, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(newArray, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNodes(newArray, v => v.Dimensions, ctx.SendTree, t => t.Id);
            ctx.SendNode(newArray, v => v.Padding.Initializer, SendContainer);
            ctx.SendTypedValue(newArray, v => v.Type);
            return newArray;
        }

        public override J VisitArrayDimension(J.ArrayDimension arrayDimension, SenderContext ctx)
        {
            ctx.SendValue(arrayDimension, v => v.Id);
            ctx.SendNode(arrayDimension, v => v.Prefix, SendSpace);
            ctx.SendNode(arrayDimension, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(arrayDimension, v => v.Padding.Index, SendRightPadded);
            return arrayDimension;
        }

        public override J VisitNewClass(J.NewClass newClass, SenderContext ctx)
        {
            ctx.SendValue(newClass, v => v.Id);
            ctx.SendNode(newClass, v => v.Prefix, SendSpace);
            ctx.SendNode(newClass, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(newClass, v => v.Padding.Enclosing, SendRightPadded);
            ctx.SendNode(newClass, v => v.New, SendSpace);
            ctx.SendNode(newClass, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(newClass, v => v.Padding.Arguments, SendContainer);
            ctx.SendNode(newClass, v => v.Body, ctx.SendTree);
            ctx.SendTypedValue(newClass, v => v.ConstructorType);
            return newClass;
        }

        public override J VisitNullableType(J.NullableType nullableType, SenderContext ctx)
        {
            ctx.SendValue(nullableType, v => v.Id);
            ctx.SendNode(nullableType, v => v.Prefix, SendSpace);
            ctx.SendNode(nullableType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(nullableType, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNode(nullableType, v => v.Padding.TypeTree, SendRightPadded);
            return nullableType;
        }

        public override J VisitPackage(J.Package package, SenderContext ctx)
        {
            ctx.SendValue(package, v => v.Id);
            ctx.SendNode(package, v => v.Prefix, SendSpace);
            ctx.SendNode(package, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(package, v => v.Expression, ctx.SendTree);
            ctx.SendNodes(package, v => v.Annotations, ctx.SendTree, t => t.Id);
            return package;
        }

        public override J VisitParameterizedType(J.ParameterizedType parameterizedType, SenderContext ctx)
        {
            ctx.SendValue(parameterizedType, v => v.Id);
            ctx.SendNode(parameterizedType, v => v.Prefix, SendSpace);
            ctx.SendNode(parameterizedType, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(parameterizedType, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(parameterizedType, v => v.Padding.TypeParameters, SendContainer);
            ctx.SendTypedValue(parameterizedType, v => v.Type);
            return parameterizedType;
        }

        public override J VisitParentheses<J2>(J.Parentheses<J2> parentheses, SenderContext ctx)
        {
            ctx.SendValue(parentheses, v => v.Id);
            ctx.SendNode(parentheses, v => v.Prefix, SendSpace);
            ctx.SendNode(parentheses, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(parentheses, v => v.Padding.Tree, SendRightPadded);
            return parentheses;
        }

        public override J VisitControlParentheses<J2>(J.ControlParentheses<J2> controlParentheses, SenderContext ctx)
        {
            ctx.SendValue(controlParentheses, v => v.Id);
            ctx.SendNode(controlParentheses, v => v.Prefix, SendSpace);
            ctx.SendNode(controlParentheses, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(controlParentheses, v => v.Padding.Tree, SendRightPadded);
            return controlParentheses;
        }

        public override J VisitPrimitive(J.Primitive primitive, SenderContext ctx)
        {
            ctx.SendValue(primitive, v => v.Id);
            ctx.SendNode(primitive, v => v.Prefix, SendSpace);
            ctx.SendNode(primitive, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(primitive, v => v.Type);
            return primitive;
        }

        public override J VisitReturn(J.Return @return, SenderContext ctx)
        {
            ctx.SendValue(@return, v => v.Id);
            ctx.SendNode(@return, v => v.Prefix, SendSpace);
            ctx.SendNode(@return, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@return, v => v.Expression, ctx.SendTree);
            return @return;
        }

        public override J VisitSwitch(J.Switch @switch, SenderContext ctx)
        {
            ctx.SendValue(@switch, v => v.Id);
            ctx.SendNode(@switch, v => v.Prefix, SendSpace);
            ctx.SendNode(@switch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@switch, v => v.Selector, ctx.SendTree);
            ctx.SendNode(@switch, v => v.Cases, ctx.SendTree);
            return @switch;
        }

        public override J VisitSwitchExpression(J.SwitchExpression switchExpression, SenderContext ctx)
        {
            ctx.SendValue(switchExpression, v => v.Id);
            ctx.SendNode(switchExpression, v => v.Prefix, SendSpace);
            ctx.SendNode(switchExpression, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(switchExpression, v => v.Selector, ctx.SendTree);
            ctx.SendNode(switchExpression, v => v.Cases, ctx.SendTree);
            ctx.SendTypedValue(switchExpression, v => v.Type);
            return switchExpression;
        }

        public override J VisitSynchronized(J.Synchronized synchronized, SenderContext ctx)
        {
            ctx.SendValue(synchronized, v => v.Id);
            ctx.SendNode(synchronized, v => v.Prefix, SendSpace);
            ctx.SendNode(synchronized, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(synchronized, v => v.Lock, ctx.SendTree);
            ctx.SendNode(synchronized, v => v.Body, ctx.SendTree);
            return synchronized;
        }

        public override J VisitTernary(J.Ternary ternary, SenderContext ctx)
        {
            ctx.SendValue(ternary, v => v.Id);
            ctx.SendNode(ternary, v => v.Prefix, SendSpace);
            ctx.SendNode(ternary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(ternary, v => v.Condition, ctx.SendTree);
            ctx.SendNode(ternary, v => v.Padding.TruePart, SendLeftPadded);
            ctx.SendNode(ternary, v => v.Padding.FalsePart, SendLeftPadded);
            ctx.SendTypedValue(ternary, v => v.Type);
            return ternary;
        }

        public override J VisitThrow(J.Throw @throw, SenderContext ctx)
        {
            ctx.SendValue(@throw, v => v.Id);
            ctx.SendNode(@throw, v => v.Prefix, SendSpace);
            ctx.SendNode(@throw, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@throw, v => v.Exception, ctx.SendTree);
            return @throw;
        }

        public override J VisitTry(J.Try @try, SenderContext ctx)
        {
            ctx.SendValue(@try, v => v.Id);
            ctx.SendNode(@try, v => v.Prefix, SendSpace);
            ctx.SendNode(@try, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@try, v => v.Padding.Resources, SendContainer);
            ctx.SendNode(@try, v => v.Body, ctx.SendTree);
            ctx.SendNodes(@try, v => v.Catches, ctx.SendTree, t => t.Id);
            ctx.SendNode(@try, v => v.Padding.Finally, SendLeftPadded);
            return @try;
        }

        public override J VisitTryResource(J.Try.Resource resource, SenderContext ctx)
        {
            ctx.SendValue(resource, v => v.Id);
            ctx.SendNode(resource, v => v.Prefix, SendSpace);
            ctx.SendNode(resource, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(resource, v => v.VariableDeclarations, ctx.SendTree);
            ctx.SendValue(resource, v => v.TerminatedWithSemicolon);
            return resource;
        }

        public override J VisitCatch(J.Try.Catch @catch, SenderContext ctx)
        {
            ctx.SendValue(@catch, v => v.Id);
            ctx.SendNode(@catch, v => v.Prefix, SendSpace);
            ctx.SendNode(@catch, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(@catch, v => v.Parameter, ctx.SendTree);
            ctx.SendNode(@catch, v => v.Body, ctx.SendTree);
            return @catch;
        }

        public override J VisitTypeCast(J.TypeCast typeCast, SenderContext ctx)
        {
            ctx.SendValue(typeCast, v => v.Id);
            ctx.SendNode(typeCast, v => v.Prefix, SendSpace);
            ctx.SendNode(typeCast, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(typeCast, v => v.Clazz, ctx.SendTree);
            ctx.SendNode(typeCast, v => v.Expression, ctx.SendTree);
            return typeCast;
        }

        public override J VisitTypeParameter(J.TypeParameter typeParameter, SenderContext ctx)
        {
            ctx.SendValue(typeParameter, v => v.Id);
            ctx.SendNode(typeParameter, v => v.Prefix, SendSpace);
            ctx.SendNode(typeParameter, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(typeParameter, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(typeParameter, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(typeParameter, v => v.Name, ctx.SendTree);
            ctx.SendNode(typeParameter, v => v.Padding.Bounds, SendContainer);
            return typeParameter;
        }

        public override J VisitTypeParameters(J.TypeParameters typeParameters, SenderContext ctx)
        {
            ctx.SendValue(typeParameters, v => v.Id);
            ctx.SendNode(typeParameters, v => v.Prefix, SendSpace);
            ctx.SendNode(typeParameters, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(typeParameters, v => v.Annotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(typeParameters, v => v.Padding.Parameters, SendRightPadded, t => t.Element.Id);
            return typeParameters;
        }

        public override J VisitUnary(J.Unary unary, SenderContext ctx)
        {
            ctx.SendValue(unary, v => v.Id);
            ctx.SendNode(unary, v => v.Prefix, SendSpace);
            ctx.SendNode(unary, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unary, v => v.Padding.Operator, SendLeftPadded);
            ctx.SendNode(unary, v => v.Expression, ctx.SendTree);
            ctx.SendTypedValue(unary, v => v.Type);
            return unary;
        }

        public override J VisitVariableDeclarations(J.VariableDeclarations variableDeclarations, SenderContext ctx)
        {
            ctx.SendValue(variableDeclarations, v => v.Id);
            ctx.SendNode(variableDeclarations, v => v.Prefix, SendSpace);
            ctx.SendNode(variableDeclarations, v => v.Markers, ctx.SendMarkers);
            ctx.SendNodes(variableDeclarations, v => v.LeadingAnnotations, ctx.SendTree, t => t.Id);
            ctx.SendNodes(variableDeclarations, v => v.Modifiers, ctx.SendTree, t => t.Id);
            ctx.SendNode(variableDeclarations, v => v.TypeExpression, ctx.SendTree);
            ctx.SendNode(variableDeclarations, v => v.Varargs, SendSpace);
            ctx.SendNodes(variableDeclarations, v => v.DimensionsBeforeName, SendLeftPadded, t => t);
            ctx.SendNodes(variableDeclarations, v => v.Padding.Variables, SendRightPadded, t => t.Element.Id);
            return variableDeclarations;
        }

        public override J VisitVariable(J.VariableDeclarations.NamedVariable namedVariable, SenderContext ctx)
        {
            ctx.SendValue(namedVariable, v => v.Id);
            ctx.SendNode(namedVariable, v => v.Prefix, SendSpace);
            ctx.SendNode(namedVariable, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(namedVariable, v => v.Name, ctx.SendTree);
            ctx.SendNodes(namedVariable, v => v.DimensionsAfterName, SendLeftPadded, t => t);
            ctx.SendNode(namedVariable, v => v.Padding.Initializer, SendLeftPadded);
            ctx.SendTypedValue(namedVariable, v => v.VariableType);
            return namedVariable;
        }

        public override J VisitWhileLoop(J.WhileLoop whileLoop, SenderContext ctx)
        {
            ctx.SendValue(whileLoop, v => v.Id);
            ctx.SendNode(whileLoop, v => v.Prefix, SendSpace);
            ctx.SendNode(whileLoop, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(whileLoop, v => v.Condition, ctx.SendTree);
            ctx.SendNode(whileLoop, v => v.Padding.Body, SendRightPadded);
            return whileLoop;
        }

        public override J VisitWildcard(J.Wildcard wildcard, SenderContext ctx)
        {
            ctx.SendValue(wildcard, v => v.Id);
            ctx.SendNode(wildcard, v => v.Prefix, SendSpace);
            ctx.SendNode(wildcard, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(wildcard, v => v.Padding.WildcardBound, SendLeftPadded);
            ctx.SendNode(wildcard, v => v.BoundedType, ctx.SendTree);
            return wildcard;
        }

        public override J VisitYield(J.Yield yield, SenderContext ctx)
        {
            ctx.SendValue(yield, v => v.Id);
            ctx.SendNode(yield, v => v.Prefix, SendSpace);
            ctx.SendNode(yield, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(yield, v => v.Implicit);
            ctx.SendNode(yield, v => v.Value, ctx.SendTree);
            return yield;
        }

        public override J VisitUnknown(J.Unknown unknown, SenderContext ctx)
        {
            ctx.SendValue(unknown, v => v.Id);
            ctx.SendNode(unknown, v => v.Prefix, SendSpace);
            ctx.SendNode(unknown, v => v.Markers, ctx.SendMarkers);
            ctx.SendNode(unknown, v => v.UnknownSource, ctx.SendTree);
            return unknown;
        }

        public override J VisitUnknownSource(J.Unknown.Source source, SenderContext ctx)
        {
            ctx.SendValue(source, v => v.Id);
            ctx.SendNode(source, v => v.Prefix, SendSpace);
            ctx.SendNode(source, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(source, v => v.Text);
            return source;
        }

        public override J VisitErroneous(J.Erroneous erroneous, SenderContext ctx)
        {
            ctx.SendValue(erroneous, v => v.Id);
            ctx.SendNode(erroneous, v => v.Prefix, SendSpace);
            ctx.SendNode(erroneous, v => v.Markers, ctx.SendMarkers);
            ctx.SendValue(erroneous, v => v.Text);
            return erroneous;
        }

        private static void SendContainer<T>(JContainer<T> container, SenderContext ctx)
        where T : J
        {
            ctx.SendNode(container, v => v.Before, SendSpace);
            ctx.SendNodes(container, v => v.Padding.Elements, SendRightPadded, e => e.Element.Id);
            ctx.SendNode(container, v => v.Markers, ctx.SendMarkers);
        }

        private static void SendLeftPadded<T>(JLeftPadded<T> leftPadded, SenderContext ctx)
        {
            ctx.SendNode(leftPadded, v => v.Before, SendSpace);
            switch (leftPadded.Element)
            {
                case J:
                    ctx.SendNode(leftPadded, e => e.Element as J, ctx.SendTree);
                    break;
                case Space:
                    ctx.SendNode(leftPadded, e => e.Element as Space, SendSpace!);
                    break;
                default:
                    ctx.SendValue(leftPadded, e => e.Element);
                    break;
            }
            ctx.SendNode(leftPadded, v => v.Markers, ctx.SendMarkers);
        }

        private static void SendRightPadded<T>(JRightPadded<T> rightPadded, SenderContext ctx)
        {
            switch (rightPadded.Element)
            {
                case J:
                    ctx.SendNode(rightPadded, e => e.Element as J, ctx.SendTree);
                    break;
                case Space:
                    ctx.SendNode(rightPadded, e => e.Element as Space, SendSpace!);
                    break;
                default:
                    ctx.SendValue(rightPadded, e => e.Element);
                    break;
            }
            ctx.SendNode(rightPadded, v => v.After, SendSpace);
            ctx.SendNode(rightPadded, v => v.Markers, ctx.SendMarkers);
        }

        private static void SendSpace(Space space, SenderContext ctx)
        {
            ctx.SendNodes(space, v => v.Comments, SendComment, x => x);
            ctx.SendValue(space, v => v.Whitespace);
        }

        private static void SendComment(Comment comment, SenderContext ctx)
        {
            ctx.SendValue(comment, v => v.Multiline);
            if (comment is TextComment textComment) {
                ctx.SendValue(textComment, v => v.Text);
            } else {
                // FIXME add support for Javadoc
                ctx.SendValue(comment, v => "");
            }
            ctx.SendValue(comment, v => v.Suffix);
            ctx.SendNode(comment, v => v.Markers, ctx.SendMarkers);
        }

    }
}
