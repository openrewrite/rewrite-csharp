//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# list pattern that matches elements in a list or array against a sequence of patterns.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple list patterns
    ///     if (array is [1, 2, 3] lst)
    ///     if (list is [1, _, 3])
    ///     // With designation
    ///     if (points is [(0, 0), (1, 1)] coords)
    ///     // With slices
    ///     if (numbers is [1, .., 5] sequence)
    ///     if (values is [1, 2, .., 8, 9] arr)
    ///     // With subpatterns
    ///     if (points is [(0, 0), (1, 1)])
    ///     // With type patterns
    ///     if (list is [int i, string s] result)
    ///     // In switch expressions
    ///     return array switch {
    ///         [var first, _] arr =&gt; arr.Length,
    ///         [1, 2, ..] seq =&gt; "starts with 1,2",
    ///         [] empty =&gt; "empty",
    ///         _ =&gt; "other"
    ///     };
    ///     // With length patterns
    ///     if (array is [&gt; 0, &lt;= 10] valid)
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ListPattern(
    Guid id,
    Space prefix,
    Markers markers,
    JContainer<Pattern> patterns,
    VariableDesignation? designation
    ) : Cs.Pattern, Expression<ListPattern>, MutableTree<ListPattern>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitListPattern(this, p);
        }

        public Guid Id => id;

        public ListPattern WithId(Guid newId)
        {
            return newId == id ? this : new ListPattern(newId, prefix, markers, _patterns, designation);
        }
        public Space Prefix => prefix;

        public ListPattern WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new ListPattern(id, newPrefix, markers, _patterns, designation);
        }
        public Markers Markers => markers;

        public ListPattern WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new ListPattern(id, prefix, newMarkers, _patterns, designation);
        }
        private readonly JContainer<Cs.Pattern> _patterns = patterns;
        public IList<Cs.Pattern> Patterns => _patterns.GetElements();

        public ListPattern WithPatterns(IList<Cs.Pattern> newPatterns)
        {
            return Padding.WithPatterns(JContainer<Cs.Pattern>.WithElements(_patterns, newPatterns));
        }
        public Cs.VariableDesignation? Designation => designation;

        public ListPattern WithDesignation(Cs.VariableDesignation? newDesignation)
        {
            return ReferenceEquals(newDesignation, designation) ? this : new ListPattern(id, prefix, markers, _patterns, newDesignation);
        }
        public sealed record PaddingHelper(Cs.ListPattern T)
        {
            public JContainer<Cs.Pattern> Patterns => T._patterns;

            public Cs.ListPattern WithPatterns(JContainer<Cs.Pattern> newPatterns)
            {
                return T._patterns == newPatterns ? T : new Cs.ListPattern(T.Id, T.Prefix, T.Markers, newPatterns, T.Designation);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ListPattern && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}