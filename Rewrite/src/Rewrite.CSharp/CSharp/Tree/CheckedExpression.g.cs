//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# checked or unchecked expression which controls overflow checking behavior.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Checked expression
    ///     int result = checked(x + y);
    ///     // Unchecked expression
    ///     int value = unchecked(a * b);
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class CheckedExpression(
    Guid id,
    Space prefix,
    Markers markers,
    Keyword checkedOrUncheckedKeyword,
    J.ControlParentheses<Expression> expression
    ) : Cs,Expression    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitCheckedExpression(this, p);
        }

        public Guid Id { get;  set; } = id;

        public CheckedExpression WithId(Guid newId)
        {
            return newId == Id ? this : new CheckedExpression(newId, Prefix, Markers, CheckedOrUncheckedKeyword, Expression);
        }
        public Space Prefix { get;  set; } = prefix;

        public CheckedExpression WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new CheckedExpression(Id, newPrefix, Markers, CheckedOrUncheckedKeyword, Expression);
        }
        public Markers Markers { get;  set; } = markers;

        public CheckedExpression WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new CheckedExpression(Id, Prefix, newMarkers, CheckedOrUncheckedKeyword, Expression);
        }
        public Cs.Keyword CheckedOrUncheckedKeyword { get;  set; } = checkedOrUncheckedKeyword;

        public CheckedExpression WithCheckedOrUncheckedKeyword(Cs.Keyword newCheckedOrUncheckedKeyword)
        {
            return ReferenceEquals(newCheckedOrUncheckedKeyword, CheckedOrUncheckedKeyword) ? this : new CheckedExpression(Id, Prefix, Markers, newCheckedOrUncheckedKeyword, Expression);
        }
        public J.ControlParentheses<Expression> Expression { get;  set; } = expression;

        public CheckedExpression WithExpression(J.ControlParentheses<Expression> newExpression)
        {
            return ReferenceEquals(newExpression, Expression) ? this : new CheckedExpression(Id, Prefix, Markers, CheckedOrUncheckedKeyword, newExpression);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is CheckedExpression && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}