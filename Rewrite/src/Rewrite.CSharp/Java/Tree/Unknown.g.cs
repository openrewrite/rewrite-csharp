//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    /// <summary>
    /// A tree node that represents an unparsed element.
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Unknown(
    Guid id,
    Space prefix,
    Markers markers,
    Unknown.Source unknownSource
    ) : J,Statement,Expression,TypeTree    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitUnknown(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Unknown WithId(Guid newId)
        {
            return newId == Id ? this : new Unknown(newId, Prefix, Markers, UnknownSource);
        }
        public Space Prefix { get;  set; } = prefix;

        public Unknown WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Unknown(Id, newPrefix, Markers, UnknownSource);
        }
        public Markers Markers { get;  set; } = markers;

        public Unknown WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Unknown(Id, Prefix, newMarkers, UnknownSource);
        }
        public Source UnknownSource { get;  set; } = unknownSource;

        public Unknown WithUnknownSource(Source newUnknownSource)
        {
            return ReferenceEquals(newUnknownSource, UnknownSource) ? this : new Unknown(Id, Prefix, Markers, newUnknownSource);
        }
        /// <summary>
        /// This class only exists to clean up the printed results from `SearchResult` markers.
        /// Without the marker the comments will print before the LST prefix.
        /// </summary>
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class Source(
    Guid id,
    Space prefix,
    Markers markers,
    string text
        ) : J, MutableTree
        {
            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitUnknownSource(this, p);
            }

            public Guid Id { get;  set; } = id;

            public Source WithId(Guid newId)
            {
                return newId == Id ? this : new Source(newId, Prefix, Markers, Text);
            }
            public Space Prefix { get;  set; } = prefix;

            public Source WithPrefix(Space newPrefix)
            {
                return newPrefix == Prefix ? this : new Source(Id, newPrefix, Markers, Text);
            }
            public Markers Markers { get;  set; } = markers;

            public Source WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, Markers) ? this : new Source(Id, Prefix, newMarkers, Text);
            }
            public string Text { get;  set; } = text;

            public Source WithText(string newText)
            {
                return newText == Text ? this : new Source(Id, Prefix, Markers, newText);
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Source && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Unknown && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}