//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# destructor which is a method called before an object is destroyed by the garbage collector.
    /// A destructor must be named the same as the class prefixed with a tilde (~), cannot be explicitly called,
    /// cannot have parameters or access modifiers, and cannot be overloaded or inherited.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Basic destructor
    ///     ~MyClass()
    ///     {
    ///         // Cleanup code
    ///     }
    ///     // Destructor with cleanup logic
    ///     ~ResourceHandler()
    ///     {
    ///         if (handle != IntPtr.Zero)
    ///         {
    ///             CloseHandle(handle);
    ///         }
    ///     }
    ///     // Class with both constructor and destructor
    ///     public class FileWrapper
    ///     {
    ///         public FileWrapper()
    ///         {
    ///             // Initialize
    ///         }
    ///         ~FileWrapper()
    ///         {
    ///             // Cleanup
    ///         }
    ///     }
    /// </code>
    /// <br/>
    /// Note: In modern C#, it's recommended to implement IDisposable pattern instead of relying on destructors
    /// for deterministic cleanup of resources, as destructors are non-deterministic and can impact performance.
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class DestructorDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    J.MethodDeclaration methodCore
    ) : Cs, Statement, J<DestructorDeclaration>, MutableTree<DestructorDeclaration>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitDestructorDeclaration(this, p);
        }

        public Guid Id { get;  set; } = id;

        public DestructorDeclaration WithId(Guid newId)
        {
            return newId == Id ? this : new DestructorDeclaration(newId, Prefix, Markers, MethodCore);
        }
        public Space Prefix { get;  set; } = prefix;

        public DestructorDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new DestructorDeclaration(Id, newPrefix, Markers, MethodCore);
        }
        public Markers Markers { get;  set; } = markers;

        public DestructorDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new DestructorDeclaration(Id, Prefix, newMarkers, MethodCore);
        }
        public J.MethodDeclaration MethodCore { get;  set; } = methodCore;

        public DestructorDeclaration WithMethodCore(J.MethodDeclaration newMethodCore)
        {
            return ReferenceEquals(newMethodCore, MethodCore) ? this : new DestructorDeclaration(Id, Prefix, Markers, newMethodCore);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is DestructorDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}