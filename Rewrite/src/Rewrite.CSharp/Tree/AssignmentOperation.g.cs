//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class AssignmentOperation(
    Guid id,
    Space prefix,
    Markers markers,
    Expression variable,
    JLeftPadded<AssignmentOperation.OperatorType> @operator,
    Expression assignment,
    JavaType? type
    ) : Cs, Statement, Expression, TypedTree, Expression<AssignmentOperation>, TypedTree<AssignmentOperation>, J<AssignmentOperation>, MutableTree<AssignmentOperation>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitAssignmentOperation(this, p);
        }

        public Guid Id { get;  set; } = id;

        public AssignmentOperation WithId(Guid newId)
        {
            return newId == Id ? this : new AssignmentOperation(newId, Prefix, Markers, Variable, _operator, Assignment, Type);
        }
        public Space Prefix { get;  set; } = prefix;

        public AssignmentOperation WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new AssignmentOperation(Id, newPrefix, Markers, Variable, _operator, Assignment, Type);
        }
        public Markers Markers { get;  set; } = markers;

        public AssignmentOperation WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new AssignmentOperation(Id, Prefix, newMarkers, Variable, _operator, Assignment, Type);
        }
        public Expression Variable { get;  set; } = variable;

        public AssignmentOperation WithVariable(Expression newVariable)
        {
            return ReferenceEquals(newVariable, Variable) ? this : new AssignmentOperation(Id, Prefix, Markers, newVariable, _operator, Assignment, Type);
        }
        private JLeftPadded<OperatorType> _operator = @operator;
        public OperatorType Operator => _operator.Element;

        public AssignmentOperation WithOperator(OperatorType newOperator)
        {
            return Padding.WithOperator(_operator.WithElement(newOperator));
        }
        public Expression Assignment { get;  set; } = assignment;

        public AssignmentOperation WithAssignment(Expression newAssignment)
        {
            return ReferenceEquals(newAssignment, Assignment) ? this : new AssignmentOperation(Id, Prefix, Markers, Variable, _operator, newAssignment, Type);
        }
        public JavaType? Type { get;  set; } = type;

        public AssignmentOperation WithType(JavaType? newType)
        {
            return newType == Type ? this : new AssignmentOperation(Id, Prefix, Markers, Variable, _operator, Assignment, newType);
        }
        public enum OperatorType
        {
            NullCoalescing,
        }
        public sealed record PaddingHelper(Cs.AssignmentOperation T)
        {
            public JLeftPadded<Cs.AssignmentOperation.OperatorType> Operator { get => T._operator;  set => T._operator = value; }

            public Cs.AssignmentOperation WithOperator(JLeftPadded<Cs.AssignmentOperation.OperatorType> newOperator)
            {
                return Operator == newOperator ? T : new Cs.AssignmentOperation(T.Id, T.Prefix, T.Markers, T.Variable, newOperator, T.Assignment, T.Type);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is AssignmentOperation && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}