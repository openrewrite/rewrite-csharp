//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Literal(
    Guid id,
    Space prefix,
    Markers markers,
    object? value,
    string? valueSource,
    IList<Literal.UnicodeEscape>? unicodeEscapes,
    JavaType.Primitive type
    ) : J,Expression,TypedTree    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitLiteral(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Literal WithId(Guid newId)
        {
            return newId == Id ? this : new Literal(newId, Prefix, Markers, Value, ValueSource, UnicodeEscapes, Type);
        }
        public Space Prefix { get;  set; } = prefix;

        public Literal WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Literal(Id, newPrefix, Markers, Value, ValueSource, UnicodeEscapes, Type);
        }
        public Markers Markers { get;  set; } = markers;

        public Literal WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Literal(Id, Prefix, newMarkers, Value, ValueSource, UnicodeEscapes, Type);
        }
        public object? Value { get;  set; } = value;

        public Literal WithValue(object? newValue)
        {
            return newValue == Value ? this : new Literal(Id, Prefix, Markers, newValue, ValueSource, UnicodeEscapes, Type);
        }
        public string? ValueSource { get;  set; } = valueSource;

        public Literal WithValueSource(string? newValueSource)
        {
            return newValueSource == ValueSource ? this : new Literal(Id, Prefix, Markers, Value, newValueSource, UnicodeEscapes, Type);
        }
        public IList<UnicodeEscape>? UnicodeEscapes { get;  set; } = unicodeEscapes;

        public Literal WithUnicodeEscapes(IList<UnicodeEscape>? newUnicodeEscapes)
        {
            return newUnicodeEscapes == UnicodeEscapes ? this : new Literal(Id, Prefix, Markers, Value, ValueSource, newUnicodeEscapes, Type);
        }
        public JavaType.Primitive Type { get;  set; } = type;

        public Literal WithType(JavaType.Primitive newType)
        {
            return newType == Type ? this : new Literal(Id, Prefix, Markers, Value, ValueSource, UnicodeEscapes, newType);
        }
        public sealed record UnicodeEscape(
    int valueSourceIndex,
    string codePoint
        )
        {
            public int ValueSourceIndex { get;  set; } = valueSourceIndex;

            public UnicodeEscape WithValueSourceIndex(int newValueSourceIndex)
            {
                return newValueSourceIndex == ValueSourceIndex ? this : new UnicodeEscape(newValueSourceIndex, CodePoint);
            }
            public string CodePoint { get;  set; } = codePoint;

            public UnicodeEscape WithCodePoint(string newCodePoint)
            {
                return newCodePoint == CodePoint ? this : new UnicodeEscape(ValueSourceIndex, newCodePoint);
            }
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Literal && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}