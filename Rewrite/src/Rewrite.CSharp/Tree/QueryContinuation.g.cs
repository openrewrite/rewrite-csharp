//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a LINQ query continuation using the 'into' keyword, which allows query results to be
    /// further processed in subsequent query clauses.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Query continuation with grouping
    ///     from c in customers
    ///     group c by c.Country into g
    ///     select new { Country = g.Key, Count = g.Count() }
    ///     // Multiple continuations
    ///     from n in numbers
    ///     group n by n % 2 into g
    ///     select new { Modulo = g.Key, Items = g } into r
    ///     where r.Items.Count() &gt; 2
    ///     select r
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class QueryContinuation(
    Guid id,
    Space prefix,
    Markers markers,
    J.Identifier identifier,
    QueryBody body
    ) : Cs, J<QueryContinuation>, MutableTree<QueryContinuation>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitQueryContinuation(this, p);
        }

        public Guid Id => id;

        public QueryContinuation WithId(Guid newId)
        {
            return newId == id ? this : new QueryContinuation(newId, prefix, markers, identifier, body);
        }
        public Space Prefix => prefix;

        public QueryContinuation WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new QueryContinuation(id, newPrefix, markers, identifier, body);
        }
        public Markers Markers => markers;

        public QueryContinuation WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new QueryContinuation(id, prefix, newMarkers, identifier, body);
        }
        public J.Identifier Identifier => identifier;

        public QueryContinuation WithIdentifier(J.Identifier newIdentifier)
        {
            return ReferenceEquals(newIdentifier, identifier) ? this : new QueryContinuation(id, prefix, markers, newIdentifier, body);
        }
        public Cs.QueryBody Body => body;

        public QueryContinuation WithBody(Cs.QueryBody newBody)
        {
            return ReferenceEquals(newBody, body) ? this : new QueryContinuation(id, prefix, markers, identifier, newBody);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is QueryContinuation && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}