//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class VariableDeclarations(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> leadingAnnotations,
    IList<Modifier> modifiers,
    TypeTree? typeExpression,
    Space? varargs,
    IList<JLeftPadded<Space>> dimensionsBeforeName,
    IList<JRightPadded<VariableDeclarations.NamedVariable>> variables
    ) : J, Statement, TypedTree, TypedTree<VariableDeclarations>, J<VariableDeclarations>, MutableTree<VariableDeclarations>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitVariableDeclarations(this, p);
        }

        public Guid Id { get;  set; } = id;

        public VariableDeclarations WithId(Guid newId)
        {
            return newId == Id ? this : new VariableDeclarations(newId, Prefix, Markers, LeadingAnnotations, Modifiers, TypeExpression, Varargs, DimensionsBeforeName, _variables);
        }
        public Space Prefix { get;  set; } = prefix;

        public VariableDeclarations WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new VariableDeclarations(Id, newPrefix, Markers, LeadingAnnotations, Modifiers, TypeExpression, Varargs, DimensionsBeforeName, _variables);
        }
        public Markers Markers { get;  set; } = markers;

        public VariableDeclarations WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new VariableDeclarations(Id, Prefix, newMarkers, LeadingAnnotations, Modifiers, TypeExpression, Varargs, DimensionsBeforeName, _variables);
        }
        public IList<J.Annotation> LeadingAnnotations { get;  set; } = leadingAnnotations;

        public VariableDeclarations WithLeadingAnnotations(IList<J.Annotation> newLeadingAnnotations)
        {
            return newLeadingAnnotations == LeadingAnnotations ? this : new VariableDeclarations(Id, Prefix, Markers, newLeadingAnnotations, Modifiers, TypeExpression, Varargs, DimensionsBeforeName, _variables);
        }
        public IList<J.Modifier> Modifiers { get;  set; } = modifiers;

        public VariableDeclarations WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == Modifiers ? this : new VariableDeclarations(Id, Prefix, Markers, LeadingAnnotations, newModifiers, TypeExpression, Varargs, DimensionsBeforeName, _variables);
        }
        public TypeTree? TypeExpression { get;  set; } = typeExpression;

        public VariableDeclarations WithTypeExpression(TypeTree? newTypeExpression)
        {
            return ReferenceEquals(newTypeExpression, TypeExpression) ? this : new VariableDeclarations(Id, Prefix, Markers, LeadingAnnotations, Modifiers, newTypeExpression, Varargs, DimensionsBeforeName, _variables);
        }
        public Space? Varargs { get;  set; } = varargs;

        public VariableDeclarations WithVarargs(Space? newVarargs)
        {
            return newVarargs == Varargs ? this : new VariableDeclarations(Id, Prefix, Markers, LeadingAnnotations, Modifiers, TypeExpression, newVarargs, DimensionsBeforeName, _variables);
        }
        public IList<JLeftPadded<Space>> DimensionsBeforeName { get;  set; } = dimensionsBeforeName;

        public VariableDeclarations WithDimensionsBeforeName(IList<JLeftPadded<Space>> newDimensionsBeforeName)
        {
            return newDimensionsBeforeName == DimensionsBeforeName ? this : new VariableDeclarations(Id, Prefix, Markers, LeadingAnnotations, Modifiers, TypeExpression, Varargs, newDimensionsBeforeName, _variables);
        }
        private IList<JRightPadded<NamedVariable>> _variables = variables;
        public IList<NamedVariable> Variables => _variables.Elements();

        public VariableDeclarations WithVariables(IList<NamedVariable> newVariables)
        {
            return Padding.WithVariables(_variables.WithElements(newVariables));
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class NamedVariable(
    Guid id,
    Space prefix,
    Markers markers,
    J.Identifier name,
    IList<JLeftPadded<Space>> dimensionsAfterName,
    JLeftPadded<Expression>? initializer,
    JavaType.Variable? variableType
        ) : J, NameTree, TypedTree<NamedVariable>, J<NamedVariable>, TypeTree<NamedVariable>, MutableTree<NamedVariable>
        {
            [NonSerialized] private WeakReference<PaddingHelper>? _padding;

            public PaddingHelper Padding
            {
                get
                {
                    PaddingHelper? p;
                    if (_padding == null)
                    {
                        p = new PaddingHelper(this);
                        _padding = new WeakReference<PaddingHelper>(p);
                    }
                    else
                    {
                        _padding.TryGetTarget(out p);
                        if (p == null || p.T != this)
                        {
                            p = new PaddingHelper(this);
                            _padding.SetTarget(p);
                        }
                    }
                    return p;
                }
            }

            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitVariable(this, p);
            }

            public Guid Id { get;  set; } = id;

            public NamedVariable WithId(Guid newId)
            {
                return newId == Id ? this : new NamedVariable(newId, Prefix, Markers, Name, DimensionsAfterName, _initializer, VariableType);
            }
            public Space Prefix { get;  set; } = prefix;

            public NamedVariable WithPrefix(Space newPrefix)
            {
                return newPrefix == Prefix ? this : new NamedVariable(Id, newPrefix, Markers, Name, DimensionsAfterName, _initializer, VariableType);
            }
            public Markers Markers { get;  set; } = markers;

            public NamedVariable WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, Markers) ? this : new NamedVariable(Id, Prefix, newMarkers, Name, DimensionsAfterName, _initializer, VariableType);
            }
            public J.Identifier Name { get;  set; } = name;

            public NamedVariable WithName(J.Identifier newName)
            {
                return ReferenceEquals(newName, Name) ? this : new NamedVariable(Id, Prefix, Markers, newName, DimensionsAfterName, _initializer, VariableType);
            }
            public IList<JLeftPadded<Space>> DimensionsAfterName { get;  set; } = dimensionsAfterName;

            public NamedVariable WithDimensionsAfterName(IList<JLeftPadded<Space>> newDimensionsAfterName)
            {
                return newDimensionsAfterName == DimensionsAfterName ? this : new NamedVariable(Id, Prefix, Markers, Name, newDimensionsAfterName, _initializer, VariableType);
            }
            private JLeftPadded<Expression>? _initializer = initializer;
            public Expression? Initializer => _initializer?.Element;

            public NamedVariable WithInitializer(Expression? newInitializer)
            {
                return Padding.WithInitializer(JLeftPadded<Expression>.WithElement(_initializer, newInitializer));
            }
            public JavaType.Variable? VariableType { get;  set; } = variableType;

            public NamedVariable WithVariableType(JavaType.Variable? newVariableType)
            {
                return newVariableType == VariableType ? this : new NamedVariable(Id, Prefix, Markers, Name, DimensionsAfterName, _initializer, newVariableType);
            }
            public sealed record PaddingHelper(J.VariableDeclarations.NamedVariable T)
            {
                public JLeftPadded<Expression>? Initializer { get => T._initializer;  set => T._initializer = value; }

                public J.VariableDeclarations.NamedVariable WithInitializer(JLeftPadded<Expression>? newInitializer)
                {
                    return Initializer == newInitializer ? T : new J.VariableDeclarations.NamedVariable(T.Id, T.Prefix, T.Markers, T.Name, T.DimensionsAfterName, newInitializer, T.VariableType);
                }

            }

            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is NamedVariable && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        public sealed record PaddingHelper(J.VariableDeclarations T)
        {
            public IList<JRightPadded<J.VariableDeclarations.NamedVariable>> Variables { get => T._variables;  set => T._variables = value; }

            public J.VariableDeclarations WithVariables(IList<JRightPadded<J.VariableDeclarations.NamedVariable>> newVariables)
            {
                return Variables == newVariables ? T : new J.VariableDeclarations(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T.TypeExpression, T.Varargs, T.DimensionsBeforeName, newVariables);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is VariableDeclarations && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}