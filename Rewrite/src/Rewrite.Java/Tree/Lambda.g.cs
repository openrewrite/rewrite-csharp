//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    public partial class Lambda(
    Guid id,
    Space prefix,
    Markers markers,
    Lambda.Parameters @params,
    Space arrow,
    J body,
    JavaType? type
    ) : J, Statement, Expression, TypedTree, MutableTree<Lambda>
    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitLambda(this, p);
        }

        public Guid Id => id;

        public Lambda WithId(Guid newId)
        {
            return newId == id ? this : new Lambda(newId, prefix, markers, @params, arrow, body, type);
        }
        public Space Prefix => prefix;

        public Lambda WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new Lambda(id, newPrefix, markers, @params, arrow, body, type);
        }
        public Markers Markers => markers;

        public Lambda WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new Lambda(id, prefix, newMarkers, @params, arrow, body, type);
        }
        public Parameters Params => @params;

        public Lambda WithParams(Parameters newParams)
        {
            return ReferenceEquals(newParams, @params) ? this : new Lambda(id, prefix, markers, newParams, arrow, body, type);
        }
        public Space Arrow => arrow;

        public Lambda WithArrow(Space newArrow)
        {
            return newArrow == arrow ? this : new Lambda(id, prefix, markers, @params, newArrow, body, type);
        }
        public J Body => body;

        public Lambda WithBody(J newBody)
        {
            return ReferenceEquals(newBody, body) ? this : new Lambda(id, prefix, markers, @params, arrow, newBody, type);
        }
        public JavaType? Type => type;

        public Lambda WithType(JavaType? newType)
        {
            return newType == type ? this : new Lambda(id, prefix, markers, @params, arrow, body, newType);
        }
        public partial class Parameters(
    Guid id,
    Space prefix,
    Markers markers,
    bool parenthesized,
    IList<JRightPadded<J>> elements
        ) : J, MutableTree<Parameters>
        {
            [NonSerialized] private WeakReference<PaddingHelper>? _padding;

            public PaddingHelper Padding
            {
                get
                {
                    PaddingHelper? p;
                    if (_padding == null)
                    {
                        p = new PaddingHelper(this);
                        _padding = new WeakReference<PaddingHelper>(p);
                    }
                    else
                    {
                        _padding.TryGetTarget(out p);
                        if (p == null || p.T != this)
                        {
                            p = new PaddingHelper(this);
                            _padding.SetTarget(p);
                        }
                    }
                    return p;
                }
            }

            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitLambdaParameters(this, p);
            }

            public Guid Id => id;

            public Parameters WithId(Guid newId)
            {
                return newId == id ? this : new Parameters(newId, prefix, markers, parenthesized, _elements);
            }
            public Space Prefix => prefix;

            public Parameters WithPrefix(Space newPrefix)
            {
                return newPrefix == prefix ? this : new Parameters(id, newPrefix, markers, parenthesized, _elements);
            }
            public Markers Markers => markers;

            public Parameters WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, markers) ? this : new Parameters(id, prefix, newMarkers, parenthesized, _elements);
            }
            public bool Parenthesized => parenthesized;

            public Parameters WithParenthesized(bool newParenthesized)
            {
                return newParenthesized == parenthesized ? this : new Parameters(id, prefix, markers, newParenthesized, _elements);
            }
            private readonly IList<JRightPadded<J>> _elements = elements;
            public IList<J> Elements => _elements.Elements();

            public Parameters WithElements(IList<J> newElements)
            {
                return Padding.WithElements(_elements.WithElements(newElements));
            }
            public sealed record PaddingHelper(J.Lambda.Parameters T)
            {
                public IList<JRightPadded<J>> Elements => T._elements;

                public J.Lambda.Parameters WithElements(IList<JRightPadded<J>> newElements)
                {
                    return T._elements == newElements ? T : new J.Lambda.Parameters(T.Id, T.Prefix, T.Markers, T.Parenthesized, newElements);
                }

            }

            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Parameters && other.Id == Id;
            }

            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Lambda && other.Id == Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}