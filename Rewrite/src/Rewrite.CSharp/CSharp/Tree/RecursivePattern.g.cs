//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# recursive pattern that can match nested object structures, including property patterns and positional patterns.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple property pattern
    ///     if (obj is { Name: "test", Age: &gt; 18 })
    ///     // With type pattern
    ///     if (obj is Person { Name: "test" } p)
    ///     // With nested patterns
    ///     if (obj is { Address: { City: "NY" } })
    ///     // Positional patterns (deconstructions)
    ///     if (point is (int x, int y) { x: &gt; 0, y: &gt; 0 })
    ///     // With variable designation
    ///     if (obj is { Id: int id, Name: string name } result)
    ///     // In switch expressions
    ///     return shape switch {
    ///         Circle { Radius: var r } =&gt; Math.PI * r * r,
    ///         Rectangle { Width: var w, Height: var h } =&gt; w * h,
    ///         _ =&gt; 0
    ///     };
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class RecursivePattern(
    Guid id,
    Space prefix,
    Markers markers,
    TypeTree? typeQualifier,
    PositionalPatternClause? positionalPattern,
    PropertyPatternClause? propertyPattern,
    VariableDesignation? designation
    ) : Cs.Pattern, Expression<RecursivePattern>, J<RecursivePattern>, MutableTree<RecursivePattern>
    {
        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitRecursivePattern(this, p);
        }

        public Guid Id { get;  set; } = id;

        public RecursivePattern WithId(Guid newId)
        {
            return newId == Id ? this : new RecursivePattern(newId, Prefix, Markers, TypeQualifier, PositionalPattern, PropertyPattern, Designation);
        }
        public Space Prefix { get;  set; } = prefix;

        public RecursivePattern WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new RecursivePattern(Id, newPrefix, Markers, TypeQualifier, PositionalPattern, PropertyPattern, Designation);
        }
        public Markers Markers { get;  set; } = markers;

        public RecursivePattern WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new RecursivePattern(Id, Prefix, newMarkers, TypeQualifier, PositionalPattern, PropertyPattern, Designation);
        }
        public TypeTree? TypeQualifier { get;  set; } = typeQualifier;

        public RecursivePattern WithTypeQualifier(TypeTree? newTypeQualifier)
        {
            return ReferenceEquals(newTypeQualifier, TypeQualifier) ? this : new RecursivePattern(Id, Prefix, Markers, newTypeQualifier, PositionalPattern, PropertyPattern, Designation);
        }
        public Cs.PositionalPatternClause? PositionalPattern { get;  set; } = positionalPattern;

        public RecursivePattern WithPositionalPattern(Cs.PositionalPatternClause? newPositionalPattern)
        {
            return ReferenceEquals(newPositionalPattern, PositionalPattern) ? this : new RecursivePattern(Id, Prefix, Markers, TypeQualifier, newPositionalPattern, PropertyPattern, Designation);
        }
        public Cs.PropertyPatternClause? PropertyPattern { get;  set; } = propertyPattern;

        public RecursivePattern WithPropertyPattern(Cs.PropertyPatternClause? newPropertyPattern)
        {
            return ReferenceEquals(newPropertyPattern, PropertyPattern) ? this : new RecursivePattern(Id, Prefix, Markers, TypeQualifier, PositionalPattern, newPropertyPattern, Designation);
        }
        public Cs.VariableDesignation? Designation { get;  set; } = designation;

        public RecursivePattern WithDesignation(Cs.VariableDesignation? newDesignation)
        {
            return ReferenceEquals(newDesignation, Designation) ? this : new RecursivePattern(Id, Prefix, Markers, TypeQualifier, PositionalPattern, PropertyPattern, newDesignation);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is RecursivePattern && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}