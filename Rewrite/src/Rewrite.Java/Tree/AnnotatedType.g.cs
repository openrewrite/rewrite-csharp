//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class AnnotatedType(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> annotations,
    TypeTree typeExpression
    ) : J, Expression, TypeTree, Expression<AnnotatedType>, TypedTree<AnnotatedType>, TypeTree<AnnotatedType>, MutableTree<AnnotatedType>
    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitAnnotatedType(this, p);
        }

        public Guid Id => id;

        public AnnotatedType WithId(Guid newId)
        {
            return newId == id ? this : new AnnotatedType(newId, prefix, markers, annotations, typeExpression);
        }
        public Space Prefix => prefix;

        public AnnotatedType WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new AnnotatedType(id, newPrefix, markers, annotations, typeExpression);
        }
        public Markers Markers => markers;

        public AnnotatedType WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new AnnotatedType(id, prefix, newMarkers, annotations, typeExpression);
        }
        public IList<J.Annotation> Annotations => annotations;

        public AnnotatedType WithAnnotations(IList<J.Annotation> newAnnotations)
        {
            return newAnnotations == annotations ? this : new AnnotatedType(id, prefix, markers, newAnnotations, typeExpression);
        }
        public TypeTree TypeExpression => typeExpression;

        public AnnotatedType WithTypeExpression(TypeTree newTypeExpression)
        {
            return ReferenceEquals(newTypeExpression, typeExpression) ? this : new AnnotatedType(id, prefix, markers, annotations, newTypeExpression);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is AnnotatedType && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}