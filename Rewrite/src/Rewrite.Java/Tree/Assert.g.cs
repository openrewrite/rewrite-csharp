//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Assert(
    Guid id,
    Space prefix,
    Markers markers,
    Expression condition,
    JLeftPadded<Expression>? detail
    ) : J, Statement, MutableTree<Assert>
    {
        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitAssert(this, p);
        }

        public Guid Id => id;

        public Assert WithId(Guid newId)
        {
            return newId == id ? this : new Assert(newId, prefix, markers, condition, detail);
        }
        public Space Prefix => prefix;

        public Assert WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new Assert(id, newPrefix, markers, condition, detail);
        }
        public Markers Markers => markers;

        public Assert WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new Assert(id, prefix, newMarkers, condition, detail);
        }
        public Expression Condition => condition;

        public Assert WithCondition(Expression newCondition)
        {
            return ReferenceEquals(newCondition, condition) ? this : new Assert(id, prefix, markers, newCondition, detail);
        }
        public JLeftPadded<Expression>? Detail => detail;

        public Assert WithDetail(JLeftPadded<Expression>? newDetail)
        {
            return newDetail == detail ? this : new Assert(id, prefix, markers, condition, newDetail);
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Assert && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}