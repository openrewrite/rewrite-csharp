//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// An expression that yields the default value of a type.
    /// <br/>
    /// For example:
    /// <code>
    ///   default(int)         // Returns 0
    ///   default(string)      // Returns null
    ///   default(bool)        // Returns false
    ///   default(MyClass)     // Returns null
    ///   var x = default;     // Type inferred from context (C# 7.1+)
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class DefaultExpression(
    Guid id,
    Space prefix,
    Markers markers,
    JContainer<TypeTree>? typeOperator
    ) : Cs, Expression, TypedTree, Expression<DefaultExpression>, TypedTree<DefaultExpression>, J<DefaultExpression>, MutableTree<DefaultExpression>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitDefaultExpression(this, p);
        }

        public Guid Id => id;

        public DefaultExpression WithId(Guid newId)
        {
            return newId == id ? this : new DefaultExpression(newId, prefix, markers, _typeOperator);
        }
        public Space Prefix => prefix;

        public DefaultExpression WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new DefaultExpression(id, newPrefix, markers, _typeOperator);
        }
        public Markers Markers => markers;

        public DefaultExpression WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new DefaultExpression(id, prefix, newMarkers, _typeOperator);
        }
        private readonly JContainer<TypeTree>? _typeOperator = typeOperator;
        public IList<TypeTree>? TypeOperator => _typeOperator?.GetElements();

        public DefaultExpression WithTypeOperator(IList<TypeTree>? newTypeOperator)
        {
            return Padding.WithTypeOperator(JContainer<TypeTree>.WithElementsNullable(_typeOperator, newTypeOperator));
        }
        public sealed record PaddingHelper(Cs.DefaultExpression T)
        {
            public JContainer<TypeTree>? TypeOperator => T._typeOperator;

            public Cs.DefaultExpression WithTypeOperator(JContainer<TypeTree>? newTypeOperator)
            {
                return T._typeOperator == newTypeOperator ? T : new Cs.DefaultExpression(T.Id, T.Prefix, T.Markers, newTypeOperator);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is DefaultExpression && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}