//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# enum declaration, including optional modifiers, attributes, and enum members.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple enum
    ///     public enum Colors { Red, Green, Blue }
    ///     // Enum with base type
    ///     enum Flags : byte { None, All }
    ///     // Enum with attributes and explicit values
    ///     [Flags]
    ///     internal enum Permissions {
    ///         None = 0,
    ///         Read = 1,
    ///         Write = 2,
    ///         ReadWrite = Read | Write
    ///     }
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class EnumDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<AttributeList>? attributeLists,
    IList<J.Modifier> modifiers,
    JLeftPadded<J.Identifier> name,
    JLeftPadded<TypeTree>? baseType,
    JContainer<EnumMemberDeclaration>? members
    ) : Cs, Statement, J<EnumDeclaration>, MutableTree<EnumDeclaration>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitEnumDeclaration(this, p);
        }

        public Guid Id => id;

        public EnumDeclaration WithId(Guid newId)
        {
            return newId == id ? this : new EnumDeclaration(newId, prefix, markers, attributeLists, modifiers, _name, _baseType, _members);
        }
        public Space Prefix => prefix;

        public EnumDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new EnumDeclaration(id, newPrefix, markers, attributeLists, modifiers, _name, _baseType, _members);
        }
        public Markers Markers => markers;

        public EnumDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new EnumDeclaration(id, prefix, newMarkers, attributeLists, modifiers, _name, _baseType, _members);
        }
        public IList<Cs.AttributeList>? AttributeLists => attributeLists;

        public EnumDeclaration WithAttributeLists(IList<Cs.AttributeList>? newAttributeLists)
        {
            return newAttributeLists == attributeLists ? this : new EnumDeclaration(id, prefix, markers, newAttributeLists, modifiers, _name, _baseType, _members);
        }
        public IList<J.Modifier> Modifiers => modifiers;

        public EnumDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == modifiers ? this : new EnumDeclaration(id, prefix, markers, attributeLists, newModifiers, _name, _baseType, _members);
        }
        private readonly JLeftPadded<J.Identifier> _name = name;
        public J.Identifier Name => _name.Element;

        public EnumDeclaration WithName(J.Identifier newName)
        {
            return Padding.WithName(_name.WithElement(newName));
        }
        private readonly JLeftPadded<TypeTree>? _baseType = baseType;
        public TypeTree? BaseType => _baseType?.Element;

        public EnumDeclaration WithBaseType(TypeTree? newBaseType)
        {
            return Padding.WithBaseType(JLeftPadded<TypeTree>.WithElement(_baseType, newBaseType));
        }
        private readonly JContainer<Cs.EnumMemberDeclaration>? _members = members;
        public IList<Cs.EnumMemberDeclaration>? Members => _members?.GetElements();

        public EnumDeclaration WithMembers(IList<Cs.EnumMemberDeclaration>? newMembers)
        {
            return Padding.WithMembers(JContainer<Cs.EnumMemberDeclaration>.WithElementsNullable(_members, newMembers));
        }
        public sealed record PaddingHelper(Cs.EnumDeclaration T)
        {
            public JLeftPadded<J.Identifier> Name => T._name;

            public Cs.EnumDeclaration WithName(JLeftPadded<J.Identifier> newName)
            {
                return T._name == newName ? T : new Cs.EnumDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeLists, T.Modifiers, newName, T._baseType, T._members);
            }

            public JLeftPadded<TypeTree>? BaseType => T._baseType;

            public Cs.EnumDeclaration WithBaseType(JLeftPadded<TypeTree>? newBaseType)
            {
                return T._baseType == newBaseType ? T : new Cs.EnumDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeLists, T.Modifiers, T._name, newBaseType, T._members);
            }

            public JContainer<Cs.EnumMemberDeclaration>? Members => T._members;

            public Cs.EnumDeclaration WithMembers(JContainer<Cs.EnumMemberDeclaration>? newMembers)
            {
                return T._members == newMembers ? T : new Cs.EnumDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeLists, T.Modifiers, T._name, T._baseType, newMembers);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is EnumDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}