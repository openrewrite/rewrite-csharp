//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# accessor declaration (get/set/init) within a property or indexer.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple get/set accessors
    ///     public int Value {
    ///         get { return _value; }
    ///         set { _value = value; }
    ///     }
    ///     // Expression body accessor
    ///     public string Name {
    ///         get =&gt; _name;
    ///     }
    ///     // Auto-implemented property accessors
    ///     public bool IsValid { get; set; }
    ///     // Init-only setter
    ///     public string Id { get; init; }
    ///     // Access modifiers on accessors
    ///     public int Age {
    ///         get { return _age; }
    ///         private set { _age = value; }
    ///     }
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class AccessorDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<AttributeList> attributes,
    IList<J.Modifier> modifiers,
    JLeftPadded<AccessorDeclaration.AccessorKinds> kind,
    ArrowExpressionClause? expressionBody,
    J.Block? body
    ) : Cs, Statement, J<AccessorDeclaration>, MutableTree<AccessorDeclaration>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitAccessorDeclaration(this, p);
        }

        public Guid Id => id;

        public AccessorDeclaration WithId(Guid newId)
        {
            return newId == id ? this : new AccessorDeclaration(newId, prefix, markers, attributes, modifiers, _kind, expressionBody, body);
        }
        public Space Prefix => prefix;

        public AccessorDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new AccessorDeclaration(id, newPrefix, markers, attributes, modifiers, _kind, expressionBody, body);
        }
        public Markers Markers => markers;

        public AccessorDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new AccessorDeclaration(id, prefix, newMarkers, attributes, modifiers, _kind, expressionBody, body);
        }
        public IList<Cs.AttributeList> Attributes => attributes;

        public AccessorDeclaration WithAttributes(IList<Cs.AttributeList> newAttributes)
        {
            return newAttributes == attributes ? this : new AccessorDeclaration(id, prefix, markers, newAttributes, modifiers, _kind, expressionBody, body);
        }
        public IList<J.Modifier> Modifiers => modifiers;

        public AccessorDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == modifiers ? this : new AccessorDeclaration(id, prefix, markers, attributes, newModifiers, _kind, expressionBody, body);
        }
        private readonly JLeftPadded<AccessorKinds> _kind = kind;
        public AccessorKinds Kind => _kind.Element;

        public AccessorDeclaration WithKind(AccessorKinds newKind)
        {
            return Padding.WithKind(_kind.WithElement(newKind));
        }
        public Cs.ArrowExpressionClause? ExpressionBody => expressionBody;

        public AccessorDeclaration WithExpressionBody(Cs.ArrowExpressionClause? newExpressionBody)
        {
            return ReferenceEquals(newExpressionBody, expressionBody) ? this : new AccessorDeclaration(id, prefix, markers, attributes, modifiers, _kind, newExpressionBody, body);
        }
        public J.Block? Body => body;

        public AccessorDeclaration WithBody(J.Block? newBody)
        {
            return ReferenceEquals(newBody, body) ? this : new AccessorDeclaration(id, prefix, markers, attributes, modifiers, _kind, expressionBody, newBody);
        }
        public enum AccessorKinds
        {
            Get,
            Set,
            Init,
            Add,
            Remove,
        }
        public sealed record PaddingHelper(Cs.AccessorDeclaration T)
        {
            public JLeftPadded<Cs.AccessorDeclaration.AccessorKinds> Kind => T._kind;

            public Cs.AccessorDeclaration WithKind(JLeftPadded<Cs.AccessorDeclaration.AccessorKinds> newKind)
            {
                return T._kind == newKind ? T : new Cs.AccessorDeclaration(T.Id, T.Prefix, T.Markers, T.Attributes, T.Modifiers, newKind, T.ExpressionBody, T.Body);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is AccessorDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}