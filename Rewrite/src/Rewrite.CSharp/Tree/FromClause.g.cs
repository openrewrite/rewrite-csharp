//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a LINQ from clause that introduces a range variable and its source collection.
    /// This is typically the initial clause of a LINQ query.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Simple from clause
    ///     from user in users
    ///     // With type
    ///     from Customer c in customers
    ///     // With pattern match
    ///     from (x, y) in points
    ///     // With type and pattern
    ///     from (int x, int y) in coordinates
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class FromClause(
    Guid id,
    Space prefix,
    Markers markers,
    TypeTree? typeIdentifier,
    JRightPadded<J.Identifier> identifier,
    Expression expression
    ) : Cs, Cs.QueryClause, Expression, Expression<FromClause>, J<FromClause>, MutableTree<FromClause>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitFromClause(this, p);
        }

        public Guid Id => id;

        public FromClause WithId(Guid newId)
        {
            return newId == id ? this : new FromClause(newId, prefix, markers, typeIdentifier, _identifier, expression);
        }
        public Space Prefix => prefix;

        public FromClause WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new FromClause(id, newPrefix, markers, typeIdentifier, _identifier, expression);
        }
        public Markers Markers => markers;

        public FromClause WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new FromClause(id, prefix, newMarkers, typeIdentifier, _identifier, expression);
        }
        public TypeTree? TypeIdentifier => typeIdentifier;

        public FromClause WithTypeIdentifier(TypeTree? newTypeIdentifier)
        {
            return ReferenceEquals(newTypeIdentifier, typeIdentifier) ? this : new FromClause(id, prefix, markers, newTypeIdentifier, _identifier, expression);
        }
        private readonly JRightPadded<J.Identifier> _identifier = identifier;
        public J.Identifier Identifier => _identifier.Element;

        public FromClause WithIdentifier(J.Identifier newIdentifier)
        {
            return Padding.WithIdentifier(_identifier.WithElement(newIdentifier));
        }
        public Expression Expression => expression;

        public FromClause WithExpression(Expression newExpression)
        {
            return ReferenceEquals(newExpression, expression) ? this : new FromClause(id, prefix, markers, typeIdentifier, _identifier, newExpression);
        }
        public sealed record PaddingHelper(Cs.FromClause T)
        {
            public JRightPadded<J.Identifier> Identifier => T._identifier;

            public Cs.FromClause WithIdentifier(JRightPadded<J.Identifier> newIdentifier)
            {
                return T._identifier == newIdentifier ? T : new Cs.FromClause(T.Id, T.Prefix, T.Markers, T.TypeIdentifier, newIdentifier, T.Expression);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is FromClause && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}