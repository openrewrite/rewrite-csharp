//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class MethodDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<Annotation> leadingAnnotations,
    IList<Modifier> modifiers,
    TypeParameters? typeParameters,
    TypeTree? returnTypeExpression,
    MethodDeclaration.IdentifierWithAnnotations name,
    JContainer<Statement> parameters,
    JContainer<NameTree>? throws,
    Block? body,
    JLeftPadded<Expression>? defaultValue,
    JavaType.Method? methodType
    ) : J, Statement, TypedTree, TypedTree<MethodDeclaration>, MutableTree<MethodDeclaration>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        [NonSerialized] private WeakReference<AnnotationsHelper>? _annotations;

        public AnnotationsHelper Annotations
        {
            get
            {
                AnnotationsHelper? p;
                if (_annotations == null)
                {
                    p = new AnnotationsHelper(this);
                    _annotations = new WeakReference<AnnotationsHelper>(p);
                }
                else
                {
                    _annotations.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new AnnotationsHelper(this);
                        _annotations.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitMethodDeclaration(this, p);
        }

        public Guid Id => id;

        public MethodDeclaration WithId(Guid newId)
        {
            return newId == id ? this : new MethodDeclaration(newId, prefix, markers, leadingAnnotations, modifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, body, _defaultValue, methodType);
        }
        public Space Prefix => prefix;

        public MethodDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new MethodDeclaration(id, newPrefix, markers, leadingAnnotations, modifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, body, _defaultValue, methodType);
        }
        public Markers Markers => markers;

        public MethodDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new MethodDeclaration(id, prefix, newMarkers, leadingAnnotations, modifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, body, _defaultValue, methodType);
        }
        public IList<J.Annotation> LeadingAnnotations => leadingAnnotations;

        public MethodDeclaration WithLeadingAnnotations(IList<J.Annotation> newLeadingAnnotations)
        {
            return newLeadingAnnotations == leadingAnnotations ? this : new MethodDeclaration(id, prefix, markers, newLeadingAnnotations, modifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, body, _defaultValue, methodType);
        }
        public IList<J.Modifier> Modifiers => modifiers;

        public MethodDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == modifiers ? this : new MethodDeclaration(id, prefix, markers, leadingAnnotations, newModifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, body, _defaultValue, methodType);
        }
        private readonly J.TypeParameters? _typeParameters = typeParameters;
        public TypeTree? ReturnTypeExpression => returnTypeExpression;

        public MethodDeclaration WithReturnTypeExpression(TypeTree? newReturnTypeExpression)
        {
            return ReferenceEquals(newReturnTypeExpression, returnTypeExpression) ? this : new MethodDeclaration(id, prefix, markers, leadingAnnotations, modifiers, _typeParameters, newReturnTypeExpression, _name, _parameters, _throws, body, _defaultValue, methodType);
        }
        private readonly IdentifierWithAnnotations _name = name;
        private readonly JContainer<Statement> _parameters = parameters;
        public IList<Statement> Parameters => _parameters.GetElements();

        public MethodDeclaration WithParameters(IList<Statement> newParameters)
        {
            return Padding.WithParameters(JContainer<Statement>.WithElements(_parameters, newParameters));
        }
        private readonly JContainer<NameTree>? _throws = throws;
        public IList<NameTree>? Throws => _throws?.GetElements();

        public MethodDeclaration WithThrows(IList<NameTree>? newThrows)
        {
            return Padding.WithThrows(JContainer<NameTree>.WithElementsNullable(_throws, newThrows));
        }
        public J.Block? Body => body;

        public MethodDeclaration WithBody(J.Block? newBody)
        {
            return ReferenceEquals(newBody, body) ? this : new MethodDeclaration(id, prefix, markers, leadingAnnotations, modifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, newBody, _defaultValue, methodType);
        }
        private readonly JLeftPadded<Expression>? _defaultValue = defaultValue;
        public Expression? DefaultValue => _defaultValue?.Element;

        public MethodDeclaration WithDefaultValue(Expression? newDefaultValue)
        {
            return Padding.WithDefaultValue(JLeftPadded<Expression>.WithElement(_defaultValue, newDefaultValue));
        }
        public JavaType.Method? MethodType => methodType;

        public MethodDeclaration WithMethodType(JavaType.Method? newMethodType)
        {
            return newMethodType == methodType ? this : new MethodDeclaration(id, prefix, markers, leadingAnnotations, modifiers, _typeParameters, returnTypeExpression, _name, _parameters, _throws, body, _defaultValue, newMethodType);
        }
        public sealed record IdentifierWithAnnotations(
    J.Identifier identifier,
    IList<J.Annotation> annotations
        )
        {
            public J.Identifier Identifier => identifier;

            public IdentifierWithAnnotations WithIdentifier(J.Identifier newIdentifier)
            {
                return ReferenceEquals(newIdentifier, identifier) ? this : new IdentifierWithAnnotations(newIdentifier, annotations);
            }
            public IList<J.Annotation> Annotations => annotations;

            public IdentifierWithAnnotations WithAnnotations(IList<J.Annotation> newAnnotations)
            {
                return newAnnotations == annotations ? this : new IdentifierWithAnnotations(identifier, newAnnotations);
            }
        }
        public sealed record PaddingHelper(J.MethodDeclaration T)
        {
            public J.TypeParameters? TypeParameters => T._typeParameters;

            public J.MethodDeclaration WithTypeParameters(J.TypeParameters? newTypeParameters)
            {
                return T._typeParameters == newTypeParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, newTypeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public J.MethodDeclaration.IdentifierWithAnnotations Name => T._name;

            public J.MethodDeclaration WithName(J.MethodDeclaration.IdentifierWithAnnotations newName)
            {
                return T._name == newName ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, newName, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<Statement> Parameters => T._parameters;

            public J.MethodDeclaration WithParameters(JContainer<Statement> newParameters)
            {
                return T._parameters == newParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, newParameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<NameTree>? Throws => T._throws;

            public J.MethodDeclaration WithThrows(JContainer<NameTree>? newThrows)
            {
                return T._throws == newThrows ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, newThrows, T.Body, T._defaultValue, T.MethodType);
            }

            public JLeftPadded<Expression>? DefaultValue => T._defaultValue;

            public J.MethodDeclaration WithDefaultValue(JLeftPadded<Expression>? newDefaultValue)
            {
                return T._defaultValue == newDefaultValue ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, newDefaultValue, T.MethodType);
            }

        }

        public sealed record AnnotationsHelper(J.MethodDeclaration T)
        {
            public J.TypeParameters? TypeParameters => T._typeParameters;

            public J.MethodDeclaration WithTypeParameters(J.TypeParameters? newTypeParameters)
            {
                return T._typeParameters == newTypeParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, newTypeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public J.MethodDeclaration.IdentifierWithAnnotations Name => T._name;

            public J.MethodDeclaration WithName(J.MethodDeclaration.IdentifierWithAnnotations newName)
            {
                return T._name == newName ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, newName, T._parameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<Statement> Parameters => T._parameters;

            public J.MethodDeclaration WithParameters(JContainer<Statement> newParameters)
            {
                return T._parameters == newParameters ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, newParameters, T._throws, T.Body, T._defaultValue, T.MethodType);
            }

            public JContainer<NameTree>? Throws => T._throws;

            public J.MethodDeclaration WithThrows(JContainer<NameTree>? newThrows)
            {
                return T._throws == newThrows ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, newThrows, T.Body, T._defaultValue, T.MethodType);
            }

            public JLeftPadded<Expression>? DefaultValue => T._defaultValue;

            public J.MethodDeclaration WithDefaultValue(JLeftPadded<Expression>? newDefaultValue)
            {
                return T._defaultValue == newDefaultValue ? T : new J.MethodDeclaration(T.Id, T.Prefix, T.Markers, T.LeadingAnnotations, T.Modifiers, T._typeParameters, T.ReturnTypeExpression, T._name, T._parameters, T._throws, T.Body, newDefaultValue, T.MethodType);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is MethodDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}