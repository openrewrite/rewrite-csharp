//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    /// <summary>
    /// Represents a switch case label in a switch statement.
    /// <br/>Example:
    /// <code>{@code
    /// switch(x) {
    ///     case 1:
    ///         doSomething();
    ///         break;
    /// }
    /// }</code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Case(
    Guid id,
    Space prefix,
    Markers markers,
    Case.Types caseType,
    JContainer<J> caseLabels,
    JContainer<Statement> statements,
    JRightPadded<J>? body,
    Expression? guard
    ) : J,Statement    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitCase(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Case WithId(Guid newId)
        {
            return newId == Id ? this : new Case(newId, Prefix, Markers, CaseType, _caseLabels, _statements, _body, Guard);
        }
        public Space Prefix { get;  set; } = prefix;

        public Case WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Case(Id, newPrefix, Markers, CaseType, _caseLabels, _statements, _body, Guard);
        }
        public Markers Markers { get;  set; } = markers;

        public Case WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Case(Id, Prefix, newMarkers, CaseType, _caseLabels, _statements, _body, Guard);
        }
        public Types CaseType { get;  set; } = caseType;

        public Case WithCaseType(Types newCaseType)
        {
            return newCaseType == CaseType ? this : new Case(Id, Prefix, Markers, newCaseType, _caseLabels, _statements, _body, Guard);
        }
        private JContainer<J> _caseLabels = caseLabels;
        public IList<J> CaseLabels => _caseLabels.GetElements();

        public Case WithCaseLabels(IList<J> newCaseLabels)
        {
            return Padding.WithCaseLabels(JContainer<J>.WithElements(_caseLabels, newCaseLabels));
        }
        private JContainer<Statement> _statements = statements;
        public IList<Statement> Statements => _statements.GetElements();

        public Case WithStatements(IList<Statement> newStatements)
        {
            return Padding.WithStatements(JContainer<Statement>.WithElements(_statements, newStatements));
        }
        private JRightPadded<J>? _body = body;
        public J? Body => _body?.Element;

        public Case WithBody(J? newBody)
        {
            return Padding.WithBody(JRightPadded<J>.WithElement(_body, newBody));
        }
        public Expression? Guard { get;  set; } = guard;

        public Case WithGuard(Expression? newGuard)
        {
            return ReferenceEquals(newGuard, Guard) ? this : new Case(Id, Prefix, Markers, CaseType, _caseLabels, _statements, _body, newGuard);
        }
        public enum Types
        {
            Statement,
            Rule,
        }
        public sealed record PaddingHelper(J.Case T)
        {
            public JContainer<J> CaseLabels { get => T._caseLabels;  set => T._caseLabels = value; }

            public J.Case WithCaseLabels(JContainer<J> newCaseLabels)
            {
                return CaseLabels == newCaseLabels ? T : new J.Case(T.Id, T.Prefix, T.Markers, T.CaseType, newCaseLabels, T._statements, T._body, T.Guard);
            }

            public JContainer<Statement> Statements { get => T._statements;  set => T._statements = value; }

            public J.Case WithStatements(JContainer<Statement> newStatements)
            {
                return Statements == newStatements ? T : new J.Case(T.Id, T.Prefix, T.Markers, T.CaseType, T._caseLabels, newStatements, T._body, T.Guard);
            }

            public JRightPadded<J>? Body { get => T._body;  set => T._body = value; }

            public J.Case WithBody(JRightPadded<J>? newBody)
            {
                return Body == newBody ? T : new J.Case(T.Id, T.Prefix, T.Markers, T.CaseType, T._caseLabels, T._statements, newBody, T.Guard);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Case && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}