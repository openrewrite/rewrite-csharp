//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents an operator declaration in C# classes, which allows overloading of operators
    /// for custom types.
    /// <br/>
    /// For example:
    /// <code>
    ///     // Unary operator overload
    ///     public static Vector operator +(Vector a)
    ///     // Binary operator overload
    ///     public static Point operator *(Point p, float scale)
    ///     // Interface implementation
    ///     IEnumerable<T>.Vector operator +(Vector a)
    ///     // Conversion operator
    ///     public static explicit operator int(Complex c)
    ///     // Custom operator
    ///     public static Point operator ++(Point p)
    /// </code>
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class OperatorDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<AttributeList> attributeLists,
    IList<J.Modifier> modifiers,
    JRightPadded<TypeTree>? explicitInterfaceSpecifier,
    Keyword operatorKeyword,
    Keyword? checkedKeyword,
    JLeftPadded<OperatorDeclaration.Operator> operatorToken,
    TypeTree returnType,
    JContainer<Expression> parameters,
    J.Block body,
    JavaType.Method? methodType
    ) : Cs,Statement    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitOperatorDeclaration(this, p);
        }

        public Guid Id { get;  set; } = id;

        public OperatorDeclaration WithId(Guid newId)
        {
            return newId == Id ? this : new OperatorDeclaration(newId, Prefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        public Space Prefix { get;  set; } = prefix;

        public OperatorDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new OperatorDeclaration(Id, newPrefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        public Markers Markers { get;  set; } = markers;

        public OperatorDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new OperatorDeclaration(Id, Prefix, newMarkers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        public IList<Cs.AttributeList> AttributeLists { get;  set; } = attributeLists;

        public OperatorDeclaration WithAttributeLists(IList<Cs.AttributeList> newAttributeLists)
        {
            return newAttributeLists == AttributeLists ? this : new OperatorDeclaration(Id, Prefix, Markers, newAttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        public IList<J.Modifier> Modifiers { get;  set; } = modifiers;

        public OperatorDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == Modifiers ? this : new OperatorDeclaration(Id, Prefix, Markers, AttributeLists, newModifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        private JRightPadded<TypeTree>? _explicitInterfaceSpecifier = explicitInterfaceSpecifier;
        public TypeTree? ExplicitInterfaceSpecifier => _explicitInterfaceSpecifier?.Element;

        public OperatorDeclaration WithExplicitInterfaceSpecifier(TypeTree? newExplicitInterfaceSpecifier)
        {
            return Padding.WithExplicitInterfaceSpecifier(JRightPadded<TypeTree>.WithElement(_explicitInterfaceSpecifier, newExplicitInterfaceSpecifier));
        }
        public Cs.Keyword OperatorKeyword { get;  set; } = operatorKeyword;

        public OperatorDeclaration WithOperatorKeyword(Cs.Keyword newOperatorKeyword)
        {
            return ReferenceEquals(newOperatorKeyword, OperatorKeyword) ? this : new OperatorDeclaration(Id, Prefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, newOperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        public Cs.Keyword? CheckedKeyword { get;  set; } = checkedKeyword;

        public OperatorDeclaration WithCheckedKeyword(Cs.Keyword? newCheckedKeyword)
        {
            return ReferenceEquals(newCheckedKeyword, CheckedKeyword) ? this : new OperatorDeclaration(Id, Prefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, newCheckedKeyword, _operatorToken, ReturnType, _parameters, Body, MethodType);
        }
        private JLeftPadded<Operator> _operatorToken = operatorToken;
        public Operator OperatorToken => _operatorToken.Element;

        public OperatorDeclaration WithOperatorToken(Operator newOperatorToken)
        {
            return Padding.WithOperatorToken(_operatorToken.WithElement(newOperatorToken));
        }
        public TypeTree ReturnType { get;  set; } = returnType;

        public OperatorDeclaration WithReturnType(TypeTree newReturnType)
        {
            return ReferenceEquals(newReturnType, ReturnType) ? this : new OperatorDeclaration(Id, Prefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, newReturnType, _parameters, Body, MethodType);
        }
        private JContainer<Expression> _parameters = parameters;
        public IList<Expression> Parameters => _parameters.GetElements();

        public OperatorDeclaration WithParameters(IList<Expression> newParameters)
        {
            return Padding.WithParameters(JContainer<Expression>.WithElements(_parameters, newParameters));
        }
        public J.Block Body { get;  set; } = body;

        public OperatorDeclaration WithBody(J.Block newBody)
        {
            return ReferenceEquals(newBody, Body) ? this : new OperatorDeclaration(Id, Prefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, newBody, MethodType);
        }
        public JavaType.Method? MethodType { get;  set; } = methodType;

        public OperatorDeclaration WithMethodType(JavaType.Method? newMethodType)
        {
            return newMethodType == MethodType ? this : new OperatorDeclaration(Id, Prefix, Markers, AttributeLists, Modifiers, _explicitInterfaceSpecifier, OperatorKeyword, CheckedKeyword, _operatorToken, ReturnType, _parameters, Body, newMethodType);
        }
        public enum Operator
        {
            Plus,
            Minus,
            Bang,
            Tilde,
            PlusPlus,
            MinusMinus,
            Star,
            Division,
            Percent,
            LeftShift,
            RightShift,
            LessThan,
            GreaterThan,
            LessThanEquals,
            GreaterThanEquals,
            Equals,
            NotEquals,
            Ampersand,
            Bar,
            Caret,
            True,
            False,
        }
        public sealed record PaddingHelper(Cs.OperatorDeclaration T)
        {
            public JRightPadded<TypeTree>? ExplicitInterfaceSpecifier { get => T._explicitInterfaceSpecifier;  set => T._explicitInterfaceSpecifier = value; }

            public Cs.OperatorDeclaration WithExplicitInterfaceSpecifier(JRightPadded<TypeTree>? newExplicitInterfaceSpecifier)
            {
                return ExplicitInterfaceSpecifier == newExplicitInterfaceSpecifier ? T : new Cs.OperatorDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeLists, T.Modifiers, newExplicitInterfaceSpecifier, T.OperatorKeyword, T.CheckedKeyword, T._operatorToken, T.ReturnType, T._parameters, T.Body, T.MethodType);
            }

            public JLeftPadded<Cs.OperatorDeclaration.Operator> OperatorToken { get => T._operatorToken;  set => T._operatorToken = value; }

            public Cs.OperatorDeclaration WithOperatorToken(JLeftPadded<Cs.OperatorDeclaration.Operator> newOperatorToken)
            {
                return OperatorToken == newOperatorToken ? T : new Cs.OperatorDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeLists, T.Modifiers, T._explicitInterfaceSpecifier, T.OperatorKeyword, T.CheckedKeyword, newOperatorToken, T.ReturnType, T._parameters, T.Body, T.MethodType);
            }

            public JContainer<Expression> Parameters { get => T._parameters;  set => T._parameters = value; }

            public Cs.OperatorDeclaration WithParameters(JContainer<Expression> newParameters)
            {
                return Parameters == newParameters ? T : new Cs.OperatorDeclaration(T.Id, T.Prefix, T.Markers, T.AttributeLists, T.Modifiers, T._explicitInterfaceSpecifier, T.OperatorKeyword, T.CheckedKeyword, T._operatorToken, T.ReturnType, newParameters, T.Body, T.MethodType);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is OperatorDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}