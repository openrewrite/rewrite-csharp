//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class Try(
    Guid id,
    Space prefix,
    Markers markers,
    JContainer<Try.Resource>? resources,
    Block body,
    IList<Try.Catch> catches,
    JLeftPadded<Block>? @finally
    ) : J, Statement, J<Try>, MutableTree<Try>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitTry(this, p);
        }

        public Guid Id { get;  set; } = id;

        public Try WithId(Guid newId)
        {
            return newId == Id ? this : new Try(newId, Prefix, Markers, _resources, Body, Catches, _finally);
        }
        public Space Prefix { get;  set; } = prefix;

        public Try WithPrefix(Space newPrefix)
        {
            return newPrefix == Prefix ? this : new Try(Id, newPrefix, Markers, _resources, Body, Catches, _finally);
        }
        public Markers Markers { get;  set; } = markers;

        public Try WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, Markers) ? this : new Try(Id, Prefix, newMarkers, _resources, Body, Catches, _finally);
        }
        private JContainer<Resource>? _resources = resources;
        public IList<Resource>? Resources => _resources?.GetElements();

        public Try WithResources(IList<Resource>? newResources)
        {
            return Padding.WithResources(JContainer<Resource>.WithElementsNullable(_resources, newResources));
        }
        public J.Block Body { get;  set; } = body;

        public Try WithBody(J.Block newBody)
        {
            return ReferenceEquals(newBody, Body) ? this : new Try(Id, Prefix, Markers, _resources, newBody, Catches, _finally);
        }
        public IList<Catch> Catches { get;  set; } = catches;

        public Try WithCatches(IList<Catch> newCatches)
        {
            return newCatches == Catches ? this : new Try(Id, Prefix, Markers, _resources, Body, newCatches, _finally);
        }
        private JLeftPadded<J.Block>? _finally = @finally;
        public J.Block? Finally => _finally?.Element;

        public Try WithFinally(J.Block? newFinally)
        {
            return Padding.WithFinally(JLeftPadded<J.Block>.WithElement(_finally, newFinally));
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class Resource(
    Guid id,
    Space prefix,
    Markers markers,
    TypedTree variableDeclarations,
    bool terminatedWithSemicolon
        ) : J, J<Resource>, MutableTree<Resource>
        {
            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitTryResource(this, p);
            }

            public Guid Id { get;  set; } = id;

            public Resource WithId(Guid newId)
            {
                return newId == Id ? this : new Resource(newId, Prefix, Markers, VariableDeclarations, TerminatedWithSemicolon);
            }
            public Space Prefix { get;  set; } = prefix;

            public Resource WithPrefix(Space newPrefix)
            {
                return newPrefix == Prefix ? this : new Resource(Id, newPrefix, Markers, VariableDeclarations, TerminatedWithSemicolon);
            }
            public Markers Markers { get;  set; } = markers;

            public Resource WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, Markers) ? this : new Resource(Id, Prefix, newMarkers, VariableDeclarations, TerminatedWithSemicolon);
            }
            public TypedTree VariableDeclarations { get;  set; } = variableDeclarations;

            public Resource WithVariableDeclarations(TypedTree newVariableDeclarations)
            {
                return ReferenceEquals(newVariableDeclarations, VariableDeclarations) ? this : new Resource(Id, Prefix, Markers, newVariableDeclarations, TerminatedWithSemicolon);
            }
            public bool TerminatedWithSemicolon { get;  set; } = terminatedWithSemicolon;

            public Resource WithTerminatedWithSemicolon(bool newTerminatedWithSemicolon)
            {
                return newTerminatedWithSemicolon == TerminatedWithSemicolon ? this : new Resource(Id, Prefix, Markers, VariableDeclarations, newTerminatedWithSemicolon);
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Resource && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public partial class Catch(
    Guid id,
    Space prefix,
    Markers markers,
    J.ControlParentheses<J.VariableDeclarations> parameter,
    J.Block body
        ) : J, J<Catch>, MutableTree<Catch>
        {
            public J? AcceptJava<P>(JavaVisitor<P> v, P p)
            {
                return v.VisitCatch(this, p);
            }

            public Guid Id { get;  set; } = id;

            public Catch WithId(Guid newId)
            {
                return newId == Id ? this : new Catch(newId, Prefix, Markers, Parameter, Body);
            }
            public Space Prefix { get;  set; } = prefix;

            public Catch WithPrefix(Space newPrefix)
            {
                return newPrefix == Prefix ? this : new Catch(Id, newPrefix, Markers, Parameter, Body);
            }
            public Markers Markers { get;  set; } = markers;

            public Catch WithMarkers(Markers newMarkers)
            {
                return ReferenceEquals(newMarkers, Markers) ? this : new Catch(Id, Prefix, newMarkers, Parameter, Body);
            }
            public J.ControlParentheses<J.VariableDeclarations> Parameter { get;  set; } = parameter;

            public Catch WithParameter(J.ControlParentheses<J.VariableDeclarations> newParameter)
            {
                return ReferenceEquals(newParameter, Parameter) ? this : new Catch(Id, Prefix, Markers, newParameter, Body);
            }
            public J.Block Body { get;  set; } = body;

            public Catch WithBody(J.Block newBody)
            {
                return ReferenceEquals(newBody, Body) ? this : new Catch(Id, Prefix, Markers, Parameter, newBody);
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public bool Equals(Rewrite.Core.Tree? other)
            {
                return other is Catch && other.Id == Id;
            }
            #if DEBUG_VISITOR
            [DebuggerStepThrough]
            #endif
            public override int GetHashCode()
            {
                return Id.GetHashCode();
            }
        }
        public sealed record PaddingHelper(J.Try T)
        {
            public JContainer<J.Try.Resource>? Resources { get => T._resources;  set => T._resources = value; }

            public J.Try WithResources(JContainer<J.Try.Resource>? newResources)
            {
                return Resources == newResources ? T : new J.Try(T.Id, T.Prefix, T.Markers, newResources, T.Body, T.Catches, T._finally);
            }

            public JLeftPadded<J.Block>? Finally { get => T._finally;  set => T._finally = value; }

            public J.Try WithFinally(JLeftPadded<J.Block>? newFinally)
            {
                return Finally == newFinally ? T : new J.Try(T.Id, T.Prefix, T.Markers, T._resources, T.Body, T.Catches, newFinally);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Try && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}