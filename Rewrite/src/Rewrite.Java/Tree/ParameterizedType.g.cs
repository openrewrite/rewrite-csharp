//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    public partial class ParameterizedType(
    Guid id,
    Space prefix,
    Markers markers,
    NameTree clazz,
    JContainer<Expression>? typeParameters,
    JavaType? type
    ) : J, TypeTree, Expression, MutableTree<ParameterizedType>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitParameterizedType(this, p);
        }

        public Guid Id => id;

        public ParameterizedType WithId(Guid newId)
        {
            return newId == id ? this : new ParameterizedType(newId, prefix, markers, clazz, _typeParameters, type);
        }
        public Space Prefix => prefix;

        public ParameterizedType WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new ParameterizedType(id, newPrefix, markers, clazz, _typeParameters, type);
        }
        public Markers Markers => markers;

        public ParameterizedType WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new ParameterizedType(id, prefix, newMarkers, clazz, _typeParameters, type);
        }
        public NameTree Clazz => clazz;

        public ParameterizedType WithClazz(NameTree newClazz)
        {
            return ReferenceEquals(newClazz, clazz) ? this : new ParameterizedType(id, prefix, markers, newClazz, _typeParameters, type);
        }
        private readonly JContainer<Expression>? _typeParameters = typeParameters;
        public IList<Expression>? TypeParameters => _typeParameters?.GetElements();

        public ParameterizedType WithTypeParameters(IList<Expression>? newTypeParameters)
        {
            return Padding.WithTypeParameters(JContainer<Expression>.WithElementsNullable(_typeParameters, newTypeParameters));
        }
        public JavaType? Type => type;

        public ParameterizedType WithType(JavaType? newType)
        {
            return newType == type ? this : new ParameterizedType(id, prefix, markers, clazz, _typeParameters, newType);
        }
        public sealed record PaddingHelper(J.ParameterizedType T)
        {
            public JContainer<Expression>? TypeParameters => T._typeParameters;

            public J.ParameterizedType WithTypeParameters(JContainer<Expression>? newTypeParameters)
            {
                return T._typeParameters == newTypeParameters ? T : new J.ParameterizedType(T.Id, T.Prefix, T.Markers, T.Clazz, newTypeParameters, T.Type);
            }

        }

        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ParameterizedType && other.Id == Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}