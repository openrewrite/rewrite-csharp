//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    /// <summary>
    /// Represents a C# operator conversion declaration that defines custom type conversion behavior.
    /// <code>
    /// // Implicit conversion
    /// public static implicit operator string(MyType t) =&gt; t.ToString();
    /// // Explicit conversion
    /// public static explicit operator int(MyType t) { return t.Value; }
    /// // With expression body
    /// public static explicit operator double(MyType t) =&gt; t.Value;
    /// // With block body
    /// public static implicit operator bool(MyType t) {
    ///     return t.Value != 0;
    /// }
    /// </summary>
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    public partial class ConversionOperatorDeclaration(
    Guid id,
    Space prefix,
    Markers markers,
    IList<J.Modifier> modifiers,
    JLeftPadded<ConversionOperatorDeclaration.ExplicitImplicit> kind,
    JLeftPadded<TypeTree> returnType,
    JContainer<Statement> parameters,
    JLeftPadded<Expression>? expressionBody,
    J.Block? body
    ) : Cs, Statement, J<ConversionOperatorDeclaration>, MutableTree<ConversionOperatorDeclaration>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
        {
            return v.VisitConversionOperatorDeclaration(this, p);
        }

        public Guid Id => id;

        public ConversionOperatorDeclaration WithId(Guid newId)
        {
            return newId == id ? this : new ConversionOperatorDeclaration(newId, prefix, markers, modifiers, _kind, _returnType, _parameters, _expressionBody, body);
        }
        public Space Prefix => prefix;

        public ConversionOperatorDeclaration WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new ConversionOperatorDeclaration(id, newPrefix, markers, modifiers, _kind, _returnType, _parameters, _expressionBody, body);
        }
        public Markers Markers => markers;

        public ConversionOperatorDeclaration WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new ConversionOperatorDeclaration(id, prefix, newMarkers, modifiers, _kind, _returnType, _parameters, _expressionBody, body);
        }
        public IList<J.Modifier> Modifiers => modifiers;

        public ConversionOperatorDeclaration WithModifiers(IList<J.Modifier> newModifiers)
        {
            return newModifiers == modifiers ? this : new ConversionOperatorDeclaration(id, prefix, markers, newModifiers, _kind, _returnType, _parameters, _expressionBody, body);
        }
        private readonly JLeftPadded<ExplicitImplicit> _kind = kind;
        public ExplicitImplicit Kind => _kind.Element;

        public ConversionOperatorDeclaration WithKind(ExplicitImplicit newKind)
        {
            return Padding.WithKind(_kind.WithElement(newKind));
        }
        private readonly JLeftPadded<TypeTree> _returnType = returnType;
        public TypeTree ReturnType => _returnType.Element;

        public ConversionOperatorDeclaration WithReturnType(TypeTree newReturnType)
        {
            return Padding.WithReturnType(_returnType.WithElement(newReturnType));
        }
        private readonly JContainer<Statement> _parameters = parameters;
        public IList<Statement> Parameters => _parameters.GetElements();

        public ConversionOperatorDeclaration WithParameters(IList<Statement> newParameters)
        {
            return Padding.WithParameters(JContainer<Statement>.WithElements(_parameters, newParameters));
        }
        private readonly JLeftPadded<Expression>? _expressionBody = expressionBody;
        public Expression? ExpressionBody => _expressionBody?.Element;

        public ConversionOperatorDeclaration WithExpressionBody(Expression? newExpressionBody)
        {
            return Padding.WithExpressionBody(JLeftPadded<Expression>.WithElement(_expressionBody, newExpressionBody));
        }
        public J.Block? Body => body;

        public ConversionOperatorDeclaration WithBody(J.Block? newBody)
        {
            return ReferenceEquals(newBody, body) ? this : new ConversionOperatorDeclaration(id, prefix, markers, modifiers, _kind, _returnType, _parameters, _expressionBody, newBody);
        }
        public enum ExplicitImplicit
        {
            Implicit,
            Explicit,
        }
        public sealed record PaddingHelper(Cs.ConversionOperatorDeclaration T)
        {
            public JLeftPadded<Cs.ConversionOperatorDeclaration.ExplicitImplicit> Kind => T._kind;

            public Cs.ConversionOperatorDeclaration WithKind(JLeftPadded<Cs.ConversionOperatorDeclaration.ExplicitImplicit> newKind)
            {
                return T._kind == newKind ? T : new Cs.ConversionOperatorDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, newKind, T._returnType, T._parameters, T._expressionBody, T.Body);
            }

            public JLeftPadded<TypeTree> ReturnType => T._returnType;

            public Cs.ConversionOperatorDeclaration WithReturnType(JLeftPadded<TypeTree> newReturnType)
            {
                return T._returnType == newReturnType ? T : new Cs.ConversionOperatorDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, T._kind, newReturnType, T._parameters, T._expressionBody, T.Body);
            }

            public JContainer<Statement> Parameters => T._parameters;

            public Cs.ConversionOperatorDeclaration WithParameters(JContainer<Statement> newParameters)
            {
                return T._parameters == newParameters ? T : new Cs.ConversionOperatorDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, T._kind, T._returnType, newParameters, T._expressionBody, T.Body);
            }

            public JLeftPadded<Expression>? ExpressionBody => T._expressionBody;

            public Cs.ConversionOperatorDeclaration WithExpressionBody(JLeftPadded<Expression>? newExpressionBody)
            {
                return T._expressionBody == newExpressionBody ? T : new Cs.ConversionOperatorDeclaration(T.Id, T.Prefix, T.Markers, T.Modifiers, T._kind, T._returnType, T._parameters, newExpressionBody, T.Body);
            }

        }

        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is ConversionOperatorDeclaration && other.Id == Id;
        }
        #if DEBUG_VISITOR
        [DebuggerStepThrough]
        #endif
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}