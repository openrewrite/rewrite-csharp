//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108 // 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable CS8767 // Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;
using Rewrite.RewriteJava.Tree;

namespace Rewrite.RewriteCSharp.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface Cs : J
{
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    bool Core.Tree.IsAcceptable<R, P>(ITreeVisitor<R, P> v, P p)
    {
        return v.IsAdaptableTo(typeof(CSharpVisitorAsync<>)) || v.IsAdaptableTo(typeof(CSharpVisitor<>));
    }
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    R? Core.Tree.Accept<R, P>(ITreeVisitor<R, P> v, P p) where R : class
    {
        // if (v is ITreeVisitorAsync<R, P>)
        // {
        //     return (R?)(AcceptCSharp(v.Adapt<J, CSharpVisitorAsync<P>>(), p).Result);
        // }
        return (R?)AcceptCSharp(v.Adapt<J, CSharpVisitor<P>>(), p);
    }
    #if DEBUG_VISITOR
    [DebuggerStepThrough]
    #endif
    J? AcceptCSharp<P>(CSharpVisitor<P> v, P p)
    {
        return v.DefaultValue(this, p);
    }
    // async Task <J?> AcceptCSharp<P>(CSharpVisitorAsync<P> v, P p)
    // {
    //     return v.DefaultValue(this, p);
    // }
}
