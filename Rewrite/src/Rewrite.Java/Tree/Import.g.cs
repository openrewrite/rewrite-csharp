//------------------------------------------------------------------------------
// <auto-generated>
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0108
using System.Diagnostics.CodeAnalysis;
using Rewrite.Core;
using Rewrite.Core.Marker;
using FileAttributes = Rewrite.Core.FileAttributes;

namespace Rewrite.RewriteJava.Tree;

[SuppressMessage("ReSharper", "InconsistentNaming")]
[SuppressMessage("ReSharper", "PossibleUnintendedReferenceComparison")]
[SuppressMessage("ReSharper", "InvertIf")]
[SuppressMessage("ReSharper", "RedundantExtendsListEntry")]
[SuppressMessage("ReSharper", "UnusedMember.Global")]
[SuppressMessage("ReSharper", "RedundantNameQualifier")]
public partial interface J : Rewrite.Core.Tree
{
    public partial class Import(
    Guid id,
    Space prefix,
    Markers markers,
    JLeftPadded<bool> @static,
    FieldAccess qualid,
    JLeftPadded<Identifier>? alias
    ) : Statement, MutableTree<Import>
    {
        [NonSerialized] private WeakReference<PaddingHelper>? _padding;

        public PaddingHelper Padding
        {
            get
            {
                PaddingHelper? p;
                if (_padding == null)
                {
                    p = new PaddingHelper(this);
                    _padding = new WeakReference<PaddingHelper>(p);
                }
                else
                {
                    _padding.TryGetTarget(out p);
                    if (p == null || p.T != this)
                    {
                        p = new PaddingHelper(this);
                        _padding.SetTarget(p);
                    }
                }
                return p;
            }
        }

        public J? AcceptJava<P>(JavaVisitor<P> v, P p)
        {
            return v.VisitImport(this, p);
        }

        public Guid Id => id;

        public Import WithId(Guid newId)
        {
            return newId == id ? this : new Import(newId, prefix, markers, _static, qualid, _alias);
        }
        public Space Prefix => prefix;

        public Import WithPrefix(Space newPrefix)
        {
            return newPrefix == prefix ? this : new Import(id, newPrefix, markers, _static, qualid, _alias);
        }
        public Markers Markers => markers;

        public Import WithMarkers(Markers newMarkers)
        {
            return ReferenceEquals(newMarkers, markers) ? this : new Import(id, prefix, newMarkers, _static, qualid, _alias);
        }
        private readonly JLeftPadded<bool> _static = @static;
        public bool Static => _static.Element;

        public Import WithStatic(bool newStatic)
        {
            return Padding.WithStatic(_static.WithElement(newStatic));
        }
        public J.FieldAccess Qualid => qualid;

        public Import WithQualid(J.FieldAccess newQualid)
        {
            return ReferenceEquals(newQualid, qualid) ? this : new Import(id, prefix, markers, _static, newQualid, _alias);
        }
        private readonly JLeftPadded<J.Identifier>? _alias = alias;
        public J.Identifier? Alias => _alias?.Element;

        public Import WithAlias(J.Identifier? newAlias)
        {
            return Padding.WithAlias(JLeftPadded<J.Identifier>.WithElement(_alias, newAlias));
        }
        public sealed record PaddingHelper(J.Import T)
        {
            public JLeftPadded<bool> Static => T._static;

            public J.Import WithStatic(JLeftPadded<bool> newStatic)
            {
                return T._static == newStatic ? T : new J.Import(T.Id, T.Prefix, T.Markers, newStatic, T.Qualid, T._alias);
            }

            public JLeftPadded<J.Identifier>? Alias => T._alias;

            public J.Import WithAlias(JLeftPadded<J.Identifier>? newAlias)
            {
                return T._alias == newAlias ? T : new J.Import(T.Id, T.Prefix, T.Markers, T._static, T.Qualid, newAlias);
            }

        }

        public bool Equals(Rewrite.Core.Tree? other)
        {
            return other is Import && other.Id == Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }
}